%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.14.2
-module(opensync_stats).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_RadioBandType/1, enum_value_by_symbol_RadioBandType/1]).
-export([enum_symbol_by_value_SurveyType/1, enum_value_by_symbol_SurveyType/1]).
-export([enum_symbol_by_value_NeighborType/1, enum_value_by_symbol_NeighborType/1]).
-export([enum_symbol_by_value_ChanWidth/1, enum_value_by_symbol_ChanWidth/1]).
-export([enum_symbol_by_value_WmmAc/1, enum_value_by_symbol_WmmAc/1]).
-export([enum_symbol_by_value_BSEventType/1, enum_value_by_symbol_BSEventType/1]).
-export([enum_symbol_by_value_EventType/1, enum_value_by_symbol_EventType/1]).
-export([enum_symbol_by_value_DeviceType/1, enum_value_by_symbol_DeviceType/1]).
-export([enum_symbol_by_value_FrameType/1, enum_value_by_symbol_FrameType/1]).
-export([enum_symbol_by_value_DisconnectSrc/1, enum_value_by_symbol_DisconnectSrc/1]).
-export([enum_symbol_by_value_AssocType/1, enum_value_by_symbol_AssocType/1]).
-export([enum_symbol_by_value_DisconnectType/1, enum_value_by_symbol_DisconnectType/1]).
-export([enum_symbol_by_value_SecurityType/1, enum_value_by_symbol_SecurityType/1]).
-export([enum_symbol_by_value_ReportType/1, enum_value_by_symbol_ReportType/1]).
-export([enum_symbol_by_value_FsType/1, enum_value_by_symbol_FsType/1]).
-export([enum_symbol_by_value_CTReasonType/1, enum_value_by_symbol_CTReasonType/1]).
-export([enum_symbol_by_value_DiffType/1, enum_value_by_symbol_DiffType/1]).
-export([enum_symbol_by_value_StreamingVideoType/1, enum_value_by_symbol_StreamingVideoType/1]).
-export(['enum_symbol_by_value_RssiPeer.RssiSource'/1, 'enum_value_by_symbol_RssiPeer.RssiSource'/1]).
-export([enum_symbol_by_value_StateUpDown/1, enum_value_by_symbol_StateUpDown/1]).
-export(['enum_symbol_by_value_RtpFlowStats.RtpFlowDirection'/1, 'enum_value_by_symbol_RtpFlowStats.RtpFlowDirection'/1]).
-export(['enum_symbol_by_value_RtpFlowStats.RtpFlowType'/1, 'enum_value_by_symbol_RtpFlowStats.RtpFlowType'/1]).
-export(['enum_symbol_by_value_CallStop.CallStopReason'/1, 'enum_value_by_symbol_CallStop.CallStopReason'/1]).
-export(['enum_symbol_by_value_CallReport.CallReportReason'/1, 'enum_value_by_symbol_CallReport.CallReportReason'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("opensync_stats.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'RadioBandType'() :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU'.
-type 'SurveyType'() :: 'ON_CHANNEL' | 'OFF_CHANNEL' | 'FULL'.
-type 'NeighborType'() :: 'ONCHAN_SCAN' | 'OFFCHAN_SCAN' | 'FULL_SCAN'.
-type 'ChanWidth'() :: 'CHAN_WIDTH_UNKNOWN' | 'CHAN_WIDTH_20MHZ' | 'CHAN_WIDTH_40MHZ' | 'CHAN_WIDTH_40MHZ_ABOVE' | 'CHAN_WIDTH_40MHZ_BELOW' | 'CHAN_WIDTH_80MHZ' | 'CHAN_WIDTH_160MHZ' | 'CHAN_WIDTH_80_PLUS_80MHZ'.
-type 'WmmAc'() :: 'WMM_AC_VO' | 'WMM_AC_VI' | 'WMM_AC_BE' | 'WMM_AC_BK'.
-type 'BSEventType'() :: 'PROBE' | 'CONNECT' | 'DISCONNECT' | 'BACKOFF' | 'ACTIVITY' | 'OVERRUN' | 'BAND_STEERING_ATTEMPT' | 'CLIENT_STEERING_ATTEMPT' | 'CLIENT_STEERING_STARTED' | 'CLIENT_STEERING_DISABLED' | 'CLIENT_STEERING_EXPIRED' | 'CLIENT_STEERING_FAILED' | 'AUTH_BLOCK' | 'CLIENT_KICKED' | 'CLIENT_BS_BTM' | 'CLIENT_STICKY_BTM' | 'CLIENT_BTM' | 'CLIENT_CAPABILITIES' | 'CLIENT_BS_BTM_RETRY' | 'CLIENT_STICKY_BTM_RETRY' | 'CLIENT_BTM_RETRY' | 'CLIENT_RRM_BCN_RPT' | 'CLIENT_BS_KICK' | 'CLIENT_STICKY_KICK' | 'CLIENT_SPECULATIVE_KICK' | 'CLIENT_DIRECTED_KICK' | 'CLIENT_GHOST_DEVICE_KICK'.
-type 'EventType'() :: 'CLIENT_ASSOC' | 'CLIENT_AUTH' | 'CLIENT_DISCONNECT' | 'CLIENT_FAILURE' | 'CLIENT_FIRST_DATA' | 'CLIEND_ID' | 'CLIENT_IP' | 'CLIENT_TIMEOUT'.
-type 'DeviceType'() :: 'DEV_AP' | 'DEV_STA'.
-type 'FrameType'() :: 'FT_DEAUTH' | 'FT_DISASSOC'.
-type 'DisconnectSrc'() :: 'LOCAL' | 'REMOTE'.
-type 'AssocType'() :: 'ASSOC' | 'REASSOC'.
-type 'DisconnectType'() :: 'DISASSOC' | 'DEAUTH'.
-type 'SecurityType'() :: 'SEC_OPEN' | 'SEC_RADIUS' | 'SEC_PSK'.
-type 'ReportType'() :: 'RAW' | 'AVERAGE' | 'HISTOGRAM' | 'PERCENTILE' | 'DIFF'.
-type 'FsType'() :: 'FS_TYPE_ROOTFS' | 'FS_TYPE_TMPFS'.
-type 'CTReasonType'() :: 'CTR_IDLE_TOO_LONG' | 'CTR_PROBE_FAIL'.
-type 'DiffType'() :: 'ADDED' | 'REMOVED'.
-type 'StreamingVideoType'() :: 'UNKNOWN' | 'NETFLIX' | 'YOUTUBE' | 'PLEX'.
-type 'RssiPeer.RssiSource'() :: 'CLIENT' | 'PROBE' | 'NEIGHBOR'.
-type 'StateUpDown'() :: 'SUD_down' | 'SUD_up' | 'SUD_error'.
-type 'RtpFlowStats.RtpFlowDirection'() :: 'RTP_UPSTREAM' | 'RTP_DOWNSTREAM'.
-type 'RtpFlowStats.RtpFlowType'() :: 'RTP_VOICE' | 'RTP_VIDEO'.
-type 'CallStop.CallStopReason'() :: 'BYE_OK' | 'CALL_DROPPED'.
-type 'CallReport.CallReportReason'() :: 'ROAMED_FROM' | 'ROAMED_TO' | 'GOT_PUBLISH'.
-export_type(['RadioBandType'/0, 'SurveyType'/0, 'NeighborType'/0, 'ChanWidth'/0, 'WmmAc'/0, 'BSEventType'/0, 'EventType'/0, 'DeviceType'/0, 'FrameType'/0, 'DisconnectSrc'/0, 'AssocType'/0, 'DisconnectType'/0, 'SecurityType'/0, 'ReportType'/0, 'FsType'/0, 'CTReasonType'/0, 'DiffType'/0, 'StreamingVideoType'/0, 'RssiPeer.RssiSource'/0, 'StateUpDown'/0, 'RtpFlowStats.RtpFlowDirection'/0, 'RtpFlowStats.RtpFlowType'/0, 'CallStop.CallStopReason'/0, 'CallReport.CallReportReason'/0]).

%% message types
-type 'AvgType'() :: #'AvgType'{}.

-type 'Neighbor.NeighborBss'() :: #'Neighbor.NeighborBss'{}.

-type 'Neighbor'() :: #'Neighbor'{}.

-type 'Client.Stats'() :: #'Client.Stats'{}.

-type 'Client.RxStats'() :: #'Client.RxStats'{}.

-type 'Client.RxStats.ChainRSSI'() :: #'Client.RxStats.ChainRSSI'{}.

-type 'Client.TxStats'() :: #'Client.TxStats'{}.

-type 'Client.TidStats'() :: #'Client.TidStats'{}.

-type 'Client.TidStats.Sojourn'() :: #'Client.TidStats.Sojourn'{}.

-type 'Client'() :: #'Client'{}.

-type 'ClientReport'() :: #'ClientReport'{}.

-type 'Survey.SurveySample'() :: #'Survey.SurveySample'{}.

-type 'Survey.SurveyAvg'() :: #'Survey.SurveyAvg'{}.

-type 'Survey'() :: #'Survey'{}.

-type 'Capacity.QueueSample'() :: #'Capacity.QueueSample'{}.

-type 'Capacity'() :: #'Capacity'{}.

-type 'Device.LoadAvg'() :: #'Device.LoadAvg'{}.

-type 'Device.RadioTemp'() :: #'Device.RadioTemp'{}.

-type 'Device.Thermal'() :: #'Device.Thermal'{}.

-type 'Device.Thermal.RadioTxChainMask'() :: #'Device.Thermal.RadioTxChainMask'{}.

-type 'Device.MemUtil'() :: #'Device.MemUtil'{}.

-type 'Device.FsUtil'() :: #'Device.FsUtil'{}.

-type 'Device.CpuUtil'() :: #'Device.CpuUtil'{}.

-type 'Device.PerProcessUtil'() :: #'Device.PerProcessUtil'{}.

-type 'Device'() :: #'Device'{}.

-type 'BSClient.BSEvent'() :: #'BSClient.BSEvent'{}.

-type 'BSClient.BSBandReport'() :: #'BSClient.BSBandReport'{}.

-type 'BSClient'() :: #'BSClient'{}.

-type 'BSReport'() :: #'BSReport'{}.

-type 'RssiPeer.RssiSample'() :: #'RssiPeer.RssiSample'{}.

-type 'RssiPeer'() :: #'RssiPeer'{}.

-type 'RssiReport'() :: #'RssiReport'{}.

-type 'DNSProbeMetric'() :: #'DNSProbeMetric'{}.

-type 'VLANMetrics'() :: #'VLANMetrics'{}.

-type 'RADIUSMetrics'() :: #'RADIUSMetrics'{}.

-type 'NetworkProbe'() :: #'NetworkProbe'{}.

-type 'RtpFlowStats'() :: #'RtpFlowStats'{}.

-type 'CallStart'() :: #'CallStart'{}.

-type 'CallStop'() :: #'CallStop'{}.

-type 'CallReport'() :: #'CallReport'{}.

-type 'StreamingVideoDetectPattern'() :: #'StreamingVideoDetectPattern'{}.

-type 'StreamingVideoSessionStart'() :: #'StreamingVideoSessionStart'{}.

-type 'StreamingVideoServerDetected'() :: #'StreamingVideoServerDetected'{}.

-type 'StreamingVideoStop'() :: #'StreamingVideoStop'{}.

-type 'VideoVoiceReport'() :: #'VideoVoiceReport'{}.

-type 'EventReport.ClientAssocEvent'() :: #'EventReport.ClientAssocEvent'{}.

-type 'EventReport.ClientAuthEvent'() :: #'EventReport.ClientAuthEvent'{}.

-type 'EventReport.ClientDisconnectEvent'() :: #'EventReport.ClientDisconnectEvent'{}.

-type 'EventReport.ClientConnectEvent'() :: #'EventReport.ClientConnectEvent'{}.

-type 'EventReport.ClientFailureEvent'() :: #'EventReport.ClientFailureEvent'{}.

-type 'EventReport.ClientFirstDataEvent'() :: #'EventReport.ClientFirstDataEvent'{}.

-type 'EventReport.ClientIdEvent'() :: #'EventReport.ClientIdEvent'{}.

-type 'EventReport.ClientIpEvent'() :: #'EventReport.ClientIpEvent'{}.

-type 'EventReport.ClientTimeoutEvent'() :: #'EventReport.ClientTimeoutEvent'{}.

-type 'EventReport.ClientSession'() :: #'EventReport.ClientSession'{}.

-type 'EventReport'() :: #'EventReport'{}.

-type 'Report'() :: #'Report'{}.

-export_type(['AvgType'/0, 'Neighbor.NeighborBss'/0, 'Neighbor'/0, 'Client.Stats'/0, 'Client.RxStats'/0, 'Client.RxStats.ChainRSSI'/0, 'Client.TxStats'/0, 'Client.TidStats'/0, 'Client.TidStats.Sojourn'/0, 'Client'/0, 'ClientReport'/0, 'Survey.SurveySample'/0, 'Survey.SurveyAvg'/0, 'Survey'/0, 'Capacity.QueueSample'/0, 'Capacity'/0, 'Device.LoadAvg'/0, 'Device.RadioTemp'/0, 'Device.Thermal'/0, 'Device.Thermal.RadioTxChainMask'/0, 'Device.MemUtil'/0, 'Device.FsUtil'/0, 'Device.CpuUtil'/0, 'Device.PerProcessUtil'/0, 'Device'/0, 'BSClient.BSEvent'/0, 'BSClient.BSBandReport'/0, 'BSClient'/0, 'BSReport'/0, 'RssiPeer.RssiSample'/0, 'RssiPeer'/0, 'RssiReport'/0, 'DNSProbeMetric'/0, 'VLANMetrics'/0, 'RADIUSMetrics'/0, 'NetworkProbe'/0, 'RtpFlowStats'/0, 'CallStart'/0, 'CallStop'/0, 'CallReport'/0, 'StreamingVideoDetectPattern'/0, 'StreamingVideoSessionStart'/0, 'StreamingVideoServerDetected'/0, 'StreamingVideoStop'/0, 'VideoVoiceReport'/0, 'EventReport.ClientAssocEvent'/0, 'EventReport.ClientAuthEvent'/0, 'EventReport.ClientDisconnectEvent'/0, 'EventReport.ClientConnectEvent'/0, 'EventReport.ClientFailureEvent'/0, 'EventReport.ClientFirstDataEvent'/0, 'EventReport.ClientIdEvent'/0, 'EventReport.ClientIpEvent'/0, 'EventReport.ClientTimeoutEvent'/0, 'EventReport.ClientSession'/0, 'EventReport'/0, 'Report'/0]).

-spec encode_msg(#'AvgType'{} | #'Neighbor.NeighborBss'{} | #'Neighbor'{} | #'Client.Stats'{} | #'Client.RxStats'{} | #'Client.RxStats.ChainRSSI'{} | #'Client.TxStats'{} | #'Client.TidStats'{} | #'Client.TidStats.Sojourn'{} | #'Client'{} | #'ClientReport'{} | #'Survey.SurveySample'{} | #'Survey.SurveyAvg'{} | #'Survey'{} | #'Capacity.QueueSample'{} | #'Capacity'{} | #'Device.LoadAvg'{} | #'Device.RadioTemp'{} | #'Device.Thermal'{} | #'Device.Thermal.RadioTxChainMask'{} | #'Device.MemUtil'{} | #'Device.FsUtil'{} | #'Device.CpuUtil'{} | #'Device.PerProcessUtil'{} | #'Device'{} | #'BSClient.BSEvent'{} | #'BSClient.BSBandReport'{} | #'BSClient'{} | #'BSReport'{} | #'RssiPeer.RssiSample'{} | #'RssiPeer'{} | #'RssiReport'{} | #'DNSProbeMetric'{} | #'VLANMetrics'{} | #'RADIUSMetrics'{} | #'NetworkProbe'{} | #'RtpFlowStats'{} | #'CallStart'{} | #'CallStop'{} | #'CallReport'{} | #'StreamingVideoDetectPattern'{} | #'StreamingVideoSessionStart'{} | #'StreamingVideoServerDetected'{} | #'StreamingVideoStop'{} | #'VideoVoiceReport'{} | #'EventReport.ClientAssocEvent'{} | #'EventReport.ClientAuthEvent'{} | #'EventReport.ClientDisconnectEvent'{} | #'EventReport.ClientConnectEvent'{} | #'EventReport.ClientFailureEvent'{} | #'EventReport.ClientFirstDataEvent'{} | #'EventReport.ClientIdEvent'{} | #'EventReport.ClientIpEvent'{} | #'EventReport.ClientTimeoutEvent'{} | #'EventReport.ClientSession'{} | #'EventReport'{} | #'Report'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'AvgType'{} | #'Neighbor.NeighborBss'{} | #'Neighbor'{} | #'Client.Stats'{} | #'Client.RxStats'{} | #'Client.RxStats.ChainRSSI'{} | #'Client.TxStats'{} | #'Client.TidStats'{} | #'Client.TidStats.Sojourn'{} | #'Client'{} | #'ClientReport'{} | #'Survey.SurveySample'{} | #'Survey.SurveyAvg'{} | #'Survey'{} | #'Capacity.QueueSample'{} | #'Capacity'{} | #'Device.LoadAvg'{} | #'Device.RadioTemp'{} | #'Device.Thermal'{} | #'Device.Thermal.RadioTxChainMask'{} | #'Device.MemUtil'{} | #'Device.FsUtil'{} | #'Device.CpuUtil'{} | #'Device.PerProcessUtil'{} | #'Device'{} | #'BSClient.BSEvent'{} | #'BSClient.BSBandReport'{} | #'BSClient'{} | #'BSReport'{} | #'RssiPeer.RssiSample'{} | #'RssiPeer'{} | #'RssiReport'{} | #'DNSProbeMetric'{} | #'VLANMetrics'{} | #'RADIUSMetrics'{} | #'NetworkProbe'{} | #'RtpFlowStats'{} | #'CallStart'{} | #'CallStop'{} | #'CallReport'{} | #'StreamingVideoDetectPattern'{} | #'StreamingVideoSessionStart'{} | #'StreamingVideoServerDetected'{} | #'StreamingVideoStop'{} | #'VideoVoiceReport'{} | #'EventReport.ClientAssocEvent'{} | #'EventReport.ClientAuthEvent'{} | #'EventReport.ClientDisconnectEvent'{} | #'EventReport.ClientConnectEvent'{} | #'EventReport.ClientFailureEvent'{} | #'EventReport.ClientFirstDataEvent'{} | #'EventReport.ClientIdEvent'{} | #'EventReport.ClientIpEvent'{} | #'EventReport.ClientTimeoutEvent'{} | #'EventReport.ClientSession'{} | #'EventReport'{} | #'Report'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'AvgType'{} | #'Neighbor.NeighborBss'{} | #'Neighbor'{} | #'Client.Stats'{} | #'Client.RxStats'{} | #'Client.RxStats.ChainRSSI'{} | #'Client.TxStats'{} | #'Client.TidStats'{} | #'Client.TidStats.Sojourn'{} | #'Client'{} | #'ClientReport'{} | #'Survey.SurveySample'{} | #'Survey.SurveyAvg'{} | #'Survey'{} | #'Capacity.QueueSample'{} | #'Capacity'{} | #'Device.LoadAvg'{} | #'Device.RadioTemp'{} | #'Device.Thermal'{} | #'Device.Thermal.RadioTxChainMask'{} | #'Device.MemUtil'{} | #'Device.FsUtil'{} | #'Device.CpuUtil'{} | #'Device.PerProcessUtil'{} | #'Device'{} | #'BSClient.BSEvent'{} | #'BSClient.BSBandReport'{} | #'BSClient'{} | #'BSReport'{} | #'RssiPeer.RssiSample'{} | #'RssiPeer'{} | #'RssiReport'{} | #'DNSProbeMetric'{} | #'VLANMetrics'{} | #'RADIUSMetrics'{} | #'NetworkProbe'{} | #'RtpFlowStats'{} | #'CallStart'{} | #'CallStop'{} | #'CallReport'{} | #'StreamingVideoDetectPattern'{} | #'StreamingVideoSessionStart'{} | #'StreamingVideoServerDetected'{} | #'StreamingVideoStop'{} | #'VideoVoiceReport'{} | #'EventReport.ClientAssocEvent'{} | #'EventReport.ClientAuthEvent'{} | #'EventReport.ClientDisconnectEvent'{} | #'EventReport.ClientConnectEvent'{} | #'EventReport.ClientFailureEvent'{} | #'EventReport.ClientFirstDataEvent'{} | #'EventReport.ClientIdEvent'{} | #'EventReport.ClientIpEvent'{} | #'EventReport.ClientTimeoutEvent'{} | #'EventReport.ClientSession'{} | #'EventReport'{} | #'Report'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'AvgType' -> encode_msg_AvgType(id(Msg, TrUserData), TrUserData);
        'Neighbor.NeighborBss' -> 'encode_msg_Neighbor.NeighborBss'(id(Msg, TrUserData), TrUserData);
        'Neighbor' -> encode_msg_Neighbor(id(Msg, TrUserData), TrUserData);
        'Client.Stats' -> 'encode_msg_Client.Stats'(id(Msg, TrUserData), TrUserData);
        'Client.RxStats' -> 'encode_msg_Client.RxStats'(id(Msg, TrUserData), TrUserData);
        'Client.RxStats.ChainRSSI' -> 'encode_msg_Client.RxStats.ChainRSSI'(id(Msg, TrUserData), TrUserData);
        'Client.TxStats' -> 'encode_msg_Client.TxStats'(id(Msg, TrUserData), TrUserData);
        'Client.TidStats' -> 'encode_msg_Client.TidStats'(id(Msg, TrUserData), TrUserData);
        'Client.TidStats.Sojourn' -> 'encode_msg_Client.TidStats.Sojourn'(id(Msg, TrUserData), TrUserData);
        'Client' -> encode_msg_Client(id(Msg, TrUserData), TrUserData);
        'ClientReport' -> encode_msg_ClientReport(id(Msg, TrUserData), TrUserData);
        'Survey.SurveySample' -> 'encode_msg_Survey.SurveySample'(id(Msg, TrUserData), TrUserData);
        'Survey.SurveyAvg' -> 'encode_msg_Survey.SurveyAvg'(id(Msg, TrUserData), TrUserData);
        'Survey' -> encode_msg_Survey(id(Msg, TrUserData), TrUserData);
        'Capacity.QueueSample' -> 'encode_msg_Capacity.QueueSample'(id(Msg, TrUserData), TrUserData);
        'Capacity' -> encode_msg_Capacity(id(Msg, TrUserData), TrUserData);
        'Device.LoadAvg' -> 'encode_msg_Device.LoadAvg'(id(Msg, TrUserData), TrUserData);
        'Device.RadioTemp' -> 'encode_msg_Device.RadioTemp'(id(Msg, TrUserData), TrUserData);
        'Device.Thermal' -> 'encode_msg_Device.Thermal'(id(Msg, TrUserData), TrUserData);
        'Device.Thermal.RadioTxChainMask' -> 'encode_msg_Device.Thermal.RadioTxChainMask'(id(Msg, TrUserData), TrUserData);
        'Device.MemUtil' -> 'encode_msg_Device.MemUtil'(id(Msg, TrUserData), TrUserData);
        'Device.FsUtil' -> 'encode_msg_Device.FsUtil'(id(Msg, TrUserData), TrUserData);
        'Device.CpuUtil' -> 'encode_msg_Device.CpuUtil'(id(Msg, TrUserData), TrUserData);
        'Device.PerProcessUtil' -> 'encode_msg_Device.PerProcessUtil'(id(Msg, TrUserData), TrUserData);
        'Device' -> encode_msg_Device(id(Msg, TrUserData), TrUserData);
        'BSClient.BSEvent' -> 'encode_msg_BSClient.BSEvent'(id(Msg, TrUserData), TrUserData);
        'BSClient.BSBandReport' -> 'encode_msg_BSClient.BSBandReport'(id(Msg, TrUserData), TrUserData);
        'BSClient' -> encode_msg_BSClient(id(Msg, TrUserData), TrUserData);
        'BSReport' -> encode_msg_BSReport(id(Msg, TrUserData), TrUserData);
        'RssiPeer.RssiSample' -> 'encode_msg_RssiPeer.RssiSample'(id(Msg, TrUserData), TrUserData);
        'RssiPeer' -> encode_msg_RssiPeer(id(Msg, TrUserData), TrUserData);
        'RssiReport' -> encode_msg_RssiReport(id(Msg, TrUserData), TrUserData);
        'DNSProbeMetric' -> encode_msg_DNSProbeMetric(id(Msg, TrUserData), TrUserData);
        'VLANMetrics' -> encode_msg_VLANMetrics(id(Msg, TrUserData), TrUserData);
        'RADIUSMetrics' -> encode_msg_RADIUSMetrics(id(Msg, TrUserData), TrUserData);
        'NetworkProbe' -> encode_msg_NetworkProbe(id(Msg, TrUserData), TrUserData);
        'RtpFlowStats' -> encode_msg_RtpFlowStats(id(Msg, TrUserData), TrUserData);
        'CallStart' -> encode_msg_CallStart(id(Msg, TrUserData), TrUserData);
        'CallStop' -> encode_msg_CallStop(id(Msg, TrUserData), TrUserData);
        'CallReport' -> encode_msg_CallReport(id(Msg, TrUserData), TrUserData);
        'StreamingVideoDetectPattern' -> encode_msg_StreamingVideoDetectPattern(id(Msg, TrUserData), TrUserData);
        'StreamingVideoSessionStart' -> encode_msg_StreamingVideoSessionStart(id(Msg, TrUserData), TrUserData);
        'StreamingVideoServerDetected' -> encode_msg_StreamingVideoServerDetected(id(Msg, TrUserData), TrUserData);
        'StreamingVideoStop' -> encode_msg_StreamingVideoStop(id(Msg, TrUserData), TrUserData);
        'VideoVoiceReport' -> encode_msg_VideoVoiceReport(id(Msg, TrUserData), TrUserData);
        'EventReport.ClientAssocEvent' -> 'encode_msg_EventReport.ClientAssocEvent'(id(Msg, TrUserData), TrUserData);
        'EventReport.ClientAuthEvent' -> 'encode_msg_EventReport.ClientAuthEvent'(id(Msg, TrUserData), TrUserData);
        'EventReport.ClientDisconnectEvent' -> 'encode_msg_EventReport.ClientDisconnectEvent'(id(Msg, TrUserData), TrUserData);
        'EventReport.ClientConnectEvent' -> 'encode_msg_EventReport.ClientConnectEvent'(id(Msg, TrUserData), TrUserData);
        'EventReport.ClientFailureEvent' -> 'encode_msg_EventReport.ClientFailureEvent'(id(Msg, TrUserData), TrUserData);
        'EventReport.ClientFirstDataEvent' -> 'encode_msg_EventReport.ClientFirstDataEvent'(id(Msg, TrUserData), TrUserData);
        'EventReport.ClientIdEvent' -> 'encode_msg_EventReport.ClientIdEvent'(id(Msg, TrUserData), TrUserData);
        'EventReport.ClientIpEvent' -> 'encode_msg_EventReport.ClientIpEvent'(id(Msg, TrUserData), TrUserData);
        'EventReport.ClientTimeoutEvent' -> 'encode_msg_EventReport.ClientTimeoutEvent'(id(Msg, TrUserData), TrUserData);
        'EventReport.ClientSession' -> 'encode_msg_EventReport.ClientSession'(id(Msg, TrUserData), TrUserData);
        'EventReport' -> encode_msg_EventReport(id(Msg, TrUserData), TrUserData);
        'Report' -> encode_msg_Report(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_AvgType(Msg, TrUserData) -> encode_msg_AvgType(Msg, <<>>, TrUserData).


encode_msg_AvgType(#'AvgType'{avg = F1, min = F2, max = F3, num = F4}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

'encode_msg_Neighbor.NeighborBss'(Msg, TrUserData) -> 'encode_msg_Neighbor.NeighborBss'(Msg, <<>>, TrUserData).


'encode_msg_Neighbor.NeighborBss'(#'Neighbor.NeighborBss'{bssid = F1, ssid = F2, rssi = F3, tsf = F4, chan_width = F5, channel = F6, status = F7}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_enum_ChanWidth(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end,
    if F7 == undefined -> B6;
       true -> begin TrF7 = id(F7, TrUserData), e_enum_DiffType(TrF7, <<B6/binary, 56>>, TrUserData) end
    end.

encode_msg_Neighbor(Msg, TrUserData) -> encode_msg_Neighbor(Msg, <<>>, TrUserData).


encode_msg_Neighbor(#'Neighbor'{'band' = F1, scan_type = F2, timestamp_ms = F3, bss_list = F4, report_type = F5}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_RadioBandType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_enum_NeighborType(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_Neighbor_bss_list(TrF4, B3, TrUserData)
             end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_enum_ReportType(TrF5, <<B4/binary, 40>>, TrUserData) end
    end.

'encode_msg_Client.Stats'(Msg, TrUserData) -> 'encode_msg_Client.Stats'(Msg, <<>>, TrUserData).


'encode_msg_Client.Stats'(#'Client.Stats'{rx_bytes = F1, tx_bytes = F2, rx_frames = F3, tx_frames = F4, rx_retries = F5, tx_retries = F6, rx_errors = F7, tx_errors = F8, rx_rate = F9, tx_rate = F10, rssi = F11}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_type_double(TrF9, <<B8/binary, 73>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_type_double(TrF10, <<B9/binary, 81>>, TrUserData) end
          end,
    if F11 == undefined -> B10;
       true -> begin TrF11 = id(F11, TrUserData), e_varint(TrF11, <<B10/binary, 88>>, TrUserData) end
    end.

'encode_msg_Client.RxStats'(Msg, TrUserData) -> 'encode_msg_Client.RxStats'(Msg, <<>>, TrUserData).


'encode_msg_Client.RxStats'(#'Client.RxStats'{mcs = F1, nss = F2, bw = F3, bytes = F4, msdus = F5, mpdus = F6, ppdus = F7, retries = F8, errors = F9, rssi = F10, chain_rssi = F11}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_varint(TrF9, <<B8/binary, 72>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_varint(TrF10, <<B9/binary, 80>>, TrUserData) end
          end,
    begin
        TrF11 = id(F11, TrUserData),
        if TrF11 == [] -> B10;
           true -> 'e_field_Client.RxStats_chain_rssi'(TrF11, B10, TrUserData)
        end
    end.

'encode_msg_Client.RxStats.ChainRSSI'(Msg, TrUserData) -> 'encode_msg_Client.RxStats.ChainRSSI'(Msg, <<>>, TrUserData).


'encode_msg_Client.RxStats.ChainRSSI'(#'Client.RxStats.ChainRSSI'{chain = F1, ht = F2, rssi = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

'encode_msg_Client.TxStats'(Msg, TrUserData) -> 'encode_msg_Client.TxStats'(Msg, <<>>, TrUserData).


'encode_msg_Client.TxStats'(#'Client.TxStats'{mcs = F1, nss = F2, bw = F3, bytes = F4, msdus = F5, mpdus = F6, ppdus = F7, retries = F8, errors = F9}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    if F9 == undefined -> B8;
       true -> begin TrF9 = id(F9, TrUserData), e_varint(TrF9, <<B8/binary, 72>>, TrUserData) end
    end.

'encode_msg_Client.TidStats'(Msg, TrUserData) -> 'encode_msg_Client.TidStats'(Msg, <<>>, TrUserData).


'encode_msg_Client.TidStats'(#'Client.TidStats'{sojourn = F1, offset_ms = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> 'e_field_Client.TidStats_sojourn'(TrF1, Bin, TrUserData)
             end
         end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 40>>, TrUserData) end
    end.

'encode_msg_Client.TidStats.Sojourn'(Msg, TrUserData) -> 'encode_msg_Client.TidStats.Sojourn'(Msg, <<>>, TrUserData).


'encode_msg_Client.TidStats.Sojourn'(#'Client.TidStats.Sojourn'{ac = F1, tid = F2, ewma_time_ms = F3, sum_time_ms = F4, num_msdus = F5}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_WmmAc(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
    end.

encode_msg_Client(Msg, TrUserData) -> encode_msg_Client(Msg, <<>>, TrUserData).


encode_msg_Client(#'Client'{mac_address = F1, ssid = F2, connected = F3, connect_count = F4, disconnect_count = F5, connect_offset_ms = F6, disconnect_offset_ms = F7, duration_ms = F8, stats = F9, rx_stats = F10, tx_stats = F11, tid_stats = F12,
                            uapsd = F13},
                  Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_mfield_Client_stats(TrF9, <<B8/binary, 74>>, TrUserData) end
         end,
    B10 = begin
              TrF10 = id(F10, TrUserData),
              if TrF10 == [] -> B9;
                 true -> e_field_Client_rx_stats(TrF10, B9, TrUserData)
              end
          end,
    B11 = begin
              TrF11 = id(F11, TrUserData),
              if TrF11 == [] -> B10;
                 true -> e_field_Client_tx_stats(TrF11, B10, TrUserData)
              end
          end,
    B12 = begin
              TrF12 = id(F12, TrUserData),
              if TrF12 == [] -> B11;
                 true -> e_field_Client_tid_stats(TrF12, B11, TrUserData)
              end
          end,
    if F13 == undefined -> B12;
       true -> begin TrF13 = id(F13, TrUserData), e_varint(TrF13, <<B12/binary, 104>>, TrUserData) end
    end.

encode_msg_ClientReport(Msg, TrUserData) -> encode_msg_ClientReport(Msg, <<>>, TrUserData).


encode_msg_ClientReport(#'ClientReport'{'band' = F1, timestamp_ms = F2, client_list = F3, channel = F4}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_RadioBandType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_ClientReport_client_list(TrF3, B2, TrUserData)
             end
         end,
    begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end.

'encode_msg_Survey.SurveySample'(Msg, TrUserData) -> 'encode_msg_Survey.SurveySample'(Msg, <<>>, TrUserData).


'encode_msg_Survey.SurveySample'(#'Survey.SurveySample'{channel = F1, duration_ms = F2, total_count = F3, sample_count = F4, busy = F5, busy_tx = F6, busy_rx = F7, busy_self = F8, offset_ms = F9, busy_ext = F10, noise = F11}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_varint(TrF9, <<B8/binary, 72>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_varint(TrF10, <<B9/binary, 80>>, TrUserData) end
          end,
    if F11 == undefined -> B10;
       true -> begin TrF11 = id(F11, TrUserData), e_varint(TrF11, <<B10/binary, 88>>, TrUserData) end
    end.

'encode_msg_Survey.SurveyAvg'(Msg, TrUserData) -> 'encode_msg_Survey.SurveyAvg'(Msg, <<>>, TrUserData).


'encode_msg_Survey.SurveyAvg'(#'Survey.SurveyAvg'{channel = F1, busy = F2, busy_tx = F3, busy_rx = F4, busy_self = F5, busy_ext = F6, noise = F7}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), 'e_mfield_Survey.SurveyAvg_busy'(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), 'e_mfield_Survey.SurveyAvg_busy_tx'(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), 'e_mfield_Survey.SurveyAvg_busy_rx'(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), 'e_mfield_Survey.SurveyAvg_busy_self'(TrF5, <<B4/binary, 42>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), 'e_mfield_Survey.SurveyAvg_busy_ext'(TrF6, <<B5/binary, 50>>, TrUserData) end
         end,
    if F7 == undefined -> B6;
       true -> begin TrF7 = id(F7, TrUserData), 'e_mfield_Survey.SurveyAvg_noise'(TrF7, <<B6/binary, 58>>, TrUserData) end
    end.

encode_msg_Survey(Msg, TrUserData) -> encode_msg_Survey(Msg, <<>>, TrUserData).


encode_msg_Survey(#'Survey'{'band' = F1, survey_type = F2, timestamp_ms = F3, survey_list = F4, survey_avg = F5, report_type = F6}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_RadioBandType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_enum_SurveyType(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_Survey_survey_list(TrF4, B3, TrUserData)
             end
         end,
    B5 = begin
             TrF5 = id(F5, TrUserData),
             if TrF5 == [] -> B4;
                true -> e_field_Survey_survey_avg(TrF5, B4, TrUserData)
             end
         end,
    if F6 == undefined -> B5;
       true -> begin TrF6 = id(F6, TrUserData), e_enum_ReportType(TrF6, <<B5/binary, 48>>, TrUserData) end
    end.

'encode_msg_Capacity.QueueSample'(Msg, TrUserData) -> 'encode_msg_Capacity.QueueSample'(Msg, <<>>, TrUserData).


'encode_msg_Capacity.QueueSample'(#'Capacity.QueueSample'{busy_tx = F1, bytes_tx = F2, sample_count = F3, 'Vo_count' = F4, 'Vi_count' = F5, 'Be_count' = F6, 'Bk_count' = F7, 'Bcn_count' = F8, 'Cab_count' = F9, offset_ms = F10}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_varint(TrF9, <<B8/binary, 72>>, TrUserData) end
         end,
    if F10 == undefined -> B9;
       true -> begin TrF10 = id(F10, TrUserData), e_varint(TrF10, <<B9/binary, 80>>, TrUserData) end
    end.

encode_msg_Capacity(Msg, TrUserData) -> encode_msg_Capacity(Msg, <<>>, TrUserData).


encode_msg_Capacity(#'Capacity'{'band' = F1, timestamp_ms = F2, queue_list = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_RadioBandType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_Capacity_queue_list(TrF3, B2, TrUserData)
        end
    end.

'encode_msg_Device.LoadAvg'(Msg, TrUserData) -> 'encode_msg_Device.LoadAvg'(Msg, <<>>, TrUserData).


'encode_msg_Device.LoadAvg'(#'Device.LoadAvg'{one = F1, five = F2, fifteen = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_double(TrF2, <<B1/binary, 17>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_double(TrF3, <<B2/binary, 25>>, TrUserData) end
    end.

'encode_msg_Device.RadioTemp'(Msg, TrUserData) -> 'encode_msg_Device.RadioTemp'(Msg, <<>>, TrUserData).


'encode_msg_Device.RadioTemp'(#'Device.RadioTemp'{'band' = F1, value = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_enum_RadioBandType(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData) end
    end.

'encode_msg_Device.Thermal'(Msg, TrUserData) -> 'encode_msg_Device.Thermal'(Msg, <<>>, TrUserData).


'encode_msg_Device.Thermal'(#'Device.Thermal'{txchainmask = F1, fan_rpm = F2, timestamp_ms = F3}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> 'e_field_Device.Thermal_txchainmask'(TrF1, Bin, TrUserData)
             end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

'encode_msg_Device.Thermal.RadioTxChainMask'(Msg, TrUserData) -> 'encode_msg_Device.Thermal.RadioTxChainMask'(Msg, <<>>, TrUserData).


'encode_msg_Device.Thermal.RadioTxChainMask'(#'Device.Thermal.RadioTxChainMask'{'band' = F1, value = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_enum_RadioBandType(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
    end.

'encode_msg_Device.MemUtil'(Msg, TrUserData) -> 'encode_msg_Device.MemUtil'(Msg, <<>>, TrUserData).


'encode_msg_Device.MemUtil'(#'Device.MemUtil'{mem_total = F1, mem_used = F2, swap_total = F3, swap_used = F4}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

'encode_msg_Device.FsUtil'(Msg, TrUserData) -> 'encode_msg_Device.FsUtil'(Msg, <<>>, TrUserData).


'encode_msg_Device.FsUtil'(#'Device.FsUtil'{fs_type = F1, fs_total = F2, fs_used = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_FsType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end,
    begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end.

'encode_msg_Device.CpuUtil'(Msg, TrUserData) -> 'encode_msg_Device.CpuUtil'(Msg, <<>>, TrUserData).


'encode_msg_Device.CpuUtil'(#'Device.CpuUtil'{cpu_util = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
    end.

'encode_msg_Device.PerProcessUtil'(Msg, TrUserData) -> 'encode_msg_Device.PerProcessUtil'(Msg, <<>>, TrUserData).


'encode_msg_Device.PerProcessUtil'(#'Device.PerProcessUtil'{pid = F1, cmd = F2, util = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end,
    begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end.

encode_msg_Device(Msg, TrUserData) -> encode_msg_Device(Msg, <<>>, TrUserData).


encode_msg_Device(#'Device'{load = F1, radio_temp = F2, timestamp_ms = F3, uptime = F4, thermal_stats = F5, mem_util = F6, fs_util = F7, cpuUtil = F8, ps_cpu_util = F9, ps_mem_util = F10}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_mfield_Device_load(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true -> e_field_Device_radio_temp(TrF2, B1, TrUserData)
             end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = begin
             TrF5 = id(F5, TrUserData),
             if TrF5 == [] -> B4;
                true -> e_field_Device_thermal_stats(TrF5, B4, TrUserData)
             end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_mfield_Device_mem_util(TrF6, <<B5/binary, 50>>, TrUserData) end
         end,
    B7 = begin
             TrF7 = id(F7, TrUserData),
             if TrF7 == [] -> B6;
                true -> e_field_Device_fs_util(TrF7, B6, TrUserData)
             end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_mfield_Device_cpuUtil(TrF8, <<B7/binary, 66>>, TrUserData) end
         end,
    B9 = begin
             TrF9 = id(F9, TrUserData),
             if TrF9 == [] -> B8;
                true -> e_field_Device_ps_cpu_util(TrF9, B8, TrUserData)
             end
         end,
    begin
        TrF10 = id(F10, TrUserData),
        if TrF10 == [] -> B9;
           true -> e_field_Device_ps_mem_util(TrF10, B9, TrUserData)
        end
    end.

'encode_msg_BSClient.BSEvent'(Msg, TrUserData) -> 'encode_msg_BSClient.BSEvent'(Msg, <<>>, TrUserData).


'encode_msg_BSClient.BSEvent'(#'BSClient.BSEvent'{type = F1, offset_ms = F2, rssi = F3, probe_bcast = F4, probe_blocked = F5, disconnect_src = F6, disconnect_type = F7, disconnect_reason = F8, backoff_enabled = F9, active = F10, rejected = F11,
                                                  is_BTM_supported = F12, is_RRM_supported = F13, max_chwidth = F14, max_streams = F15, phy_mode = F16, max_mcs = F17, max_txpower = F18, is_static_smps = F19, is_mu_mimo_supported = F20, band_cap_2G = F21, band_cap_5G = F22, rrm_caps_link_meas = F23,
                                                  rrm_caps_neigh_rpt = F24, rrm_caps_bcn_rpt_passive = F25, rrm_caps_bcn_rpt_active = F26, rrm_caps_bcn_rpt_table = F27, rrm_caps_lci_meas = F28, rrm_caps_ftm_range_rpt = F29, backoff_period = F30, assoc_ies = F31},
                              Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_BSEventType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_enum_DisconnectSrc(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_enum_DisconnectType(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_type_bool(TrF9, <<B8/binary, 72>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_type_bool(TrF10, <<B9/binary, 80>>, TrUserData) end
          end,
    B11 = if F11 == undefined -> B10;
             true -> begin TrF11 = id(F11, TrUserData), e_type_bool(TrF11, <<B10/binary, 88>>, TrUserData) end
          end,
    B12 = if F12 == undefined -> B11;
             true -> begin TrF12 = id(F12, TrUserData), e_type_bool(TrF12, <<B11/binary, 96>>, TrUserData) end
          end,
    B13 = if F13 == undefined -> B12;
             true -> begin TrF13 = id(F13, TrUserData), e_type_bool(TrF13, <<B12/binary, 104>>, TrUserData) end
          end,
    B14 = if F14 == undefined -> B13;
             true -> begin TrF14 = id(F14, TrUserData), e_varint(TrF14, <<B13/binary, 112>>, TrUserData) end
          end,
    B15 = if F15 == undefined -> B14;
             true -> begin TrF15 = id(F15, TrUserData), e_varint(TrF15, <<B14/binary, 120>>, TrUserData) end
          end,
    B16 = if F16 == undefined -> B15;
             true -> begin TrF16 = id(F16, TrUserData), e_varint(TrF16, <<B15/binary, 128, 1>>, TrUserData) end
          end,
    B17 = if F17 == undefined -> B16;
             true -> begin TrF17 = id(F17, TrUserData), e_varint(TrF17, <<B16/binary, 136, 1>>, TrUserData) end
          end,
    B18 = if F18 == undefined -> B17;
             true -> begin TrF18 = id(F18, TrUserData), e_varint(TrF18, <<B17/binary, 144, 1>>, TrUserData) end
          end,
    B19 = if F19 == undefined -> B18;
             true -> begin TrF19 = id(F19, TrUserData), e_type_bool(TrF19, <<B18/binary, 152, 1>>, TrUserData) end
          end,
    B20 = if F20 == undefined -> B19;
             true -> begin TrF20 = id(F20, TrUserData), e_type_bool(TrF20, <<B19/binary, 160, 1>>, TrUserData) end
          end,
    B21 = if F21 == undefined -> B20;
             true -> begin TrF21 = id(F21, TrUserData), e_type_bool(TrF21, <<B20/binary, 168, 1>>, TrUserData) end
          end,
    B22 = if F22 == undefined -> B21;
             true -> begin TrF22 = id(F22, TrUserData), e_type_bool(TrF22, <<B21/binary, 176, 1>>, TrUserData) end
          end,
    B23 = if F23 == undefined -> B22;
             true -> begin TrF23 = id(F23, TrUserData), e_type_bool(TrF23, <<B22/binary, 184, 1>>, TrUserData) end
          end,
    B24 = if F24 == undefined -> B23;
             true -> begin TrF24 = id(F24, TrUserData), e_type_bool(TrF24, <<B23/binary, 192, 1>>, TrUserData) end
          end,
    B25 = if F25 == undefined -> B24;
             true -> begin TrF25 = id(F25, TrUserData), e_type_bool(TrF25, <<B24/binary, 200, 1>>, TrUserData) end
          end,
    B26 = if F26 == undefined -> B25;
             true -> begin TrF26 = id(F26, TrUserData), e_type_bool(TrF26, <<B25/binary, 208, 1>>, TrUserData) end
          end,
    B27 = if F27 == undefined -> B26;
             true -> begin TrF27 = id(F27, TrUserData), e_type_bool(TrF27, <<B26/binary, 216, 1>>, TrUserData) end
          end,
    B28 = if F28 == undefined -> B27;
             true -> begin TrF28 = id(F28, TrUserData), e_type_bool(TrF28, <<B27/binary, 224, 1>>, TrUserData) end
          end,
    B29 = if F29 == undefined -> B28;
             true -> begin TrF29 = id(F29, TrUserData), e_type_bool(TrF29, <<B28/binary, 232, 1>>, TrUserData) end
          end,
    B30 = if F30 == undefined -> B29;
             true -> begin TrF30 = id(F30, TrUserData), e_varint(TrF30, <<B29/binary, 240, 1>>, TrUserData) end
          end,
    if F31 == undefined -> B30;
       true -> begin TrF31 = id(F31, TrUserData), e_type_bytes(TrF31, <<B30/binary, 250, 1>>, TrUserData) end
    end.

'encode_msg_BSClient.BSBandReport'(Msg, TrUserData) -> 'encode_msg_BSClient.BSBandReport'(Msg, <<>>, TrUserData).


'encode_msg_BSClient.BSBandReport'(#'BSClient.BSBandReport'{'band' = F1, connected = F2, rejects = F3, connects = F4, disconnects = F5, activity_changes = F6, steering_success_cnt = F7, steering_fail_cnt = F8, steering_kick_cnt = F9,
                                                            sticky_kick_cnt = F10, probe_bcast_cnt = F11, probe_bcast_blocked = F12, probe_direct_cnt = F13, probe_direct_blocked = F14, event_list = F15, ifname = F16},
                                   Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_RadioBandType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_varint(TrF9, <<B8/binary, 72>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_varint(TrF10, <<B9/binary, 80>>, TrUserData) end
          end,
    B11 = if F11 == undefined -> B10;
             true -> begin TrF11 = id(F11, TrUserData), e_varint(TrF11, <<B10/binary, 88>>, TrUserData) end
          end,
    B12 = if F12 == undefined -> B11;
             true -> begin TrF12 = id(F12, TrUserData), e_varint(TrF12, <<B11/binary, 96>>, TrUserData) end
          end,
    B13 = if F13 == undefined -> B12;
             true -> begin TrF13 = id(F13, TrUserData), e_varint(TrF13, <<B12/binary, 104>>, TrUserData) end
          end,
    B14 = if F14 == undefined -> B13;
             true -> begin TrF14 = id(F14, TrUserData), e_varint(TrF14, <<B13/binary, 112>>, TrUserData) end
          end,
    B15 = begin
              TrF15 = id(F15, TrUserData),
              if TrF15 == [] -> B14;
                 true -> 'e_field_BSClient.BSBandReport_event_list'(TrF15, B14, TrUserData)
              end
          end,
    if F16 == undefined -> B15;
       true -> begin TrF16 = id(F16, TrUserData), e_type_string(TrF16, <<B15/binary, 130, 1>>, TrUserData) end
    end.

encode_msg_BSClient(Msg, TrUserData) -> encode_msg_BSClient(Msg, <<>>, TrUserData).


encode_msg_BSClient(#'BSClient'{mac_address = F1, bs_band_report = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_BSClient_bs_band_report(TrF2, B1, TrUserData)
        end
    end.

encode_msg_BSReport(Msg, TrUserData) -> encode_msg_BSReport(Msg, <<>>, TrUserData).


encode_msg_BSReport(#'BSReport'{timestamp_ms = F1, clients = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_BSReport_clients(TrF2, B1, TrUserData)
        end
    end.

'encode_msg_RssiPeer.RssiSample'(Msg, TrUserData) -> 'encode_msg_RssiPeer.RssiSample'(Msg, <<>>, TrUserData).


'encode_msg_RssiPeer.RssiSample'(#'RssiPeer.RssiSample'{rssi = F1, offset_ms = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
    end.

encode_msg_RssiPeer(Msg, TrUserData) -> encode_msg_RssiPeer(Msg, <<>>, TrUserData).


encode_msg_RssiPeer(#'RssiPeer'{mac_address = F1, rssi_source = F2, rssi_list = F3, rssi_avg = F4, rx_ppdus = F5, tx_ppdus = F6}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), 'e_enum_RssiPeer.RssiSource'(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_RssiPeer_rssi_list(TrF3, B2, TrUserData)
             end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_mfield_RssiPeer_rssi_avg(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    if F6 == undefined -> B5;
       true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
    end.

encode_msg_RssiReport(Msg, TrUserData) -> encode_msg_RssiReport(Msg, <<>>, TrUserData).


encode_msg_RssiReport(#'RssiReport'{'band' = F1, report_type = F2, timestamp_ms = F3, peer_list = F4}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_RadioBandType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_enum_ReportType(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    begin
        TrF4 = id(F4, TrUserData),
        if TrF4 == [] -> B3;
           true -> e_field_RssiReport_peer_list(TrF4, B3, TrUserData)
        end
    end.

encode_msg_DNSProbeMetric(Msg, TrUserData) -> encode_msg_DNSProbeMetric(Msg, <<>>, TrUserData).


encode_msg_DNSProbeMetric(#'DNSProbeMetric'{serverIP = F1, state = F2, latency = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_enum_StateUpDown(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

encode_msg_VLANMetrics(Msg, TrUserData) -> encode_msg_VLANMetrics(Msg, <<>>, TrUserData).


encode_msg_VLANMetrics(#'VLANMetrics'{vlanIF = F1, dhcpState = F2, latency = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_enum_StateUpDown(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

encode_msg_RADIUSMetrics(Msg, TrUserData) -> encode_msg_RADIUSMetrics(Msg, <<>>, TrUserData).


encode_msg_RADIUSMetrics(#'RADIUSMetrics'{serverIP = F1, radiusState = F2, latency = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_enum_StateUpDown(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

encode_msg_NetworkProbe(Msg, TrUserData) -> encode_msg_NetworkProbe(Msg, <<>>, TrUserData).


encode_msg_NetworkProbe(#'NetworkProbe'{dns_probe = F1, vlan_probe = F2, radius_probe = F3, timestamp_ms = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_mfield_NetworkProbe_dns_probe(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_mfield_NetworkProbe_vlan_probe(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_NetworkProbe_radius_probe(TrF3, B2, TrUserData)
             end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

encode_msg_RtpFlowStats(Msg, TrUserData) -> encode_msg_RtpFlowStats(Msg, <<>>, TrUserData).


encode_msg_RtpFlowStats(#'RtpFlowStats'{direction = F1, rtp_flow_type = F2, latency = F3, jitter = F4, packet_loss_percent = F5, packet_loss_consec = F6, codec = F7, mosx_100 = F8, block_codecs = F9, total_packets_sent = F10,
                                        total_packets_lost = F11, rtp_seq_first = F12, rtp_seq_last = F13, stats_idx = F14},
                        Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), 'e_enum_RtpFlowStats.RtpFlowDirection'(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), 'e_enum_RtpFlowStats.RtpFlowType'(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_type_bytes(TrF9, <<B8/binary, 74>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_varint(TrF10, <<B9/binary, 80>>, TrUserData) end
          end,
    B11 = if F11 == undefined -> B10;
             true -> begin TrF11 = id(F11, TrUserData), e_varint(TrF11, <<B10/binary, 88>>, TrUserData) end
          end,
    B12 = if F12 == undefined -> B11;
             true -> begin TrF12 = id(F12, TrUserData), e_varint(TrF12, <<B11/binary, 96>>, TrUserData) end
          end,
    B13 = if F13 == undefined -> B12;
             true -> begin TrF13 = id(F13, TrUserData), e_varint(TrF13, <<B12/binary, 104>>, TrUserData) end
          end,
    if F14 == undefined -> B13;
       true -> begin TrF14 = id(F14, TrUserData), e_varint(TrF14, <<B13/binary, 112>>, TrUserData) end
    end.

encode_msg_CallStart(Msg, TrUserData) -> encode_msg_CallStart(Msg, <<>>, TrUserData).


encode_msg_CallStart(#'CallStart'{session_id = F1, wifi_session_id = F2, client_mac = F3, codecs = F4, provider_domain = F5, device_info = F6, channel = F7, 'band' = F8}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_CallStart_codecs(TrF4, B3, TrUserData)
             end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_type_string(TrF6, <<B5/binary, 50>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    begin TrF8 = id(F8, TrUserData), e_enum_RadioBandType(TrF8, <<B7/binary, 64>>, TrUserData) end.

encode_msg_CallStop(Msg, TrUserData) -> encode_msg_CallStop(Msg, <<>>, TrUserData).


encode_msg_CallStop(#'CallStop'{session_id = F1, wifi_session_id = F2, client_mac = F3, reason = F4, call_duration = F5, stats = F6, channel = F7, 'band' = F8, codecs = F9, provider_domain = F10}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), 'e_enum_CallStop.CallStopReason'(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = begin
             TrF6 = id(F6, TrUserData),
             if TrF6 == [] -> B5;
                true -> e_field_CallStop_stats(TrF6, B5, TrUserData)
             end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = begin TrF8 = id(F8, TrUserData), e_enum_RadioBandType(TrF8, <<B7/binary, 64>>, TrUserData) end,
    B9 = begin
             TrF9 = id(F9, TrUserData),
             if TrF9 == [] -> B8;
                true -> e_field_CallStop_codecs(TrF9, B8, TrUserData)
             end
         end,
    if F10 == undefined -> B9;
       true -> begin TrF10 = id(F10, TrUserData), e_type_string(TrF10, <<B9/binary, 82>>, TrUserData) end
    end.

encode_msg_CallReport(Msg, TrUserData) -> encode_msg_CallReport(Msg, <<>>, TrUserData).


encode_msg_CallReport(#'CallReport'{session_id = F1, wifi_session_id = F2, client_mac = F3, stats = F4, reason = F5, channel = F6, 'band' = F7, codecs = F8, provider_domain = F9}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_CallReport_stats(TrF4, B3, TrUserData)
             end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), 'e_enum_CallReport.CallReportReason'(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = begin TrF7 = id(F7, TrUserData), e_enum_RadioBandType(TrF7, <<B6/binary, 56>>, TrUserData) end,
    B8 = begin
             TrF8 = id(F8, TrUserData),
             if TrF8 == [] -> B7;
                true -> e_field_CallReport_codecs(TrF8, B7, TrUserData)
             end
         end,
    if F9 == undefined -> B8;
       true -> begin TrF9 = id(F9, TrUserData), e_type_string(TrF9, <<B8/binary, 74>>, TrUserData) end
    end.

encode_msg_StreamingVideoDetectPattern(Msg, TrUserData) -> encode_msg_StreamingVideoDetectPattern(Msg, <<>>, TrUserData).


encode_msg_StreamingVideoDetectPattern(#'StreamingVideoDetectPattern'{dns_lookup_pattern = F1, video_type = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_enum_StreamingVideoType(TrF2, <<B1/binary, 16>>, TrUserData) end
    end.

encode_msg_StreamingVideoSessionStart(Msg, TrUserData) -> encode_msg_StreamingVideoSessionStart(Msg, <<>>, TrUserData).


encode_msg_StreamingVideoSessionStart(#'StreamingVideoSessionStart'{video_session_id = F1, session_id = F2, client_mac = F3, server_ip = F4, streaming_video_type = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_enum_StreamingVideoType(TrF5, <<B4/binary, 40>>, TrUserData) end
    end.

encode_msg_StreamingVideoServerDetected(Msg, TrUserData) -> encode_msg_StreamingVideoServerDetected(Msg, <<>>, TrUserData).


encode_msg_StreamingVideoServerDetected(#'StreamingVideoServerDetected'{video_session_id = F1, session_id = F2, client_mac = F3, server_ip = F4, server_dns_name = F5, streaming_video_type = F6}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end
         end,
    if F6 == undefined -> B5;
       true -> begin TrF6 = id(F6, TrUserData), e_enum_StreamingVideoType(TrF6, <<B5/binary, 48>>, TrUserData) end
    end.

encode_msg_StreamingVideoStop(Msg, TrUserData) -> encode_msg_StreamingVideoStop(Msg, <<>>, TrUserData).


encode_msg_StreamingVideoStop(#'StreamingVideoStop'{video_session_id = F1, session_id = F2, client_mac = F3, server_ip = F4, total_bytes = F5, streaming_video_type = F6, duration_sec = F7}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_enum_StreamingVideoType(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    if F7 == undefined -> B6;
       true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
    end.

encode_msg_VideoVoiceReport(Msg, TrUserData) -> encode_msg_VideoVoiceReport(Msg, <<>>, TrUserData).


encode_msg_VideoVoiceReport(#'VideoVoiceReport'{call_start = F1, call_stop = F2, call_report = F3, stream_video_stop = F4, stream_video_server = F5, stream_video_session_start = F6, timestamp_ms = F7}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_mfield_VideoVoiceReport_call_start(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_mfield_VideoVoiceReport_call_stop(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_mfield_VideoVoiceReport_call_report(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_mfield_VideoVoiceReport_stream_video_stop(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_mfield_VideoVoiceReport_stream_video_server(TrF5, <<B4/binary, 42>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_mfield_VideoVoiceReport_stream_video_session_start(TrF6, <<B5/binary, 50>>, TrUserData) end
         end,
    if F7 == undefined -> B6;
       true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
    end.

'encode_msg_EventReport.ClientAssocEvent'(Msg, TrUserData) -> 'encode_msg_EventReport.ClientAssocEvent'(Msg, <<>>, TrUserData).


'encode_msg_EventReport.ClientAssocEvent'(#'EventReport.ClientAssocEvent'{sta_mac = F1, session_id = F2, ssid = F3, 'band' = F4, assoc_type = F5, status = F6, rssi = F7, internal_sc = F8, using11k = F9, using11r = F10, using11v = F11}, Bin,
                                          TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_enum_RadioBandType(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_enum_AssocType(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_type_bool(TrF9, <<B8/binary, 72>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_type_bool(TrF10, <<B9/binary, 80>>, TrUserData) end
          end,
    if F11 == undefined -> B10;
       true -> begin TrF11 = id(F11, TrUserData), e_type_bool(TrF11, <<B10/binary, 88>>, TrUserData) end
    end.

'encode_msg_EventReport.ClientAuthEvent'(Msg, TrUserData) -> 'encode_msg_EventReport.ClientAuthEvent'(Msg, <<>>, TrUserData).


'encode_msg_EventReport.ClientAuthEvent'(#'EventReport.ClientAuthEvent'{sta_mac = F1, session_id = F2, ssid = F3, 'band' = F4, auth_status = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_enum_RadioBandType(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
    end.

'encode_msg_EventReport.ClientDisconnectEvent'(Msg, TrUserData) -> 'encode_msg_EventReport.ClientDisconnectEvent'(Msg, <<>>, TrUserData).


'encode_msg_EventReport.ClientDisconnectEvent'(#'EventReport.ClientDisconnectEvent'{sta_mac = F1, session_id = F2, reason = F3, dev_type = F4, fr_type = F5, lsent_up_ts_in_us = F6, lrcv_up_ts_in_us = F7, internal_rc = F8, rssi = F9, ssid = F10,
                                                                                    'band' = F11},
                                               Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_enum_DeviceType(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_enum_FrameType(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_varint(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_type_string(TrF10, <<B9/binary, 82>>, TrUserData) end
          end,
    if F11 == undefined -> B10;
       true -> begin TrF11 = id(F11, TrUserData), e_enum_RadioBandType(TrF11, <<B10/binary, 88>>, TrUserData) end
    end.

'encode_msg_EventReport.ClientConnectEvent'(Msg, TrUserData) -> 'encode_msg_EventReport.ClientConnectEvent'(Msg, <<>>, TrUserData).


'encode_msg_EventReport.ClientConnectEvent'(#'EventReport.ClientConnectEvent'{sta_mac = F1, session_id = F2, 'band' = F3, assoc_type = F4, ssid = F5, sec_type = F6, fbt_used = F7, ip_addr = F8, clt_id = F9, ev_time_bootup_in_us_auth = F10,
                                                                              ev_time_bootup_in_us_assoc = F11, ev_time_bootup_in_us_eapol = F12, ev_time_bootup_in_us_port_enable = F13, ev_time_bootup_in_us_first_rx = F14, ev_time_bootup_in_us_first_tx = F15, using11k = F16, using11r = F17,
                                                                              using11v = F18, ev_time_bootup_in_us_ip = F19, assoc_rssi = F20},
                                            Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_enum_RadioBandType(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_enum_AssocType(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_enum_SecurityType(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_type_bytes(TrF8, <<B7/binary, 66>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_type_string(TrF9, <<B8/binary, 74>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_type_int64(TrF10, <<B9/binary, 80>>, TrUserData) end
          end,
    B11 = if F11 == undefined -> B10;
             true -> begin TrF11 = id(F11, TrUserData), e_type_int64(TrF11, <<B10/binary, 88>>, TrUserData) end
          end,
    B12 = if F12 == undefined -> B11;
             true -> begin TrF12 = id(F12, TrUserData), e_type_int64(TrF12, <<B11/binary, 96>>, TrUserData) end
          end,
    B13 = if F13 == undefined -> B12;
             true -> begin TrF13 = id(F13, TrUserData), e_type_int64(TrF13, <<B12/binary, 104>>, TrUserData) end
          end,
    B14 = if F14 == undefined -> B13;
             true -> begin TrF14 = id(F14, TrUserData), e_type_int64(TrF14, <<B13/binary, 112>>, TrUserData) end
          end,
    B15 = if F15 == undefined -> B14;
             true -> begin TrF15 = id(F15, TrUserData), e_type_int64(TrF15, <<B14/binary, 120>>, TrUserData) end
          end,
    B16 = if F16 == undefined -> B15;
             true -> begin TrF16 = id(F16, TrUserData), e_type_bool(TrF16, <<B15/binary, 128, 1>>, TrUserData) end
          end,
    B17 = if F17 == undefined -> B16;
             true -> begin TrF17 = id(F17, TrUserData), e_type_bool(TrF17, <<B16/binary, 136, 1>>, TrUserData) end
          end,
    B18 = if F18 == undefined -> B17;
             true -> begin TrF18 = id(F18, TrUserData), e_type_bool(TrF18, <<B17/binary, 144, 1>>, TrUserData) end
          end,
    B19 = if F19 == undefined -> B18;
             true -> begin TrF19 = id(F19, TrUserData), e_type_int64(TrF19, <<B18/binary, 152, 1>>, TrUserData) end
          end,
    if F20 == undefined -> B19;
       true -> begin TrF20 = id(F20, TrUserData), e_type_int32(TrF20, <<B19/binary, 160, 1>>, TrUserData) end
    end.

'encode_msg_EventReport.ClientFailureEvent'(Msg, TrUserData) -> 'encode_msg_EventReport.ClientFailureEvent'(Msg, <<>>, TrUserData).


'encode_msg_EventReport.ClientFailureEvent'(#'EventReport.ClientFailureEvent'{sta_mac = F1, session_id = F2, ssid = F3, reason_code = F4, reason_str = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end
    end.

'encode_msg_EventReport.ClientFirstDataEvent'(Msg, TrUserData) -> 'encode_msg_EventReport.ClientFirstDataEvent'(Msg, <<>>, TrUserData).


'encode_msg_EventReport.ClientFirstDataEvent'(#'EventReport.ClientFirstDataEvent'{sta_mac = F1, session_id = F2, fdata_tx_up_ts_in_us = F3, fdata_rx_up_ts_in_us = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

'encode_msg_EventReport.ClientIdEvent'(Msg, TrUserData) -> 'encode_msg_EventReport.ClientIdEvent'(Msg, <<>>, TrUserData).


'encode_msg_EventReport.ClientIdEvent'(#'EventReport.ClientIdEvent'{clt_mac = F1, session_id = F2, clt_id = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
    end.

'encode_msg_EventReport.ClientIpEvent'(Msg, TrUserData) -> 'encode_msg_EventReport.ClientIpEvent'(Msg, <<>>, TrUserData).


'encode_msg_EventReport.ClientIpEvent'(#'EventReport.ClientIpEvent'{sta_mac = F1, session_id = F2, ip_addr = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end
    end.

'encode_msg_EventReport.ClientTimeoutEvent'(Msg, TrUserData) -> 'encode_msg_EventReport.ClientTimeoutEvent'(Msg, <<>>, TrUserData).


'encode_msg_EventReport.ClientTimeoutEvent'(#'EventReport.ClientTimeoutEvent'{sta_mac = F1, session_id = F2, r_code = F3, last_sent_up_ts_in_us = F4, last_rcv_up_ts_in_us = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_enum_CTReasonType(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
    end.

'encode_msg_EventReport.ClientSession'(Msg, TrUserData) -> 'encode_msg_EventReport.ClientSession'(Msg, <<>>, TrUserData).


'encode_msg_EventReport.ClientSession'(#'EventReport.ClientSession'{session_id = F1, client_assoc_event = F2, client_auth_event = F3, client_disconnect_event = F4, client_failure_event = F5, client_first_data_event = F6, client_id_event = F7,
                                                                    client_ip_event = F8, client_timeout_event = F9, client_connect_event = F10},
                                       Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true -> 'e_field_EventReport.ClientSession_client_assoc_event'(TrF2, B1, TrUserData)
             end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> 'e_field_EventReport.ClientSession_client_auth_event'(TrF3, B2, TrUserData)
             end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> 'e_field_EventReport.ClientSession_client_disconnect_event'(TrF4, B3, TrUserData)
             end
         end,
    B5 = begin
             TrF5 = id(F5, TrUserData),
             if TrF5 == [] -> B4;
                true -> 'e_field_EventReport.ClientSession_client_failure_event'(TrF5, B4, TrUserData)
             end
         end,
    B6 = begin
             TrF6 = id(F6, TrUserData),
             if TrF6 == [] -> B5;
                true -> 'e_field_EventReport.ClientSession_client_first_data_event'(TrF6, B5, TrUserData)
             end
         end,
    B7 = begin
             TrF7 = id(F7, TrUserData),
             if TrF7 == [] -> B6;
                true -> 'e_field_EventReport.ClientSession_client_id_event'(TrF7, B6, TrUserData)
             end
         end,
    B8 = begin
             TrF8 = id(F8, TrUserData),
             if TrF8 == [] -> B7;
                true -> 'e_field_EventReport.ClientSession_client_ip_event'(TrF8, B7, TrUserData)
             end
         end,
    B9 = begin
             TrF9 = id(F9, TrUserData),
             if TrF9 == [] -> B8;
                true -> 'e_field_EventReport.ClientSession_client_timeout_event'(TrF9, B8, TrUserData)
             end
         end,
    begin
        TrF10 = id(F10, TrUserData),
        if TrF10 == [] -> B9;
           true -> 'e_field_EventReport.ClientSession_client_connect_event'(TrF10, B9, TrUserData)
        end
    end.

encode_msg_EventReport(Msg, TrUserData) -> encode_msg_EventReport(Msg, <<>>, TrUserData).


encode_msg_EventReport(#'EventReport'{client_session = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_EventReport_client_session(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_Report(Msg, TrUserData) -> encode_msg_Report(Msg, <<>>, TrUserData).


encode_msg_Report(#'Report'{nodeID = F1, survey = F2, capacity = F3, neighbors = F4, clients = F5, device = F6, bs_report = F7, rssi_report = F8, video_voice_report = F9, network_probe = F10, event_report = F11}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true -> e_field_Report_survey(TrF2, B1, TrUserData)
             end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_Report_capacity(TrF3, B2, TrUserData)
             end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_Report_neighbors(TrF4, B3, TrUserData)
             end
         end,
    B5 = begin
             TrF5 = id(F5, TrUserData),
             if TrF5 == [] -> B4;
                true -> e_field_Report_clients(TrF5, B4, TrUserData)
             end
         end,
    B6 = begin
             TrF6 = id(F6, TrUserData),
             if TrF6 == [] -> B5;
                true -> e_field_Report_device(TrF6, B5, TrUserData)
             end
         end,
    B7 = begin
             TrF7 = id(F7, TrUserData),
             if TrF7 == [] -> B6;
                true -> e_field_Report_bs_report(TrF7, B6, TrUserData)
             end
         end,
    B8 = begin
             TrF8 = id(F8, TrUserData),
             if TrF8 == [] -> B7;
                true -> e_field_Report_rssi_report(TrF8, B7, TrUserData)
             end
         end,
    B9 = begin
             TrF9 = id(F9, TrUserData),
             if TrF9 == [] -> B8;
                true -> e_field_Report_video_voice_report(TrF9, B8, TrUserData)
             end
         end,
    B10 = begin
              TrF10 = id(F10, TrUserData),
              if TrF10 == [] -> B9;
                 true -> e_field_Report_network_probe(TrF10, B9, TrUserData)
              end
          end,
    begin
        TrF11 = id(F11, TrUserData),
        if TrF11 == [] -> B10;
           true -> e_field_Report_event_report(TrF11, B10, TrUserData)
        end
    end.

e_mfield_Neighbor_bss_list(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Neighbor.NeighborBss'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Neighbor_bss_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_Neighbor_bss_list(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Neighbor_bss_list(Rest, Bin3, TrUserData);
e_field_Neighbor_bss_list([], Bin, _TrUserData) -> Bin.

'e_mfield_Client.RxStats_chain_rssi'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Client.RxStats.ChainRSSI'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Client.RxStats_chain_rssi'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = 'e_mfield_Client.RxStats_chain_rssi'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_Client.RxStats_chain_rssi'(Rest, Bin3, TrUserData);
'e_field_Client.RxStats_chain_rssi'([], Bin, _TrUserData) -> Bin.

'e_mfield_Client.TidStats_sojourn'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Client.TidStats.Sojourn'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Client.TidStats_sojourn'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = 'e_mfield_Client.TidStats_sojourn'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_Client.TidStats_sojourn'(Rest, Bin3, TrUserData);
'e_field_Client.TidStats_sojourn'([], Bin, _TrUserData) -> Bin.

e_mfield_Client_stats(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Client.Stats'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Client_rx_stats(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Client.RxStats'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Client_rx_stats([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_mfield_Client_rx_stats(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Client_rx_stats(Rest, Bin3, TrUserData);
e_field_Client_rx_stats([], Bin, _TrUserData) -> Bin.

e_mfield_Client_tx_stats(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Client.TxStats'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Client_tx_stats([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = e_mfield_Client_tx_stats(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Client_tx_stats(Rest, Bin3, TrUserData);
e_field_Client_tx_stats([], Bin, _TrUserData) -> Bin.

e_mfield_Client_tid_stats(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Client.TidStats'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Client_tid_stats([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 98>>,
    Bin3 = e_mfield_Client_tid_stats(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Client_tid_stats(Rest, Bin3, TrUserData);
e_field_Client_tid_stats([], Bin, _TrUserData) -> Bin.

e_mfield_ClientReport_client_list(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Client(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ClientReport_client_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_ClientReport_client_list(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ClientReport_client_list(Rest, Bin3, TrUserData);
e_field_ClientReport_client_list([], Bin, _TrUserData) -> Bin.

'e_mfield_Survey.SurveyAvg_busy'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AvgType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Survey.SurveyAvg_busy_tx'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AvgType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Survey.SurveyAvg_busy_rx'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AvgType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Survey.SurveyAvg_busy_self'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AvgType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Survey.SurveyAvg_busy_ext'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AvgType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Survey.SurveyAvg_noise'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AvgType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Survey_survey_list(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Survey.SurveySample'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Survey_survey_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_Survey_survey_list(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Survey_survey_list(Rest, Bin3, TrUserData);
e_field_Survey_survey_list([], Bin, _TrUserData) -> Bin.

e_mfield_Survey_survey_avg(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Survey.SurveyAvg'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Survey_survey_avg([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_Survey_survey_avg(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Survey_survey_avg(Rest, Bin3, TrUserData);
e_field_Survey_survey_avg([], Bin, _TrUserData) -> Bin.

e_mfield_Capacity_queue_list(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Capacity.QueueSample'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Capacity_queue_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_Capacity_queue_list(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Capacity_queue_list(Rest, Bin3, TrUserData);
e_field_Capacity_queue_list([], Bin, _TrUserData) -> Bin.

'e_mfield_Device.Thermal_txchainmask'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Device.Thermal.RadioTxChainMask'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Device.Thermal_txchainmask'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_Device.Thermal_txchainmask'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_Device.Thermal_txchainmask'(Rest, Bin3, TrUserData);
'e_field_Device.Thermal_txchainmask'([], Bin, _TrUserData) -> Bin.

e_mfield_Device_load(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Device.LoadAvg'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Device_radio_temp(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Device.RadioTemp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Device_radio_temp([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Device_radio_temp(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Device_radio_temp(Rest, Bin3, TrUserData);
e_field_Device_radio_temp([], Bin, _TrUserData) -> Bin.

e_mfield_Device_thermal_stats(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Device.Thermal'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Device_thermal_stats([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_Device_thermal_stats(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Device_thermal_stats(Rest, Bin3, TrUserData);
e_field_Device_thermal_stats([], Bin, _TrUserData) -> Bin.

e_mfield_Device_mem_util(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Device.MemUtil'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Device_fs_util(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Device.FsUtil'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Device_fs_util([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_Device_fs_util(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Device_fs_util(Rest, Bin3, TrUserData);
e_field_Device_fs_util([], Bin, _TrUserData) -> Bin.

e_mfield_Device_cpuUtil(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Device.CpuUtil'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Device_ps_cpu_util(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Device.PerProcessUtil'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Device_ps_cpu_util([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = e_mfield_Device_ps_cpu_util(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Device_ps_cpu_util(Rest, Bin3, TrUserData);
e_field_Device_ps_cpu_util([], Bin, _TrUserData) -> Bin.

e_mfield_Device_ps_mem_util(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_Device.PerProcessUtil'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Device_ps_mem_util([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_mfield_Device_ps_mem_util(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Device_ps_mem_util(Rest, Bin3, TrUserData);
e_field_Device_ps_mem_util([], Bin, _TrUserData) -> Bin.

'e_mfield_BSClient.BSBandReport_event_list'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_BSClient.BSEvent'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_BSClient.BSBandReport_event_list'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 122>>,
    Bin3 = 'e_mfield_BSClient.BSBandReport_event_list'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_BSClient.BSBandReport_event_list'(Rest, Bin3, TrUserData);
'e_field_BSClient.BSBandReport_event_list'([], Bin, _TrUserData) -> Bin.

e_mfield_BSClient_bs_band_report(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_BSClient.BSBandReport'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_BSClient_bs_band_report([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_BSClient_bs_band_report(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_BSClient_bs_band_report(Rest, Bin3, TrUserData);
e_field_BSClient_bs_band_report([], Bin, _TrUserData) -> Bin.

e_mfield_BSReport_clients(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_BSClient(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_BSReport_clients([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_BSReport_clients(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_BSReport_clients(Rest, Bin3, TrUserData);
e_field_BSReport_clients([], Bin, _TrUserData) -> Bin.

e_mfield_RssiPeer_rssi_list(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_RssiPeer.RssiSample'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RssiPeer_rssi_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_RssiPeer_rssi_list(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_RssiPeer_rssi_list(Rest, Bin3, TrUserData);
e_field_RssiPeer_rssi_list([], Bin, _TrUserData) -> Bin.

e_mfield_RssiPeer_rssi_avg(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AvgType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RssiReport_peer_list(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RssiPeer(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RssiReport_peer_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_RssiReport_peer_list(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_RssiReport_peer_list(Rest, Bin3, TrUserData);
e_field_RssiReport_peer_list([], Bin, _TrUserData) -> Bin.

e_mfield_NetworkProbe_dns_probe(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_DNSProbeMetric(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_NetworkProbe_vlan_probe(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_VLANMetrics(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_NetworkProbe_radius_probe(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RADIUSMetrics(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_NetworkProbe_radius_probe([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_NetworkProbe_radius_probe(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_NetworkProbe_radius_probe(Rest, Bin3, TrUserData);
e_field_NetworkProbe_radius_probe([], Bin, _TrUserData) -> Bin.

e_field_CallStart_codecs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_CallStart_codecs(Rest, Bin3, TrUserData);
e_field_CallStart_codecs([], Bin, _TrUserData) -> Bin.

e_mfield_CallStop_stats(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RtpFlowStats(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CallStop_stats([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_CallStop_stats(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_CallStop_stats(Rest, Bin3, TrUserData);
e_field_CallStop_stats([], Bin, _TrUserData) -> Bin.

e_field_CallStop_codecs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_CallStop_codecs(Rest, Bin3, TrUserData);
e_field_CallStop_codecs([], Bin, _TrUserData) -> Bin.

e_mfield_CallReport_stats(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RtpFlowStats(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CallReport_stats([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_CallReport_stats(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_CallReport_stats(Rest, Bin3, TrUserData);
e_field_CallReport_stats([], Bin, _TrUserData) -> Bin.

e_field_CallReport_codecs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_CallReport_codecs(Rest, Bin3, TrUserData);
e_field_CallReport_codecs([], Bin, _TrUserData) -> Bin.

e_mfield_VideoVoiceReport_call_start(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_CallStart(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_VideoVoiceReport_call_stop(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_CallStop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_VideoVoiceReport_call_report(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_CallReport(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_VideoVoiceReport_stream_video_stop(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_StreamingVideoStop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_VideoVoiceReport_stream_video_server(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_StreamingVideoServerDetected(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_VideoVoiceReport_stream_video_session_start(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_StreamingVideoSessionStart(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_EventReport.ClientSession_client_assoc_event'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_EventReport.ClientAssocEvent'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_EventReport.ClientSession_client_assoc_event'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = 'e_mfield_EventReport.ClientSession_client_assoc_event'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_EventReport.ClientSession_client_assoc_event'(Rest, Bin3, TrUserData);
'e_field_EventReport.ClientSession_client_assoc_event'([], Bin, _TrUserData) -> Bin.

'e_mfield_EventReport.ClientSession_client_auth_event'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_EventReport.ClientAuthEvent'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_EventReport.ClientSession_client_auth_event'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = 'e_mfield_EventReport.ClientSession_client_auth_event'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_EventReport.ClientSession_client_auth_event'(Rest, Bin3, TrUserData);
'e_field_EventReport.ClientSession_client_auth_event'([], Bin, _TrUserData) -> Bin.

'e_mfield_EventReport.ClientSession_client_disconnect_event'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_EventReport.ClientDisconnectEvent'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_EventReport.ClientSession_client_disconnect_event'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = 'e_mfield_EventReport.ClientSession_client_disconnect_event'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_EventReport.ClientSession_client_disconnect_event'(Rest, Bin3, TrUserData);
'e_field_EventReport.ClientSession_client_disconnect_event'([], Bin, _TrUserData) -> Bin.

'e_mfield_EventReport.ClientSession_client_failure_event'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_EventReport.ClientFailureEvent'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_EventReport.ClientSession_client_failure_event'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_EventReport.ClientSession_client_failure_event'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_EventReport.ClientSession_client_failure_event'(Rest, Bin3, TrUserData);
'e_field_EventReport.ClientSession_client_failure_event'([], Bin, _TrUserData) -> Bin.

'e_mfield_EventReport.ClientSession_client_first_data_event'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_EventReport.ClientFirstDataEvent'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_EventReport.ClientSession_client_first_data_event'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = 'e_mfield_EventReport.ClientSession_client_first_data_event'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_EventReport.ClientSession_client_first_data_event'(Rest, Bin3, TrUserData);
'e_field_EventReport.ClientSession_client_first_data_event'([], Bin, _TrUserData) -> Bin.

'e_mfield_EventReport.ClientSession_client_id_event'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_EventReport.ClientIdEvent'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_EventReport.ClientSession_client_id_event'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = 'e_mfield_EventReport.ClientSession_client_id_event'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_EventReport.ClientSession_client_id_event'(Rest, Bin3, TrUserData);
'e_field_EventReport.ClientSession_client_id_event'([], Bin, _TrUserData) -> Bin.

'e_mfield_EventReport.ClientSession_client_ip_event'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_EventReport.ClientIpEvent'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_EventReport.ClientSession_client_ip_event'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = 'e_mfield_EventReport.ClientSession_client_ip_event'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_EventReport.ClientSession_client_ip_event'(Rest, Bin3, TrUserData);
'e_field_EventReport.ClientSession_client_ip_event'([], Bin, _TrUserData) -> Bin.

'e_mfield_EventReport.ClientSession_client_timeout_event'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_EventReport.ClientTimeoutEvent'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_EventReport.ClientSession_client_timeout_event'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = 'e_mfield_EventReport.ClientSession_client_timeout_event'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_EventReport.ClientSession_client_timeout_event'(Rest, Bin3, TrUserData);
'e_field_EventReport.ClientSession_client_timeout_event'([], Bin, _TrUserData) -> Bin.

'e_mfield_EventReport.ClientSession_client_connect_event'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_EventReport.ClientConnectEvent'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_EventReport.ClientSession_client_connect_event'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = 'e_mfield_EventReport.ClientSession_client_connect_event'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_EventReport.ClientSession_client_connect_event'(Rest, Bin3, TrUserData);
'e_field_EventReport.ClientSession_client_connect_event'([], Bin, _TrUserData) -> Bin.

e_mfield_EventReport_client_session(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_EventReport.ClientSession'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_EventReport_client_session([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_EventReport_client_session(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_EventReport_client_session(Rest, Bin3, TrUserData);
e_field_EventReport_client_session([], Bin, _TrUserData) -> Bin.

e_mfield_Report_survey(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Survey(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Report_survey([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Report_survey(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Report_survey(Rest, Bin3, TrUserData);
e_field_Report_survey([], Bin, _TrUserData) -> Bin.

e_mfield_Report_capacity(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Capacity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Report_capacity([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_Report_capacity(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Report_capacity(Rest, Bin3, TrUserData);
e_field_Report_capacity([], Bin, _TrUserData) -> Bin.

e_mfield_Report_neighbors(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Neighbor(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Report_neighbors([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_Report_neighbors(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Report_neighbors(Rest, Bin3, TrUserData);
e_field_Report_neighbors([], Bin, _TrUserData) -> Bin.

e_mfield_Report_clients(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ClientReport(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Report_clients([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_Report_clients(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Report_clients(Rest, Bin3, TrUserData);
e_field_Report_clients([], Bin, _TrUserData) -> Bin.

e_mfield_Report_device(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Device(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Report_device([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_Report_device(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Report_device(Rest, Bin3, TrUserData);
e_field_Report_device([], Bin, _TrUserData) -> Bin.

e_mfield_Report_bs_report(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_BSReport(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Report_bs_report([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_Report_bs_report(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Report_bs_report(Rest, Bin3, TrUserData);
e_field_Report_bs_report([], Bin, _TrUserData) -> Bin.

e_mfield_Report_rssi_report(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RssiReport(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Report_rssi_report([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = e_mfield_Report_rssi_report(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Report_rssi_report(Rest, Bin3, TrUserData);
e_field_Report_rssi_report([], Bin, _TrUserData) -> Bin.

e_mfield_Report_video_voice_report(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_VideoVoiceReport(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Report_video_voice_report([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = e_mfield_Report_video_voice_report(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Report_video_voice_report(Rest, Bin3, TrUserData);
e_field_Report_video_voice_report([], Bin, _TrUserData) -> Bin.

e_mfield_Report_network_probe(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_NetworkProbe(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Report_network_probe([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 170, 6>>,
    Bin3 = e_mfield_Report_network_probe(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Report_network_probe(Rest, Bin3, TrUserData);
e_field_Report_network_probe([], Bin, _TrUserData) -> Bin.

e_mfield_Report_event_report(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_EventReport(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Report_event_report([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 178, 6>>,
    Bin3 = e_mfield_Report_event_report(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Report_event_report(Rest, Bin3, TrUserData);
e_field_Report_event_report([], Bin, _TrUserData) -> Bin.

e_enum_RadioBandType('BAND2G', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_RadioBandType('BAND5G', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_RadioBandType('BAND5GL', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_RadioBandType('BAND5GU', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_RadioBandType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_SurveyType('ON_CHANNEL', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_SurveyType('OFF_CHANNEL', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_SurveyType('FULL', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_SurveyType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_NeighborType('ONCHAN_SCAN', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_NeighborType('OFFCHAN_SCAN', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_NeighborType('FULL_SCAN', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_NeighborType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_ChanWidth('CHAN_WIDTH_UNKNOWN', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_ChanWidth('CHAN_WIDTH_20MHZ', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_ChanWidth('CHAN_WIDTH_40MHZ', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_ChanWidth('CHAN_WIDTH_40MHZ_ABOVE', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_ChanWidth('CHAN_WIDTH_40MHZ_BELOW', Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_ChanWidth('CHAN_WIDTH_80MHZ', Bin, _TrUserData) -> <<Bin/binary, 5>>;
e_enum_ChanWidth('CHAN_WIDTH_160MHZ', Bin, _TrUserData) -> <<Bin/binary, 6>>;
e_enum_ChanWidth('CHAN_WIDTH_80_PLUS_80MHZ', Bin, _TrUserData) -> <<Bin/binary, 7>>;
e_enum_ChanWidth(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_WmmAc('WMM_AC_VO', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_WmmAc('WMM_AC_VI', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_WmmAc('WMM_AC_BE', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_WmmAc('WMM_AC_BK', Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_WmmAc(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_BSEventType('PROBE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_BSEventType('CONNECT', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_BSEventType('DISCONNECT', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_BSEventType('BACKOFF', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_BSEventType('ACTIVITY', Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_BSEventType('OVERRUN', Bin, _TrUserData) -> <<Bin/binary, 5>>;
e_enum_BSEventType('BAND_STEERING_ATTEMPT', Bin, _TrUserData) -> <<Bin/binary, 6>>;
e_enum_BSEventType('CLIENT_STEERING_ATTEMPT', Bin, _TrUserData) -> <<Bin/binary, 7>>;
e_enum_BSEventType('CLIENT_STEERING_STARTED', Bin, _TrUserData) -> <<Bin/binary, 8>>;
e_enum_BSEventType('CLIENT_STEERING_DISABLED', Bin, _TrUserData) -> <<Bin/binary, 9>>;
e_enum_BSEventType('CLIENT_STEERING_EXPIRED', Bin, _TrUserData) -> <<Bin/binary, 10>>;
e_enum_BSEventType('CLIENT_STEERING_FAILED', Bin, _TrUserData) -> <<Bin/binary, 11>>;
e_enum_BSEventType('AUTH_BLOCK', Bin, _TrUserData) -> <<Bin/binary, 12>>;
e_enum_BSEventType('CLIENT_KICKED', Bin, _TrUserData) -> <<Bin/binary, 13>>;
e_enum_BSEventType('CLIENT_BS_BTM', Bin, _TrUserData) -> <<Bin/binary, 14>>;
e_enum_BSEventType('CLIENT_STICKY_BTM', Bin, _TrUserData) -> <<Bin/binary, 15>>;
e_enum_BSEventType('CLIENT_BTM', Bin, _TrUserData) -> <<Bin/binary, 16>>;
e_enum_BSEventType('CLIENT_CAPABILITIES', Bin, _TrUserData) -> <<Bin/binary, 17>>;
e_enum_BSEventType('CLIENT_BS_BTM_RETRY', Bin, _TrUserData) -> <<Bin/binary, 18>>;
e_enum_BSEventType('CLIENT_STICKY_BTM_RETRY', Bin, _TrUserData) -> <<Bin/binary, 19>>;
e_enum_BSEventType('CLIENT_BTM_RETRY', Bin, _TrUserData) -> <<Bin/binary, 20>>;
e_enum_BSEventType('CLIENT_RRM_BCN_RPT', Bin, _TrUserData) -> <<Bin/binary, 21>>;
e_enum_BSEventType('CLIENT_BS_KICK', Bin, _TrUserData) -> <<Bin/binary, 22>>;
e_enum_BSEventType('CLIENT_STICKY_KICK', Bin, _TrUserData) -> <<Bin/binary, 23>>;
e_enum_BSEventType('CLIENT_SPECULATIVE_KICK', Bin, _TrUserData) -> <<Bin/binary, 24>>;
e_enum_BSEventType('CLIENT_DIRECTED_KICK', Bin, _TrUserData) -> <<Bin/binary, 25>>;
e_enum_BSEventType('CLIENT_GHOST_DEVICE_KICK', Bin, _TrUserData) -> <<Bin/binary, 26>>;
e_enum_BSEventType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_DeviceType('DEV_AP', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_DeviceType('DEV_STA', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_DeviceType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_FrameType('FT_DEAUTH', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_FrameType('FT_DISASSOC', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_FrameType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_DisconnectSrc('LOCAL', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_DisconnectSrc('REMOTE', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_DisconnectSrc(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_AssocType('ASSOC', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_AssocType('REASSOC', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_AssocType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_DisconnectType('DISASSOC', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_DisconnectType('DEAUTH', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_DisconnectType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_SecurityType('SEC_OPEN', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_SecurityType('SEC_RADIUS', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_SecurityType('SEC_PSK', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_SecurityType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_ReportType('RAW', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_ReportType('AVERAGE', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_ReportType('HISTOGRAM', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_ReportType('PERCENTILE', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_ReportType('DIFF', Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_ReportType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_FsType('FS_TYPE_ROOTFS', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_FsType('FS_TYPE_TMPFS', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_FsType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_CTReasonType('CTR_IDLE_TOO_LONG', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_CTReasonType('CTR_PROBE_FAIL', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_CTReasonType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_DiffType('ADDED', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_DiffType('REMOVED', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_DiffType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_StreamingVideoType('UNKNOWN', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_StreamingVideoType('NETFLIX', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_StreamingVideoType('YOUTUBE', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_StreamingVideoType('PLEX', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_StreamingVideoType(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_RssiPeer.RssiSource'('CLIENT', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_RssiPeer.RssiSource'('PROBE', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_RssiPeer.RssiSource'('NEIGHBOR', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_RssiPeer.RssiSource'(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_StateUpDown('SUD_down', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_StateUpDown('SUD_up', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_StateUpDown('SUD_error', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_StateUpDown(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_RtpFlowStats.RtpFlowDirection'('RTP_UPSTREAM', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_RtpFlowStats.RtpFlowDirection'('RTP_DOWNSTREAM', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_RtpFlowStats.RtpFlowDirection'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_RtpFlowStats.RtpFlowType'('RTP_VOICE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_RtpFlowStats.RtpFlowType'('RTP_VIDEO', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_RtpFlowStats.RtpFlowType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_CallStop.CallStopReason'('BYE_OK', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_CallStop.CallStopReason'('CALL_DROPPED', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_CallStop.CallStopReason'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_CallReport.CallReportReason'('ROAMED_FROM', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_CallReport.CallReportReason'('ROAMED_TO', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_CallReport.CallReportReason'('GOT_PUBLISH', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_CallReport.CallReportReason'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('AvgType', Bin, TrUserData) -> id(decode_msg_AvgType(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Neighbor.NeighborBss', Bin, TrUserData) -> id('decode_msg_Neighbor.NeighborBss'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Neighbor', Bin, TrUserData) -> id(decode_msg_Neighbor(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Client.Stats', Bin, TrUserData) -> id('decode_msg_Client.Stats'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Client.RxStats', Bin, TrUserData) -> id('decode_msg_Client.RxStats'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Client.RxStats.ChainRSSI', Bin, TrUserData) -> id('decode_msg_Client.RxStats.ChainRSSI'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Client.TxStats', Bin, TrUserData) -> id('decode_msg_Client.TxStats'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Client.TidStats', Bin, TrUserData) -> id('decode_msg_Client.TidStats'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Client.TidStats.Sojourn', Bin, TrUserData) -> id('decode_msg_Client.TidStats.Sojourn'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Client', Bin, TrUserData) -> id(decode_msg_Client(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ClientReport', Bin, TrUserData) -> id(decode_msg_ClientReport(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Survey.SurveySample', Bin, TrUserData) -> id('decode_msg_Survey.SurveySample'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Survey.SurveyAvg', Bin, TrUserData) -> id('decode_msg_Survey.SurveyAvg'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Survey', Bin, TrUserData) -> id(decode_msg_Survey(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Capacity.QueueSample', Bin, TrUserData) -> id('decode_msg_Capacity.QueueSample'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Capacity', Bin, TrUserData) -> id(decode_msg_Capacity(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Device.LoadAvg', Bin, TrUserData) -> id('decode_msg_Device.LoadAvg'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Device.RadioTemp', Bin, TrUserData) -> id('decode_msg_Device.RadioTemp'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Device.Thermal', Bin, TrUserData) -> id('decode_msg_Device.Thermal'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Device.Thermal.RadioTxChainMask', Bin, TrUserData) -> id('decode_msg_Device.Thermal.RadioTxChainMask'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Device.MemUtil', Bin, TrUserData) -> id('decode_msg_Device.MemUtil'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Device.FsUtil', Bin, TrUserData) -> id('decode_msg_Device.FsUtil'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Device.CpuUtil', Bin, TrUserData) -> id('decode_msg_Device.CpuUtil'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Device.PerProcessUtil', Bin, TrUserData) -> id('decode_msg_Device.PerProcessUtil'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Device', Bin, TrUserData) -> id(decode_msg_Device(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BSClient.BSEvent', Bin, TrUserData) -> id('decode_msg_BSClient.BSEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BSClient.BSBandReport', Bin, TrUserData) -> id('decode_msg_BSClient.BSBandReport'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BSClient', Bin, TrUserData) -> id(decode_msg_BSClient(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BSReport', Bin, TrUserData) -> id(decode_msg_BSReport(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RssiPeer.RssiSample', Bin, TrUserData) -> id('decode_msg_RssiPeer.RssiSample'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RssiPeer', Bin, TrUserData) -> id(decode_msg_RssiPeer(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RssiReport', Bin, TrUserData) -> id(decode_msg_RssiReport(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DNSProbeMetric', Bin, TrUserData) -> id(decode_msg_DNSProbeMetric(Bin, TrUserData), TrUserData);
decode_msg_2_doit('VLANMetrics', Bin, TrUserData) -> id(decode_msg_VLANMetrics(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RADIUSMetrics', Bin, TrUserData) -> id(decode_msg_RADIUSMetrics(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NetworkProbe', Bin, TrUserData) -> id(decode_msg_NetworkProbe(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RtpFlowStats', Bin, TrUserData) -> id(decode_msg_RtpFlowStats(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CallStart', Bin, TrUserData) -> id(decode_msg_CallStart(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CallStop', Bin, TrUserData) -> id(decode_msg_CallStop(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CallReport', Bin, TrUserData) -> id(decode_msg_CallReport(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StreamingVideoDetectPattern', Bin, TrUserData) -> id(decode_msg_StreamingVideoDetectPattern(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StreamingVideoSessionStart', Bin, TrUserData) -> id(decode_msg_StreamingVideoSessionStart(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StreamingVideoServerDetected', Bin, TrUserData) -> id(decode_msg_StreamingVideoServerDetected(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StreamingVideoStop', Bin, TrUserData) -> id(decode_msg_StreamingVideoStop(Bin, TrUserData), TrUserData);
decode_msg_2_doit('VideoVoiceReport', Bin, TrUserData) -> id(decode_msg_VideoVoiceReport(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport.ClientAssocEvent', Bin, TrUserData) -> id('decode_msg_EventReport.ClientAssocEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport.ClientAuthEvent', Bin, TrUserData) -> id('decode_msg_EventReport.ClientAuthEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport.ClientDisconnectEvent', Bin, TrUserData) -> id('decode_msg_EventReport.ClientDisconnectEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport.ClientConnectEvent', Bin, TrUserData) -> id('decode_msg_EventReport.ClientConnectEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport.ClientFailureEvent', Bin, TrUserData) -> id('decode_msg_EventReport.ClientFailureEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport.ClientFirstDataEvent', Bin, TrUserData) -> id('decode_msg_EventReport.ClientFirstDataEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport.ClientIdEvent', Bin, TrUserData) -> id('decode_msg_EventReport.ClientIdEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport.ClientIpEvent', Bin, TrUserData) -> id('decode_msg_EventReport.ClientIpEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport.ClientTimeoutEvent', Bin, TrUserData) -> id('decode_msg_EventReport.ClientTimeoutEvent'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport.ClientSession', Bin, TrUserData) -> id('decode_msg_EventReport.ClientSession'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EventReport', Bin, TrUserData) -> id(decode_msg_EventReport(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Report', Bin, TrUserData) -> id(decode_msg_Report(Bin, TrUserData), TrUserData).



decode_msg_AvgType(Bin, TrUserData) -> dfp_read_field_def_AvgType(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_AvgType(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_AvgType_avg(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_AvgType(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_AvgType_min(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_AvgType(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_AvgType_max(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_AvgType(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_AvgType_num(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_AvgType(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'AvgType'{avg = F@_1, min = F@_2, max = F@_3, num = F@_4};
dfp_read_field_def_AvgType(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_AvgType(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_AvgType(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_AvgType(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_AvgType(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_AvgType_avg(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_AvgType_min(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_AvgType_max(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_AvgType_num(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_AvgType(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_AvgType(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_AvgType(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_AvgType(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_AvgType(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_AvgType(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'AvgType'{avg = F@_1, min = F@_2, max = F@_3, num = F@_4}.

d_field_AvgType_avg(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_AvgType_avg(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_AvgType_avg(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AvgType(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_AvgType_min(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_AvgType_min(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_AvgType_min(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AvgType(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_AvgType_max(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_AvgType_max(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_AvgType_max(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AvgType(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_AvgType_num(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_AvgType_num(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_AvgType_num(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AvgType(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_AvgType(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_AvgType(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_AvgType(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AvgType(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_AvgType(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_AvgType(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_AvgType(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AvgType(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_AvgType(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AvgType(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_AvgType(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AvgType(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_AvgType(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AvgType(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_Neighbor.NeighborBss'(Bin, TrUserData) ->
    'dfp_read_field_def_Neighbor.NeighborBss'(Bin,
                                              0,
                                              0,
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              TrUserData).

'dfp_read_field_def_Neighbor.NeighborBss'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Neighbor.NeighborBss_bssid'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Neighbor.NeighborBss'(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Neighbor.NeighborBss_ssid'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Neighbor.NeighborBss'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Neighbor.NeighborBss_rssi'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Neighbor.NeighborBss'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Neighbor.NeighborBss_tsf'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Neighbor.NeighborBss'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Neighbor.NeighborBss_chan_width'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Neighbor.NeighborBss'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Neighbor.NeighborBss_channel'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Neighbor.NeighborBss'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Neighbor.NeighborBss_status'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Neighbor.NeighborBss'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #'Neighbor.NeighborBss'{bssid = F@_1, ssid = F@_2, rssi = F@_3, tsf = F@_4, chan_width = F@_5, channel = F@_6, status = F@_7};
'dfp_read_field_def_Neighbor.NeighborBss'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dg_read_field_def_Neighbor.NeighborBss'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'dg_read_field_def_Neighbor.NeighborBss'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_Neighbor.NeighborBss'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dg_read_field_def_Neighbor.NeighborBss'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_Neighbor.NeighborBss_bssid'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        18 -> 'd_field_Neighbor.NeighborBss_ssid'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        24 -> 'd_field_Neighbor.NeighborBss_rssi'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        32 -> 'd_field_Neighbor.NeighborBss_tsf'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        40 -> 'd_field_Neighbor.NeighborBss_chan_width'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        48 -> 'd_field_Neighbor.NeighborBss_channel'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> 'd_field_Neighbor.NeighborBss_status'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Neighbor.NeighborBss'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> 'skip_64_Neighbor.NeighborBss'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> 'skip_length_delimited_Neighbor.NeighborBss'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> 'skip_group_Neighbor.NeighborBss'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> 'skip_32_Neighbor.NeighborBss'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
'dg_read_field_def_Neighbor.NeighborBss'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #'Neighbor.NeighborBss'{bssid = F@_1, ssid = F@_2, rssi = F@_3, tsf = F@_4, chan_width = F@_5, channel = F@_6, status = F@_7}.

'd_field_Neighbor.NeighborBss_bssid'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Neighbor.NeighborBss_bssid'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Neighbor.NeighborBss_bssid'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_Neighbor.NeighborBss'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_Neighbor.NeighborBss_ssid'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Neighbor.NeighborBss_ssid'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Neighbor.NeighborBss_ssid'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_Neighbor.NeighborBss'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_Neighbor.NeighborBss_rssi'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Neighbor.NeighborBss_rssi'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Neighbor.NeighborBss_rssi'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Neighbor.NeighborBss'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_Neighbor.NeighborBss_tsf'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Neighbor.NeighborBss_tsf'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Neighbor.NeighborBss_tsf'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Neighbor.NeighborBss'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

'd_field_Neighbor.NeighborBss_chan_width'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Neighbor.NeighborBss_chan_width'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Neighbor.NeighborBss_chan_width'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ChanWidth(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_Neighbor.NeighborBss'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

'd_field_Neighbor.NeighborBss_channel'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Neighbor.NeighborBss_channel'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Neighbor.NeighborBss_channel'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Neighbor.NeighborBss'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

'd_field_Neighbor.NeighborBss_status'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Neighbor.NeighborBss_status'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Neighbor.NeighborBss_status'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_DiffType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_Neighbor.NeighborBss'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

'skip_varint_Neighbor.NeighborBss'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'skip_varint_Neighbor.NeighborBss'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_varint_Neighbor.NeighborBss'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_Neighbor.NeighborBss'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_length_delimited_Neighbor.NeighborBss'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'skip_length_delimited_Neighbor.NeighborBss'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_length_delimited_Neighbor.NeighborBss'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Neighbor.NeighborBss'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_group_Neighbor.NeighborBss'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Neighbor.NeighborBss'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_32_Neighbor.NeighborBss'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_Neighbor.NeighborBss'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_64_Neighbor.NeighborBss'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_Neighbor.NeighborBss'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_Neighbor(Bin, TrUserData) -> dfp_read_field_def_Neighbor(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Neighbor(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Neighbor_band(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Neighbor(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Neighbor_scan_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Neighbor(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Neighbor_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Neighbor(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Neighbor_bss_list(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Neighbor(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Neighbor_report_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Neighbor(<<>>, 0, 0, F@_1, F@_2, F@_3, R1, F@_5, TrUserData) -> #'Neighbor'{'band' = F@_1, scan_type = F@_2, timestamp_ms = F@_3, bss_list = lists_reverse(R1, TrUserData), report_type = F@_5};
dfp_read_field_def_Neighbor(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_Neighbor(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Neighbor(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_Neighbor(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Neighbor(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Neighbor_band(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> d_field_Neighbor_scan_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> d_field_Neighbor_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_Neighbor_bss_list(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> d_field_Neighbor_report_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Neighbor(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_Neighbor(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_Neighbor(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_Neighbor(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_Neighbor(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_Neighbor(<<>>, 0, 0, F@_1, F@_2, F@_3, R1, F@_5, TrUserData) -> #'Neighbor'{'band' = F@_1, scan_type = F@_2, timestamp_ms = F@_3, bss_list = lists_reverse(R1, TrUserData), report_type = F@_5}.

d_field_Neighbor_band(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Neighbor_band(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Neighbor_band(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Neighbor(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_Neighbor_scan_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Neighbor_scan_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Neighbor_scan_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_NeighborType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Neighbor(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_Neighbor_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Neighbor_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Neighbor_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Neighbor(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_Neighbor_bss_list(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Neighbor_bss_list(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Neighbor_bss_list(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Neighbor.NeighborBss'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Neighbor(RestF, 0, 0, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, TrUserData).

d_field_Neighbor_report_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Neighbor_report_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Neighbor_report_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ReportType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Neighbor(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_Neighbor(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_Neighbor(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_Neighbor(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_Neighbor(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Neighbor(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_Neighbor(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_Neighbor(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Neighbor(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_Neighbor(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Neighbor(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_Neighbor(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_Neighbor(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_Neighbor(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_Neighbor(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_Client.Stats'(Bin, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Bin,
                                      0,
                                      0,
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      id(undefined, TrUserData),
                                      TrUserData).

'dfp_read_field_def_Client.Stats'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_rx_bytes'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_tx_bytes'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_rx_frames'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_tx_frames'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_rx_retries'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_tx_retries'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_rx_errors'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_tx_errors'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<73, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_rx_rate'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<81, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_tx_rate'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<88, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.Stats_rssi'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.Stats'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'Client.Stats'{rx_bytes = F@_1, tx_bytes = F@_2, rx_frames = F@_3, tx_frames = F@_4, rx_retries = F@_5, tx_retries = F@_6, rx_errors = F@_7, tx_errors = F@_8, rx_rate = F@_9, tx_rate = F@_10, rssi = F@_11};
'dfp_read_field_def_Client.Stats'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dg_read_field_def_Client.Stats'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'dg_read_field_def_Client.Stats'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_Client.Stats'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dg_read_field_def_Client.Stats'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Client.Stats_rx_bytes'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        16 -> 'd_field_Client.Stats_tx_bytes'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        24 -> 'd_field_Client.Stats_rx_frames'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        32 -> 'd_field_Client.Stats_tx_frames'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        40 -> 'd_field_Client.Stats_rx_retries'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        48 -> 'd_field_Client.Stats_tx_retries'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        56 -> 'd_field_Client.Stats_rx_errors'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        64 -> 'd_field_Client.Stats_tx_errors'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        73 -> 'd_field_Client.Stats_rx_rate'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        81 -> 'd_field_Client.Stats_tx_rate'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        88 -> 'd_field_Client.Stats_rssi'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Client.Stats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                1 -> 'skip_64_Client.Stats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                2 -> 'skip_length_delimited_Client.Stats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                3 -> 'skip_group_Client.Stats'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                5 -> 'skip_32_Client.Stats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
            end
    end;
'dg_read_field_def_Client.Stats'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'Client.Stats'{rx_bytes = F@_1, tx_bytes = F@_2, rx_frames = F@_3, tx_frames = F@_4, rx_retries = F@_5, tx_retries = F@_6, rx_errors = F@_7, tx_errors = F@_8, rx_rate = F@_9, tx_rate = F@_10, rssi = F@_11}.

'd_field_Client.Stats_rx_bytes'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.Stats_rx_bytes'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.Stats_rx_bytes'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.Stats'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.Stats_tx_bytes'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.Stats_tx_bytes'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.Stats_tx_bytes'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.Stats'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.Stats_rx_frames'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.Stats_rx_frames'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.Stats_rx_frames'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.Stats'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.Stats_tx_frames'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.Stats_tx_frames'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.Stats_tx_frames'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.Stats'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.Stats_rx_retries'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.Stats_rx_retries'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.Stats_rx_retries'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.Stats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.Stats_tx_retries'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.Stats_tx_retries'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.Stats_tx_retries'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.Stats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.Stats_rx_errors'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.Stats_rx_errors'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.Stats_rx_errors'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.Stats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.Stats_tx_errors'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.Stats_tx_errors'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.Stats_tx_errors'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.Stats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.Stats_rx_rate'(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(infinity, TrUserData), F@_10, F@_11, TrUserData);
'd_field_Client.Stats_rx_rate'(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id('-infinity', TrUserData), F@_10, F@_11, TrUserData);
'd_field_Client.Stats_rx_rate'(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(nan, TrUserData), F@_10, F@_11, TrUserData);
'd_field_Client.Stats_rx_rate'(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(Value, TrUserData), F@_10, F@_11, TrUserData).

'd_field_Client.Stats_tx_rate'(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(infinity, TrUserData), F@_11, TrUserData);
'd_field_Client.Stats_tx_rate'(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id('-infinity', TrUserData), F@_11, TrUserData);
'd_field_Client.Stats_tx_rate'(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(nan, TrUserData), F@_11, TrUserData);
'd_field_Client.Stats_tx_rate'(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(Value, TrUserData), F@_11, TrUserData).

'd_field_Client.Stats_rssi'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.Stats_rssi'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.Stats_rssi'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.Stats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewFValue, TrUserData).

'skip_varint_Client.Stats'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'skip_varint_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_varint_Client.Stats'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_length_delimited_Client.Stats'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'skip_length_delimited_Client.Stats'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_length_delimited_Client.Stats'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Client.Stats'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_group_Client.Stats'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Client.Stats'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_32_Client.Stats'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_64_Client.Stats'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.Stats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'decode_msg_Client.RxStats'(Bin, TrUserData) ->
    'dfp_read_field_def_Client.RxStats'(Bin,
                                        0,
                                        0,
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id([], TrUserData),
                                        TrUserData).

'dfp_read_field_def_Client.RxStats'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_mcs'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_nss'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_bw'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_bytes'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_msdus'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_mpdus'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_ppdus'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_retries'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<72, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_errors'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<80, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_rssi'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<90, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Client.RxStats_chain_rssi'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Client.RxStats'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, R1, TrUserData) ->
    #'Client.RxStats'{mcs = F@_1, nss = F@_2, bw = F@_3, bytes = F@_4, msdus = F@_5, mpdus = F@_6, ppdus = F@_7, retries = F@_8, errors = F@_9, rssi = F@_10, chain_rssi = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_Client.RxStats'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dg_read_field_def_Client.RxStats'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'dg_read_field_def_Client.RxStats'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_Client.RxStats'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dg_read_field_def_Client.RxStats'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Client.RxStats_mcs'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        16 -> 'd_field_Client.RxStats_nss'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        24 -> 'd_field_Client.RxStats_bw'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        32 -> 'd_field_Client.RxStats_bytes'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        40 -> 'd_field_Client.RxStats_msdus'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        48 -> 'd_field_Client.RxStats_mpdus'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        56 -> 'd_field_Client.RxStats_ppdus'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        64 -> 'd_field_Client.RxStats_retries'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        72 -> 'd_field_Client.RxStats_errors'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        80 -> 'd_field_Client.RxStats_rssi'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        90 -> 'd_field_Client.RxStats_chain_rssi'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Client.RxStats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                1 -> 'skip_64_Client.RxStats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                2 -> 'skip_length_delimited_Client.RxStats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                3 -> 'skip_group_Client.RxStats'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                5 -> 'skip_32_Client.RxStats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
            end
    end;
'dg_read_field_def_Client.RxStats'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, R1, TrUserData) ->
    #'Client.RxStats'{mcs = F@_1, nss = F@_2, bw = F@_3, bytes = F@_4, msdus = F@_5, mpdus = F@_6, ppdus = F@_7, retries = F@_8, errors = F@_9, rssi = F@_10, chain_rssi = lists_reverse(R1, TrUserData)}.

'd_field_Client.RxStats_mcs'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_mcs'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_mcs'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.RxStats_nss'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_nss'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_nss'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.RxStats_bw'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_bw'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_bw'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.RxStats_bytes'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_bytes'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_bytes'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.RxStats_msdus'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_msdus'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_msdus'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.RxStats_mpdus'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_mpdus'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_mpdus'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.RxStats_ppdus'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_ppdus'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_ppdus'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.RxStats_retries'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_retries'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_retries'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, TrUserData).

'd_field_Client.RxStats_errors'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_errors'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_errors'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, TrUserData).

'd_field_Client.RxStats_rssi'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_rssi'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_rssi'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, F@_11, TrUserData).

'd_field_Client.RxStats_chain_rssi'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Client.RxStats_chain_rssi'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Client.RxStats_chain_rssi'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Client.RxStats.ChainRSSI'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_Client.RxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, cons(NewFValue, Prev, TrUserData), TrUserData).

'skip_varint_Client.RxStats'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'skip_varint_Client.RxStats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_varint_Client.RxStats'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.RxStats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_length_delimited_Client.RxStats'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'skip_length_delimited_Client.RxStats'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_length_delimited_Client.RxStats'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Client.RxStats'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_group_Client.RxStats'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Client.RxStats'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_32_Client.RxStats'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.RxStats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_64_Client.RxStats'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Client.RxStats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'decode_msg_Client.RxStats.ChainRSSI'(Bin, TrUserData) -> 'dfp_read_field_def_Client.RxStats.ChainRSSI'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Client.RxStats.ChainRSSI'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Client.RxStats.ChainRSSI_chain'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Client.RxStats.ChainRSSI'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Client.RxStats.ChainRSSI_ht'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Client.RxStats.ChainRSSI'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Client.RxStats.ChainRSSI_rssi'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Client.RxStats.ChainRSSI'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'Client.RxStats.ChainRSSI'{chain = F@_1, ht = F@_2, rssi = F@_3};
'dfp_read_field_def_Client.RxStats.ChainRSSI'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_Client.RxStats.ChainRSSI'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_Client.RxStats.ChainRSSI'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_Client.RxStats.ChainRSSI'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_Client.RxStats.ChainRSSI'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Client.RxStats.ChainRSSI_chain'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> 'd_field_Client.RxStats.ChainRSSI_ht'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> 'd_field_Client.RxStats.ChainRSSI_rssi'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Client.RxStats.ChainRSSI'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_Client.RxStats.ChainRSSI'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_Client.RxStats.ChainRSSI'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_Client.RxStats.ChainRSSI'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_Client.RxStats.ChainRSSI'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_Client.RxStats.ChainRSSI'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'Client.RxStats.ChainRSSI'{chain = F@_1, ht = F@_2, rssi = F@_3}.

'd_field_Client.RxStats.ChainRSSI_chain'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Client.RxStats.ChainRSSI_chain'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Client.RxStats.ChainRSSI_chain'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats.ChainRSSI'(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

'd_field_Client.RxStats.ChainRSSI_ht'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Client.RxStats.ChainRSSI_ht'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Client.RxStats.ChainRSSI_ht'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats.ChainRSSI'(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

'd_field_Client.RxStats.ChainRSSI_rssi'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Client.RxStats.ChainRSSI_rssi'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Client.RxStats.ChainRSSI_rssi'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.RxStats.ChainRSSI'(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

'skip_varint_Client.RxStats.ChainRSSI'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_Client.RxStats.ChainRSSI'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_Client.RxStats.ChainRSSI'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Client.RxStats.ChainRSSI'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_Client.RxStats.ChainRSSI'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_Client.RxStats.ChainRSSI'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_Client.RxStats.ChainRSSI'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Client.RxStats.ChainRSSI'(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

'skip_group_Client.RxStats.ChainRSSI'(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Client.RxStats.ChainRSSI'(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_32_Client.RxStats.ChainRSSI'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Client.RxStats.ChainRSSI'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_64_Client.RxStats.ChainRSSI'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Client.RxStats.ChainRSSI'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_Client.TxStats'(Bin, TrUserData) ->
    'dfp_read_field_def_Client.TxStats'(Bin,
                                        0,
                                        0,
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        id(undefined, TrUserData),
                                        TrUserData).

'dfp_read_field_def_Client.TxStats'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'd_field_Client.TxStats_mcs'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'dfp_read_field_def_Client.TxStats'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'd_field_Client.TxStats_nss'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'dfp_read_field_def_Client.TxStats'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'd_field_Client.TxStats_bw'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'dfp_read_field_def_Client.TxStats'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'd_field_Client.TxStats_bytes'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'dfp_read_field_def_Client.TxStats'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'd_field_Client.TxStats_msdus'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'dfp_read_field_def_Client.TxStats'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'd_field_Client.TxStats_mpdus'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'dfp_read_field_def_Client.TxStats'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'd_field_Client.TxStats_ppdus'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'dfp_read_field_def_Client.TxStats'(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'd_field_Client.TxStats_retries'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'dfp_read_field_def_Client.TxStats'(<<72, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'd_field_Client.TxStats_errors'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'dfp_read_field_def_Client.TxStats'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) -> #'Client.TxStats'{mcs = F@_1, nss = F@_2, bw = F@_3, bytes = F@_4, msdus = F@_5, mpdus = F@_6, ppdus = F@_7, retries = F@_8, errors = F@_9};
'dfp_read_field_def_Client.TxStats'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'dg_read_field_def_Client.TxStats'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

'dg_read_field_def_Client.TxStats'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_Client.TxStats'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'dg_read_field_def_Client.TxStats'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Client.TxStats_mcs'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        16 -> 'd_field_Client.TxStats_nss'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        24 -> 'd_field_Client.TxStats_bw'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        32 -> 'd_field_Client.TxStats_bytes'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        40 -> 'd_field_Client.TxStats_msdus'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        48 -> 'd_field_Client.TxStats_mpdus'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        56 -> 'd_field_Client.TxStats_ppdus'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        64 -> 'd_field_Client.TxStats_retries'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        72 -> 'd_field_Client.TxStats_errors'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Client.TxStats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                1 -> 'skip_64_Client.TxStats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                2 -> 'skip_length_delimited_Client.TxStats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                3 -> 'skip_group_Client.TxStats'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                5 -> 'skip_32_Client.TxStats'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData)
            end
    end;
'dg_read_field_def_Client.TxStats'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) -> #'Client.TxStats'{mcs = F@_1, nss = F@_2, bw = F@_3, bytes = F@_4, msdus = F@_5, mpdus = F@_6, ppdus = F@_7, retries = F@_8, errors = F@_9}.

'd_field_Client.TxStats_mcs'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    'd_field_Client.TxStats_mcs'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'd_field_Client.TxStats_mcs'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TxStats'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

'd_field_Client.TxStats_nss'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    'd_field_Client.TxStats_nss'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'd_field_Client.TxStats_nss'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TxStats'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

'd_field_Client.TxStats_bw'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    'd_field_Client.TxStats_bw'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'd_field_Client.TxStats_bw'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TxStats'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

'd_field_Client.TxStats_bytes'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    'd_field_Client.TxStats_bytes'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'd_field_Client.TxStats_bytes'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

'd_field_Client.TxStats_msdus'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    'd_field_Client.TxStats_msdus'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'd_field_Client.TxStats_msdus'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, TrUserData).

'd_field_Client.TxStats_mpdus'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    'd_field_Client.TxStats_mpdus'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'd_field_Client.TxStats_mpdus'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, TrUserData).

'd_field_Client.TxStats_ppdus'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    'd_field_Client.TxStats_ppdus'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'd_field_Client.TxStats_ppdus'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, TrUserData).

'd_field_Client.TxStats_retries'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    'd_field_Client.TxStats_retries'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'd_field_Client.TxStats_retries'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, TrUserData).

'd_field_Client.TxStats_errors'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    'd_field_Client.TxStats_errors'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'd_field_Client.TxStats_errors'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TxStats'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, TrUserData).

'skip_varint_Client.TxStats'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'skip_varint_Client.TxStats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'skip_varint_Client.TxStats'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'dfp_read_field_def_Client.TxStats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

'skip_length_delimited_Client.TxStats'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    'skip_length_delimited_Client.TxStats'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
'skip_length_delimited_Client.TxStats'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Client.TxStats'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

'skip_group_Client.TxStats'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Client.TxStats'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

'skip_32_Client.TxStats'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'dfp_read_field_def_Client.TxStats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

'skip_64_Client.TxStats'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> 'dfp_read_field_def_Client.TxStats'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

'decode_msg_Client.TidStats'(Bin, TrUserData) -> 'dfp_read_field_def_Client.TidStats'(Bin, 0, 0, id([], TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Client.TidStats'(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'd_field_Client.TidStats_sojourn'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_Client.TidStats'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'd_field_Client.TidStats_offset_ms'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_Client.TidStats'(<<>>, 0, 0, R1, F@_2, TrUserData) -> #'Client.TidStats'{sojourn = lists_reverse(R1, TrUserData), offset_ms = F@_2};
'dfp_read_field_def_Client.TidStats'(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_Client.TidStats'(Other, Z1, Z2, F@_1, F@_2, TrUserData).

'dg_read_field_def_Client.TidStats'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_Client.TidStats'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_Client.TidStats'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        34 -> 'd_field_Client.TidStats_sojourn'(Rest, 0, 0, F@_1, F@_2, TrUserData);
        40 -> 'd_field_Client.TidStats_offset_ms'(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Client.TidStats'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_Client.TidStats'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_Client.TidStats'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_Client.TidStats'(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_Client.TidStats'(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_Client.TidStats'(<<>>, 0, 0, R1, F@_2, TrUserData) -> #'Client.TidStats'{sojourn = lists_reverse(R1, TrUserData), offset_ms = F@_2}.

'd_field_Client.TidStats_sojourn'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_Client.TidStats_sojourn'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_Client.TidStats_sojourn'(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Client.TidStats.Sojourn'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_Client.TidStats'(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

'd_field_Client.TidStats_offset_ms'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_Client.TidStats_offset_ms'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_Client.TidStats_offset_ms'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TidStats'(RestF, 0, 0, F@_1, NewFValue, TrUserData).

'skip_varint_Client.TidStats'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'skip_varint_Client.TidStats'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'skip_varint_Client.TidStats'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_Client.TidStats'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'skip_length_delimited_Client.TidStats'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_Client.TidStats'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'skip_length_delimited_Client.TidStats'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Client.TidStats'(Rest2, 0, 0, F@_1, F@_2, TrUserData).

'skip_group_Client.TidStats'(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Client.TidStats'(Rest, 0, Z2, F@_1, F@_2, TrUserData).

'skip_32_Client.TidStats'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_Client.TidStats'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'skip_64_Client.TidStats'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_Client.TidStats'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'decode_msg_Client.TidStats.Sojourn'(Bin, TrUserData) ->
    'dfp_read_field_def_Client.TidStats.Sojourn'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Client.TidStats.Sojourn'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_Client.TidStats.Sojourn_ac'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_Client.TidStats.Sojourn'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_Client.TidStats.Sojourn_tid'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_Client.TidStats.Sojourn'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_Client.TidStats.Sojourn_ewma_time_ms'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_Client.TidStats.Sojourn'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_Client.TidStats.Sojourn_sum_time_ms'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_Client.TidStats.Sojourn'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_Client.TidStats.Sojourn_num_msdus'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_Client.TidStats.Sojourn'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'Client.TidStats.Sojourn'{ac = F@_1, tid = F@_2, ewma_time_ms = F@_3, sum_time_ms = F@_4, num_msdus = F@_5};
'dfp_read_field_def_Client.TidStats.Sojourn'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dg_read_field_def_Client.TidStats.Sojourn'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_Client.TidStats.Sojourn'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_Client.TidStats.Sojourn'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dg_read_field_def_Client.TidStats.Sojourn'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Client.TidStats.Sojourn_ac'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> 'd_field_Client.TidStats.Sojourn_tid'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> 'd_field_Client.TidStats.Sojourn_ewma_time_ms'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        32 -> 'd_field_Client.TidStats.Sojourn_sum_time_ms'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> 'd_field_Client.TidStats.Sojourn_num_msdus'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Client.TidStats.Sojourn'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> 'skip_64_Client.TidStats.Sojourn'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> 'skip_length_delimited_Client.TidStats.Sojourn'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> 'skip_group_Client.TidStats.Sojourn'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> 'skip_32_Client.TidStats.Sojourn'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
'dg_read_field_def_Client.TidStats.Sojourn'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'Client.TidStats.Sojourn'{ac = F@_1, tid = F@_2, ewma_time_ms = F@_3, sum_time_ms = F@_4, num_msdus = F@_5}.

'd_field_Client.TidStats.Sojourn_ac'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_Client.TidStats.Sojourn_ac'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_Client.TidStats.Sojourn_ac'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_WmmAc(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_Client.TidStats.Sojourn'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

'd_field_Client.TidStats.Sojourn_tid'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_Client.TidStats.Sojourn_tid'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_Client.TidStats.Sojourn_tid'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TidStats.Sojourn'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

'd_field_Client.TidStats.Sojourn_ewma_time_ms'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_Client.TidStats.Sojourn_ewma_time_ms'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_Client.TidStats.Sojourn_ewma_time_ms'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TidStats.Sojourn'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

'd_field_Client.TidStats.Sojourn_sum_time_ms'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_Client.TidStats.Sojourn_sum_time_ms'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_Client.TidStats.Sojourn_sum_time_ms'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TidStats.Sojourn'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

'd_field_Client.TidStats.Sojourn_num_msdus'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_Client.TidStats.Sojourn_num_msdus'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_Client.TidStats.Sojourn_num_msdus'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Client.TidStats.Sojourn'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

'skip_varint_Client.TidStats.Sojourn'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'skip_varint_Client.TidStats.Sojourn'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_Client.TidStats.Sojourn'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_Client.TidStats.Sojourn'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_Client.TidStats.Sojourn'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'skip_length_delimited_Client.TidStats.Sojourn'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_length_delimited_Client.TidStats.Sojourn'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Client.TidStats.Sojourn'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_Client.TidStats.Sojourn'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Client.TidStats.Sojourn'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_32_Client.TidStats.Sojourn'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_Client.TidStats.Sojourn'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_Client.TidStats.Sojourn'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_Client.TidStats.Sojourn'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_Client(Bin, TrUserData) ->
    dfp_read_field_def_Client(Bin,
                              0,
                              0,
                              id(undefined, TrUserData),
                              id(undefined, TrUserData),
                              id(undefined, TrUserData),
                              id(undefined, TrUserData),
                              id(undefined, TrUserData),
                              id(undefined, TrUserData),
                              id(undefined, TrUserData),
                              id(undefined, TrUserData),
                              id(undefined, TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id(undefined, TrUserData),
                              TrUserData).

dfp_read_field_def_Client(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_mac_address(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_ssid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_connected(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_connect_count(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_disconnect_count(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_connect_offset_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_disconnect_offset_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_duration_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<74, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_stats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<82, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_rx_stats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<90, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_tx_stats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<98, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_tid_stats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<104, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Client_uapsd(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Client(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, R1, R2, R3, F@_13, TrUserData) ->
    #'Client'{mac_address = F@_1, ssid = F@_2, connected = F@_3, connect_count = F@_4, disconnect_count = F@_5, connect_offset_ms = F@_6, disconnect_offset_ms = F@_7, duration_ms = F@_8, stats = F@_9, rx_stats = lists_reverse(R1, TrUserData),
              tx_stats = lists_reverse(R2, TrUserData), tid_stats = lists_reverse(R3, TrUserData), uapsd = F@_13};
dfp_read_field_def_Client(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dg_read_field_def_Client(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

dg_read_field_def_Client(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_Client(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dg_read_field_def_Client(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Client_mac_address(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        18 -> d_field_Client_ssid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        24 -> d_field_Client_connected(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        32 -> d_field_Client_connect_count(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        40 -> d_field_Client_disconnect_count(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        48 -> d_field_Client_connect_offset_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        56 -> d_field_Client_disconnect_offset_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        64 -> d_field_Client_duration_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        74 -> d_field_Client_stats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        82 -> d_field_Client_rx_stats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        90 -> d_field_Client_tx_stats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        98 -> d_field_Client_tid_stats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        104 -> d_field_Client_uapsd(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Client(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                1 -> skip_64_Client(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                2 -> skip_length_delimited_Client(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                3 -> skip_group_Client(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                5 -> skip_32_Client(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
            end
    end;
dg_read_field_def_Client(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, R1, R2, R3, F@_13, TrUserData) ->
    #'Client'{mac_address = F@_1, ssid = F@_2, connected = F@_3, connect_count = F@_4, disconnect_count = F@_5, connect_offset_ms = F@_6, disconnect_offset_ms = F@_7, duration_ms = F@_8, stats = F@_9, rx_stats = lists_reverse(R1, TrUserData),
              tx_stats = lists_reverse(R2, TrUserData), tid_stats = lists_reverse(R3, TrUserData), uapsd = F@_13}.

d_field_Client_mac_address(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_mac_address(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_mac_address(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Client(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Client_ssid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_ssid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_ssid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Client_connected(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_connected(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_connected(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Client_connect_count(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_connect_count(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_connect_count(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Client_disconnect_count(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_disconnect_count(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_disconnect_count(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Client_connect_offset_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_connect_offset_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_connect_offset_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Client_disconnect_offset_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_disconnect_offset_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_disconnect_offset_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Client_duration_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_duration_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_duration_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Client_stats(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_stats(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_stats(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Client.Stats'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Client(RestF,
                              0,
                              0,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              F@_8,
                              if Prev == undefined -> NewFValue;
                                 true -> 'merge_msg_Client.Stats'(Prev, NewFValue, TrUserData)
                              end,
                              F@_10,
                              F@_11,
                              F@_12,
                              F@_13,
                              TrUserData).

d_field_Client_rx_stats(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_rx_stats(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_rx_stats(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, Prev, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Client.RxStats'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, cons(NewFValue, Prev, TrUserData), F@_11, F@_12, F@_13, TrUserData).

d_field_Client_tx_stats(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_tx_stats(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_tx_stats(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, Prev, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Client.TxStats'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, cons(NewFValue, Prev, TrUserData), F@_12, F@_13, TrUserData).

d_field_Client_tid_stats(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_tid_stats(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_tid_stats(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, Prev, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Client.TidStats'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, cons(NewFValue, Prev, TrUserData), F@_13, TrUserData).

d_field_Client_uapsd(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Client_uapsd(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Client_uapsd(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, NewFValue, TrUserData).

skip_varint_Client(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    skip_varint_Client(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
skip_varint_Client(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Client(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_length_delimited_Client(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    skip_length_delimited_Client(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
skip_length_delimited_Client(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Client(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_group_Client(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Client(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_32_Client(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Client(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_64_Client(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Client(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

decode_msg_ClientReport(Bin, TrUserData) -> dfp_read_field_def_ClientReport(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ClientReport(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ClientReport_band(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ClientReport(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ClientReport_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ClientReport(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ClientReport_client_list(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ClientReport(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ClientReport_channel(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ClientReport(<<>>, 0, 0, F@_1, F@_2, R1, F@_4, TrUserData) -> #'ClientReport'{'band' = F@_1, timestamp_ms = F@_2, client_list = lists_reverse(R1, TrUserData), channel = F@_4};
dfp_read_field_def_ClientReport(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_ClientReport(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_ClientReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_ClientReport(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_ClientReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ClientReport_band(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_ClientReport_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_ClientReport_client_list(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_ClientReport_channel(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ClientReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_ClientReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_ClientReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_ClientReport(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_ClientReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_ClientReport(<<>>, 0, 0, F@_1, F@_2, R1, F@_4, TrUserData) -> #'ClientReport'{'band' = F@_1, timestamp_ms = F@_2, client_list = lists_reverse(R1, TrUserData), channel = F@_4}.

d_field_ClientReport_band(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ClientReport_band(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ClientReport_band(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_ClientReport(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_ClientReport_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ClientReport_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ClientReport_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ClientReport(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_ClientReport_client_list(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ClientReport_client_list(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ClientReport_client_list(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Client(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ClientReport(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, TrUserData).

d_field_ClientReport_channel(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ClientReport_channel(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ClientReport_channel(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ClientReport(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_ClientReport(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_ClientReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_ClientReport(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ClientReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_ClientReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_ClientReport(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_ClientReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ClientReport(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_ClientReport(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ClientReport(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_ClientReport(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ClientReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_ClientReport(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ClientReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_Survey.SurveySample'(Bin, TrUserData) ->
    'dfp_read_field_def_Survey.SurveySample'(Bin,
                                             0,
                                             0,
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             id(undefined, TrUserData),
                                             TrUserData).

'dfp_read_field_def_Survey.SurveySample'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_channel'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_duration_ms'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_total_count'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_sample_count'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_busy'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_busy_tx'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_busy_rx'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_busy_self'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<72, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_offset_ms'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<80, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_busy_ext'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<88, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_Survey.SurveySample_noise'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_Survey.SurveySample'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'Survey.SurveySample'{channel = F@_1, duration_ms = F@_2, total_count = F@_3, sample_count = F@_4, busy = F@_5, busy_tx = F@_6, busy_rx = F@_7, busy_self = F@_8, offset_ms = F@_9, busy_ext = F@_10, noise = F@_11};
'dfp_read_field_def_Survey.SurveySample'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dg_read_field_def_Survey.SurveySample'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'dg_read_field_def_Survey.SurveySample'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_Survey.SurveySample'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dg_read_field_def_Survey.SurveySample'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Survey.SurveySample_channel'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        16 -> 'd_field_Survey.SurveySample_duration_ms'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        24 -> 'd_field_Survey.SurveySample_total_count'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        32 -> 'd_field_Survey.SurveySample_sample_count'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        40 -> 'd_field_Survey.SurveySample_busy'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        48 -> 'd_field_Survey.SurveySample_busy_tx'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        56 -> 'd_field_Survey.SurveySample_busy_rx'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        64 -> 'd_field_Survey.SurveySample_busy_self'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        72 -> 'd_field_Survey.SurveySample_offset_ms'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        80 -> 'd_field_Survey.SurveySample_busy_ext'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        88 -> 'd_field_Survey.SurveySample_noise'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Survey.SurveySample'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                1 -> 'skip_64_Survey.SurveySample'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                2 -> 'skip_length_delimited_Survey.SurveySample'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                3 -> 'skip_group_Survey.SurveySample'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                5 -> 'skip_32_Survey.SurveySample'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
            end
    end;
'dg_read_field_def_Survey.SurveySample'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'Survey.SurveySample'{channel = F@_1, duration_ms = F@_2, total_count = F@_3, sample_count = F@_4, busy = F@_5, busy_tx = F@_6, busy_rx = F@_7, busy_self = F@_8, offset_ms = F@_9, busy_ext = F@_10, noise = F@_11}.

'd_field_Survey.SurveySample_channel'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_channel'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_channel'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Survey.SurveySample_duration_ms'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_duration_ms'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_duration_ms'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Survey.SurveySample_total_count'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_total_count'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_total_count'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Survey.SurveySample_sample_count'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_sample_count'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_sample_count'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Survey.SurveySample_busy'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_busy'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_busy'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Survey.SurveySample_busy_tx'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_busy_tx'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_busy_tx'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Survey.SurveySample_busy_rx'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_busy_rx'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_busy_rx'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_Survey.SurveySample_busy_self'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_busy_self'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_busy_self'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, TrUserData).

'd_field_Survey.SurveySample_offset_ms'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_offset_ms'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_offset_ms'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, TrUserData).

'd_field_Survey.SurveySample_busy_ext'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_busy_ext'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_busy_ext'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, F@_11, TrUserData).

'd_field_Survey.SurveySample_noise'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_Survey.SurveySample_noise'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_Survey.SurveySample_noise'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveySample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewFValue, TrUserData).

'skip_varint_Survey.SurveySample'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'skip_varint_Survey.SurveySample'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_varint_Survey.SurveySample'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Survey.SurveySample'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_length_delimited_Survey.SurveySample'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'skip_length_delimited_Survey.SurveySample'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_length_delimited_Survey.SurveySample'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Survey.SurveySample'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_group_Survey.SurveySample'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Survey.SurveySample'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_32_Survey.SurveySample'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Survey.SurveySample'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_64_Survey.SurveySample'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_Survey.SurveySample'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'decode_msg_Survey.SurveyAvg'(Bin, TrUserData) ->
    'dfp_read_field_def_Survey.SurveyAvg'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Survey.SurveyAvg'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Survey.SurveyAvg_channel'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Survey.SurveyAvg'(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Survey.SurveyAvg_busy'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Survey.SurveyAvg'(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Survey.SurveyAvg_busy_tx'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Survey.SurveyAvg'(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Survey.SurveyAvg_busy_rx'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Survey.SurveyAvg'(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Survey.SurveyAvg_busy_self'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Survey.SurveyAvg'(<<50, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Survey.SurveyAvg_busy_ext'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Survey.SurveyAvg'(<<58, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_Survey.SurveyAvg_noise'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_Survey.SurveyAvg'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #'Survey.SurveyAvg'{channel = F@_1, busy = F@_2, busy_tx = F@_3, busy_rx = F@_4, busy_self = F@_5, busy_ext = F@_6, noise = F@_7};
'dfp_read_field_def_Survey.SurveyAvg'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dg_read_field_def_Survey.SurveyAvg'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'dg_read_field_def_Survey.SurveyAvg'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_Survey.SurveyAvg'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dg_read_field_def_Survey.SurveyAvg'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Survey.SurveyAvg_channel'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        18 -> 'd_field_Survey.SurveyAvg_busy'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        26 -> 'd_field_Survey.SurveyAvg_busy_tx'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        34 -> 'd_field_Survey.SurveyAvg_busy_rx'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        42 -> 'd_field_Survey.SurveyAvg_busy_self'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        50 -> 'd_field_Survey.SurveyAvg_busy_ext'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        58 -> 'd_field_Survey.SurveyAvg_noise'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Survey.SurveyAvg'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> 'skip_64_Survey.SurveyAvg'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> 'skip_length_delimited_Survey.SurveyAvg'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> 'skip_group_Survey.SurveyAvg'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> 'skip_32_Survey.SurveyAvg'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
'dg_read_field_def_Survey.SurveyAvg'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #'Survey.SurveyAvg'{channel = F@_1, busy = F@_2, busy_tx = F@_3, busy_rx = F@_4, busy_self = F@_5, busy_ext = F@_6, noise = F@_7}.

'd_field_Survey.SurveyAvg_channel'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Survey.SurveyAvg_channel'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Survey.SurveyAvg_channel'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Survey.SurveyAvg'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_Survey.SurveyAvg_busy'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> 'd_field_Survey.SurveyAvg_busy'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Survey.SurveyAvg_busy'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_AvgType(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_Survey.SurveyAvg'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          if Prev == undefined -> NewFValue;
                                             true -> merge_msg_AvgType(Prev, NewFValue, TrUserData)
                                          end,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          TrUserData).

'd_field_Survey.SurveyAvg_busy_tx'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Survey.SurveyAvg_busy_tx'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Survey.SurveyAvg_busy_tx'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_AvgType(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_Survey.SurveyAvg'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          if Prev == undefined -> NewFValue;
                                             true -> merge_msg_AvgType(Prev, NewFValue, TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          TrUserData).

'd_field_Survey.SurveyAvg_busy_rx'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Survey.SurveyAvg_busy_rx'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Survey.SurveyAvg_busy_rx'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_AvgType(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_Survey.SurveyAvg'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          if Prev == undefined -> NewFValue;
                                             true -> merge_msg_AvgType(Prev, NewFValue, TrUserData)
                                          end,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          TrUserData).

'd_field_Survey.SurveyAvg_busy_self'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Survey.SurveyAvg_busy_self'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Survey.SurveyAvg_busy_self'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_AvgType(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_Survey.SurveyAvg'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          if Prev == undefined -> NewFValue;
                                             true -> merge_msg_AvgType(Prev, NewFValue, TrUserData)
                                          end,
                                          F@_6,
                                          F@_7,
                                          TrUserData).

'd_field_Survey.SurveyAvg_busy_ext'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Survey.SurveyAvg_busy_ext'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Survey.SurveyAvg_busy_ext'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_AvgType(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_Survey.SurveyAvg'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          if Prev == undefined -> NewFValue;
                                             true -> merge_msg_AvgType(Prev, NewFValue, TrUserData)
                                          end,
                                          F@_7,
                                          TrUserData).

'd_field_Survey.SurveyAvg_noise'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_Survey.SurveyAvg_noise'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_Survey.SurveyAvg_noise'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_AvgType(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_Survey.SurveyAvg'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          if Prev == undefined -> NewFValue;
                                             true -> merge_msg_AvgType(Prev, NewFValue, TrUserData)
                                          end,
                                          TrUserData).

'skip_varint_Survey.SurveyAvg'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'skip_varint_Survey.SurveyAvg'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_varint_Survey.SurveyAvg'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_Survey.SurveyAvg'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_length_delimited_Survey.SurveyAvg'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'skip_length_delimited_Survey.SurveyAvg'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_length_delimited_Survey.SurveyAvg'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Survey.SurveyAvg'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_group_Survey.SurveyAvg'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Survey.SurveyAvg'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_32_Survey.SurveyAvg'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_Survey.SurveyAvg'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_64_Survey.SurveyAvg'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_Survey.SurveyAvg'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_Survey(Bin, TrUserData) -> dfp_read_field_def_Survey(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Survey(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Survey_band(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Survey(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Survey_survey_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Survey(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Survey_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Survey(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Survey_survey_list(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Survey(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Survey_survey_avg(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Survey(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Survey_report_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Survey(<<>>, 0, 0, F@_1, F@_2, F@_3, R1, R2, F@_6, TrUserData) ->
    #'Survey'{'band' = F@_1, survey_type = F@_2, timestamp_ms = F@_3, survey_list = lists_reverse(R1, TrUserData), survey_avg = lists_reverse(R2, TrUserData), report_type = F@_6};
dfp_read_field_def_Survey(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_Survey(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_Survey(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 -> dg_read_field_def_Survey(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_Survey(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Survey_band(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        16 -> d_field_Survey_survey_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        24 -> d_field_Survey_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        34 -> d_field_Survey_survey_list(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        42 -> d_field_Survey_survey_avg(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        48 -> d_field_Survey_report_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Survey(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_Survey(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_Survey(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_Survey(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_Survey(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_Survey(<<>>, 0, 0, F@_1, F@_2, F@_3, R1, R2, F@_6, TrUserData) ->
    #'Survey'{'band' = F@_1, survey_type = F@_2, timestamp_ms = F@_3, survey_list = lists_reverse(R1, TrUserData), survey_avg = lists_reverse(R2, TrUserData), report_type = F@_6}.

d_field_Survey_band(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Survey_band(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Survey_band(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Survey(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_Survey_survey_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Survey_survey_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Survey_survey_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_SurveyType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Survey(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_Survey_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Survey_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Survey_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Survey(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_Survey_survey_list(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Survey_survey_list(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Survey_survey_list(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Survey.SurveySample'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Survey(RestF, 0, 0, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, F@_6, TrUserData).

d_field_Survey_survey_avg(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Survey_survey_avg(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Survey_survey_avg(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Survey.SurveyAvg'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Survey(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, cons(NewFValue, Prev, TrUserData), F@_6, TrUserData).

d_field_Survey_report_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Survey_report_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Survey_report_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ReportType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Survey(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_Survey(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_Survey(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_Survey(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_Survey(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_Survey(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> skip_length_delimited_Survey(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_Survey(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Survey(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_Survey(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Survey(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_Survey(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_Survey(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_Survey(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_Survey(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

'decode_msg_Capacity.QueueSample'(Bin, TrUserData) ->
    'dfp_read_field_def_Capacity.QueueSample'(Bin,
                                              0,
                                              0,
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              id(undefined, TrUserData),
                                              TrUserData).

'dfp_read_field_def_Capacity.QueueSample'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_Capacity.QueueSample_busy_tx'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_Capacity.QueueSample'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_Capacity.QueueSample_bytes_tx'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_Capacity.QueueSample'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_Capacity.QueueSample_sample_count'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_Capacity.QueueSample'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_Capacity.QueueSample_Vo_count'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_Capacity.QueueSample'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_Capacity.QueueSample_Vi_count'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_Capacity.QueueSample'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_Capacity.QueueSample_Be_count'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_Capacity.QueueSample'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_Capacity.QueueSample_Bk_count'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_Capacity.QueueSample'(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_Capacity.QueueSample_Bcn_count'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_Capacity.QueueSample'(<<72, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_Capacity.QueueSample_Cab_count'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_Capacity.QueueSample'(<<80, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_Capacity.QueueSample_offset_ms'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_Capacity.QueueSample'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _) ->
    #'Capacity.QueueSample'{busy_tx = F@_1, bytes_tx = F@_2, sample_count = F@_3, 'Vo_count' = F@_4, 'Vi_count' = F@_5, 'Be_count' = F@_6, 'Bk_count' = F@_7, 'Bcn_count' = F@_8, 'Cab_count' = F@_9, offset_ms = F@_10};
'dfp_read_field_def_Capacity.QueueSample'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'dg_read_field_def_Capacity.QueueSample'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'dg_read_field_def_Capacity.QueueSample'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_Capacity.QueueSample'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dg_read_field_def_Capacity.QueueSample'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Capacity.QueueSample_busy_tx'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        16 -> 'd_field_Capacity.QueueSample_bytes_tx'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        24 -> 'd_field_Capacity.QueueSample_sample_count'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        32 -> 'd_field_Capacity.QueueSample_Vo_count'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        40 -> 'd_field_Capacity.QueueSample_Vi_count'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        48 -> 'd_field_Capacity.QueueSample_Be_count'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        56 -> 'd_field_Capacity.QueueSample_Bk_count'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        64 -> 'd_field_Capacity.QueueSample_Bcn_count'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        72 -> 'd_field_Capacity.QueueSample_Cab_count'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        80 -> 'd_field_Capacity.QueueSample_offset_ms'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Capacity.QueueSample'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                1 -> 'skip_64_Capacity.QueueSample'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                2 -> 'skip_length_delimited_Capacity.QueueSample'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                3 -> 'skip_group_Capacity.QueueSample'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                5 -> 'skip_32_Capacity.QueueSample'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData)
            end
    end;
'dg_read_field_def_Capacity.QueueSample'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _) ->
    #'Capacity.QueueSample'{busy_tx = F@_1, bytes_tx = F@_2, sample_count = F@_3, 'Vo_count' = F@_4, 'Vi_count' = F@_5, 'Be_count' = F@_6, 'Bk_count' = F@_7, 'Bcn_count' = F@_8, 'Cab_count' = F@_9, offset_ms = F@_10}.

'd_field_Capacity.QueueSample_busy_tx'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_Capacity.QueueSample_busy_tx'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_Capacity.QueueSample_busy_tx'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Capacity.QueueSample'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_Capacity.QueueSample_bytes_tx'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_Capacity.QueueSample_bytes_tx'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_Capacity.QueueSample_bytes_tx'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Capacity.QueueSample'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_Capacity.QueueSample_sample_count'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_Capacity.QueueSample_sample_count'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_Capacity.QueueSample_sample_count'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Capacity.QueueSample'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_Capacity.QueueSample_Vo_count'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_Capacity.QueueSample_Vo_count'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_Capacity.QueueSample_Vo_count'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Capacity.QueueSample'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_Capacity.QueueSample_Vi_count'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_Capacity.QueueSample_Vi_count'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_Capacity.QueueSample_Vi_count'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Capacity.QueueSample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_Capacity.QueueSample_Be_count'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_Capacity.QueueSample_Be_count'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_Capacity.QueueSample_Be_count'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Capacity.QueueSample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_Capacity.QueueSample_Bk_count'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_Capacity.QueueSample_Bk_count'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_Capacity.QueueSample_Bk_count'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Capacity.QueueSample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, TrUserData).

'd_field_Capacity.QueueSample_Bcn_count'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_Capacity.QueueSample_Bcn_count'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_Capacity.QueueSample_Bcn_count'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Capacity.QueueSample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, TrUserData).

'd_field_Capacity.QueueSample_Cab_count'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_Capacity.QueueSample_Cab_count'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_Capacity.QueueSample_Cab_count'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Capacity.QueueSample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, TrUserData).

'd_field_Capacity.QueueSample_offset_ms'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_Capacity.QueueSample_offset_ms'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_Capacity.QueueSample_offset_ms'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Capacity.QueueSample'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, TrUserData).

'skip_varint_Capacity.QueueSample'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'skip_varint_Capacity.QueueSample'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'skip_varint_Capacity.QueueSample'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'dfp_read_field_def_Capacity.QueueSample'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'skip_length_delimited_Capacity.QueueSample'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'skip_length_delimited_Capacity.QueueSample'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'skip_length_delimited_Capacity.QueueSample'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Capacity.QueueSample'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'skip_group_Capacity.QueueSample'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Capacity.QueueSample'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'skip_32_Capacity.QueueSample'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'dfp_read_field_def_Capacity.QueueSample'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'skip_64_Capacity.QueueSample'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'dfp_read_field_def_Capacity.QueueSample'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

decode_msg_Capacity(Bin, TrUserData) -> dfp_read_field_def_Capacity(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_Capacity(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_Capacity_band(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Capacity(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_Capacity_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Capacity(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_Capacity_queue_list(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Capacity(<<>>, 0, 0, F@_1, F@_2, R1, TrUserData) -> #'Capacity'{'band' = F@_1, timestamp_ms = F@_2, queue_list = lists_reverse(R1, TrUserData)};
dfp_read_field_def_Capacity(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_Capacity(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_Capacity(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_Capacity(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Capacity(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Capacity_band(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_Capacity_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_Capacity_queue_list(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Capacity(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_Capacity(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_Capacity(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_Capacity(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_Capacity(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_Capacity(<<>>, 0, 0, F@_1, F@_2, R1, TrUserData) -> #'Capacity'{'band' = F@_1, timestamp_ms = F@_2, queue_list = lists_reverse(R1, TrUserData)}.

d_field_Capacity_band(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Capacity_band(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_Capacity_band(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Capacity(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_Capacity_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Capacity_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_Capacity_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Capacity(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_Capacity_queue_list(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Capacity_queue_list(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_Capacity_queue_list(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Capacity.QueueSample'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Capacity(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Capacity(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_Capacity(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_Capacity(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Capacity(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_Capacity(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_Capacity(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Capacity(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Capacity(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_Capacity(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Capacity(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_Capacity(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Capacity(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_Capacity(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Capacity(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_Device.LoadAvg'(Bin, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Device.LoadAvg'(<<9, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.LoadAvg_one'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.LoadAvg'(<<17, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.LoadAvg_five'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.LoadAvg'(<<25, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.LoadAvg_fifteen'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.LoadAvg'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'Device.LoadAvg'{one = F@_1, five = F@_2, fifteen = F@_3};
'dfp_read_field_def_Device.LoadAvg'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_Device.LoadAvg'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_Device.LoadAvg'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_Device.LoadAvg'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_Device.LoadAvg'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        9 -> 'd_field_Device.LoadAvg_one'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        17 -> 'd_field_Device.LoadAvg_five'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        25 -> 'd_field_Device.LoadAvg_fifteen'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Device.LoadAvg'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_Device.LoadAvg'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_Device.LoadAvg'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_Device.LoadAvg'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_Device.LoadAvg'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_Device.LoadAvg'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'Device.LoadAvg'{one = F@_1, five = F@_2, fifteen = F@_3}.

'd_field_Device.LoadAvg_one'(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, id(infinity, TrUserData), F@_2, F@_3, TrUserData);
'd_field_Device.LoadAvg_one'(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, id('-infinity', TrUserData), F@_2, F@_3, TrUserData);
'd_field_Device.LoadAvg_one'(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, id(nan, TrUserData), F@_2, F@_3, TrUserData);
'd_field_Device.LoadAvg_one'(<<Value:64/little-float, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, id(Value, TrUserData), F@_2, F@_3, TrUserData).

'd_field_Device.LoadAvg_five'(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, id(infinity, TrUserData), F@_3, TrUserData);
'd_field_Device.LoadAvg_five'(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, id('-infinity', TrUserData), F@_3, TrUserData);
'd_field_Device.LoadAvg_five'(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, id(nan, TrUserData), F@_3, TrUserData);
'd_field_Device.LoadAvg_five'(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, id(Value, TrUserData), F@_3, TrUserData).

'd_field_Device.LoadAvg_fifteen'(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, F@_2, id(infinity, TrUserData), TrUserData);
'd_field_Device.LoadAvg_fifteen'(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, F@_2, id('-infinity', TrUserData), TrUserData);
'd_field_Device.LoadAvg_fifteen'(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, F@_2, id(nan, TrUserData), TrUserData);
'd_field_Device.LoadAvg_fifteen'(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, F@_2, id(Value, TrUserData), TrUserData).

'skip_varint_Device.LoadAvg'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_Device.LoadAvg'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_Device.LoadAvg'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_Device.LoadAvg'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_Device.LoadAvg'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_Device.LoadAvg'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Device.LoadAvg'(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

'skip_group_Device.LoadAvg'(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Device.LoadAvg'(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_32_Device.LoadAvg'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_64_Device.LoadAvg'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.LoadAvg'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_Device.RadioTemp'(Bin, TrUserData) -> 'dfp_read_field_def_Device.RadioTemp'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Device.RadioTemp'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'd_field_Device.RadioTemp_band'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_Device.RadioTemp'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'd_field_Device.RadioTemp_value'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_Device.RadioTemp'(<<>>, 0, 0, F@_1, F@_2, _) -> #'Device.RadioTemp'{'band' = F@_1, value = F@_2};
'dfp_read_field_def_Device.RadioTemp'(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_Device.RadioTemp'(Other, Z1, Z2, F@_1, F@_2, TrUserData).

'dg_read_field_def_Device.RadioTemp'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_Device.RadioTemp'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_Device.RadioTemp'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Device.RadioTemp_band'(Rest, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_Device.RadioTemp_value'(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Device.RadioTemp'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_Device.RadioTemp'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_Device.RadioTemp'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_Device.RadioTemp'(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_Device.RadioTemp'(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_Device.RadioTemp'(<<>>, 0, 0, F@_1, F@_2, _) -> #'Device.RadioTemp'{'band' = F@_1, value = F@_2}.

'd_field_Device.RadioTemp_band'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_Device.RadioTemp_band'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_Device.RadioTemp_band'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_Device.RadioTemp'(RestF, 0, 0, NewFValue, F@_2, TrUserData).

'd_field_Device.RadioTemp_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_Device.RadioTemp_value'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_Device.RadioTemp_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_Device.RadioTemp'(RestF, 0, 0, F@_1, NewFValue, TrUserData).

'skip_varint_Device.RadioTemp'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'skip_varint_Device.RadioTemp'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'skip_varint_Device.RadioTemp'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_Device.RadioTemp'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'skip_length_delimited_Device.RadioTemp'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_Device.RadioTemp'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'skip_length_delimited_Device.RadioTemp'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Device.RadioTemp'(Rest2, 0, 0, F@_1, F@_2, TrUserData).

'skip_group_Device.RadioTemp'(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Device.RadioTemp'(Rest, 0, Z2, F@_1, F@_2, TrUserData).

'skip_32_Device.RadioTemp'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_Device.RadioTemp'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'skip_64_Device.RadioTemp'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_Device.RadioTemp'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'decode_msg_Device.Thermal'(Bin, TrUserData) -> 'dfp_read_field_def_Device.Thermal'(Bin, 0, 0, id([], TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Device.Thermal'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.Thermal_txchainmask'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.Thermal'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.Thermal_fan_rpm'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.Thermal'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.Thermal_timestamp_ms'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.Thermal'(<<>>, 0, 0, R1, F@_2, F@_3, TrUserData) -> #'Device.Thermal'{txchainmask = lists_reverse(R1, TrUserData), fan_rpm = F@_2, timestamp_ms = F@_3};
'dfp_read_field_def_Device.Thermal'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_Device.Thermal'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_Device.Thermal'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_Device.Thermal'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_Device.Thermal'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_Device.Thermal_txchainmask'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> 'd_field_Device.Thermal_fan_rpm'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> 'd_field_Device.Thermal_timestamp_ms'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Device.Thermal'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_Device.Thermal'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_Device.Thermal'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_Device.Thermal'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_Device.Thermal'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_Device.Thermal'(<<>>, 0, 0, R1, F@_2, F@_3, TrUserData) -> #'Device.Thermal'{txchainmask = lists_reverse(R1, TrUserData), fan_rpm = F@_2, timestamp_ms = F@_3}.

'd_field_Device.Thermal_txchainmask'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Device.Thermal_txchainmask'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Device.Thermal_txchainmask'(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Device.Thermal.RadioTxChainMask'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_Device.Thermal'(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), F@_2, F@_3, TrUserData).

'd_field_Device.Thermal_fan_rpm'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Device.Thermal_fan_rpm'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Device.Thermal_fan_rpm'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.Thermal'(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

'd_field_Device.Thermal_timestamp_ms'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Device.Thermal_timestamp_ms'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Device.Thermal_timestamp_ms'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.Thermal'(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

'skip_varint_Device.Thermal'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_Device.Thermal'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_Device.Thermal'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.Thermal'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_Device.Thermal'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_Device.Thermal'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_Device.Thermal'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Device.Thermal'(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

'skip_group_Device.Thermal'(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Device.Thermal'(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_32_Device.Thermal'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.Thermal'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_64_Device.Thermal'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.Thermal'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_Device.Thermal.RadioTxChainMask'(Bin, TrUserData) -> 'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'd_field_Device.Thermal.RadioTxChainMask_band'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'd_field_Device.Thermal.RadioTxChainMask_value'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(<<>>, 0, 0, F@_1, F@_2, _) -> #'Device.Thermal.RadioTxChainMask'{'band' = F@_1, value = F@_2};
'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_Device.Thermal.RadioTxChainMask'(Other, Z1, Z2, F@_1, F@_2, TrUserData).

'dg_read_field_def_Device.Thermal.RadioTxChainMask'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_Device.Thermal.RadioTxChainMask'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_Device.Thermal.RadioTxChainMask'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Device.Thermal.RadioTxChainMask_band'(Rest, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_Device.Thermal.RadioTxChainMask_value'(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Device.Thermal.RadioTxChainMask'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_Device.Thermal.RadioTxChainMask'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_Device.Thermal.RadioTxChainMask'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_Device.Thermal.RadioTxChainMask'(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_Device.Thermal.RadioTxChainMask'(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_Device.Thermal.RadioTxChainMask'(<<>>, 0, 0, F@_1, F@_2, _) -> #'Device.Thermal.RadioTxChainMask'{'band' = F@_1, value = F@_2}.

'd_field_Device.Thermal.RadioTxChainMask_band'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_Device.Thermal.RadioTxChainMask_band'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_Device.Thermal.RadioTxChainMask_band'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(RestF, 0, 0, NewFValue, F@_2, TrUserData).

'd_field_Device.Thermal.RadioTxChainMask_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_Device.Thermal.RadioTxChainMask_value'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_Device.Thermal.RadioTxChainMask_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(RestF, 0, 0, F@_1, NewFValue, TrUserData).

'skip_varint_Device.Thermal.RadioTxChainMask'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'skip_varint_Device.Thermal.RadioTxChainMask'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'skip_varint_Device.Thermal.RadioTxChainMask'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'skip_length_delimited_Device.Thermal.RadioTxChainMask'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_Device.Thermal.RadioTxChainMask'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'skip_length_delimited_Device.Thermal.RadioTxChainMask'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(Rest2, 0, 0, F@_1, F@_2, TrUserData).

'skip_group_Device.Thermal.RadioTxChainMask'(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(Rest, 0, Z2, F@_1, F@_2, TrUserData).

'skip_32_Device.Thermal.RadioTxChainMask'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'skip_64_Device.Thermal.RadioTxChainMask'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_Device.Thermal.RadioTxChainMask'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'decode_msg_Device.MemUtil'(Bin, TrUserData) -> 'dfp_read_field_def_Device.MemUtil'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Device.MemUtil'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_Device.MemUtil_mem_total'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_Device.MemUtil'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_Device.MemUtil_mem_used'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_Device.MemUtil'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_Device.MemUtil_swap_total'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_Device.MemUtil'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_Device.MemUtil_swap_used'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_Device.MemUtil'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'Device.MemUtil'{mem_total = F@_1, mem_used = F@_2, swap_total = F@_3, swap_used = F@_4};
'dfp_read_field_def_Device.MemUtil'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dg_read_field_def_Device.MemUtil'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'dg_read_field_def_Device.MemUtil'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_Device.MemUtil'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dg_read_field_def_Device.MemUtil'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Device.MemUtil_mem_total'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> 'd_field_Device.MemUtil_mem_used'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> 'd_field_Device.MemUtil_swap_total'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> 'd_field_Device.MemUtil_swap_used'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Device.MemUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> 'skip_64_Device.MemUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> 'skip_length_delimited_Device.MemUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> 'skip_group_Device.MemUtil'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> 'skip_32_Device.MemUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
'dg_read_field_def_Device.MemUtil'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'Device.MemUtil'{mem_total = F@_1, mem_used = F@_2, swap_total = F@_3, swap_used = F@_4}.

'd_field_Device.MemUtil_mem_total'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_Device.MemUtil_mem_total'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_Device.MemUtil_mem_total'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.MemUtil'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

'd_field_Device.MemUtil_mem_used'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_Device.MemUtil_mem_used'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_Device.MemUtil_mem_used'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.MemUtil'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

'd_field_Device.MemUtil_swap_total'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_Device.MemUtil_swap_total'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_Device.MemUtil_swap_total'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.MemUtil'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, TrUserData).

'd_field_Device.MemUtil_swap_used'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_Device.MemUtil_swap_used'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_Device.MemUtil_swap_used'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.MemUtil'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, TrUserData).

'skip_varint_Device.MemUtil'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'skip_varint_Device.MemUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_Device.MemUtil'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_Device.MemUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_length_delimited_Device.MemUtil'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'skip_length_delimited_Device.MemUtil'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_length_delimited_Device.MemUtil'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Device.MemUtil'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_group_Device.MemUtil'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Device.MemUtil'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_32_Device.MemUtil'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_Device.MemUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_64_Device.MemUtil'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_Device.MemUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_Device.FsUtil'(Bin, TrUserData) -> 'dfp_read_field_def_Device.FsUtil'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Device.FsUtil'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.FsUtil_fs_type'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.FsUtil'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.FsUtil_fs_total'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.FsUtil'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.FsUtil_fs_used'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.FsUtil'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'Device.FsUtil'{fs_type = F@_1, fs_total = F@_2, fs_used = F@_3};
'dfp_read_field_def_Device.FsUtil'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_Device.FsUtil'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_Device.FsUtil'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_Device.FsUtil'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_Device.FsUtil'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Device.FsUtil_fs_type'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> 'd_field_Device.FsUtil_fs_total'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> 'd_field_Device.FsUtil_fs_used'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Device.FsUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_Device.FsUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_Device.FsUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_Device.FsUtil'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_Device.FsUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_Device.FsUtil'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'Device.FsUtil'{fs_type = F@_1, fs_total = F@_2, fs_used = F@_3}.

'd_field_Device.FsUtil_fs_type'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Device.FsUtil_fs_type'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Device.FsUtil_fs_type'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_FsType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_Device.FsUtil'(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

'd_field_Device.FsUtil_fs_total'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Device.FsUtil_fs_total'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Device.FsUtil_fs_total'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.FsUtil'(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

'd_field_Device.FsUtil_fs_used'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Device.FsUtil_fs_used'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Device.FsUtil_fs_used'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.FsUtil'(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

'skip_varint_Device.FsUtil'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_Device.FsUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_Device.FsUtil'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.FsUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_Device.FsUtil'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_Device.FsUtil'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_Device.FsUtil'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Device.FsUtil'(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

'skip_group_Device.FsUtil'(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Device.FsUtil'(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_32_Device.FsUtil'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.FsUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_64_Device.FsUtil'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.FsUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_Device.CpuUtil'(Bin, TrUserData) -> 'dfp_read_field_def_Device.CpuUtil'(Bin, 0, 0, id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Device.CpuUtil'(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> 'd_field_Device.CpuUtil_cpu_util'(Rest, Z1, Z2, F@_1, TrUserData);
'dfp_read_field_def_Device.CpuUtil'(<<>>, 0, 0, F@_1, _) -> #'Device.CpuUtil'{cpu_util = F@_1};
'dfp_read_field_def_Device.CpuUtil'(Other, Z1, Z2, F@_1, TrUserData) -> 'dg_read_field_def_Device.CpuUtil'(Other, Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_Device.CpuUtil'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_Device.CpuUtil'(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
'dg_read_field_def_Device.CpuUtil'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Device.CpuUtil_cpu_util'(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Device.CpuUtil'(Rest, 0, 0, F@_1, TrUserData);
                1 -> 'skip_64_Device.CpuUtil'(Rest, 0, 0, F@_1, TrUserData);
                2 -> 'skip_length_delimited_Device.CpuUtil'(Rest, 0, 0, F@_1, TrUserData);
                3 -> 'skip_group_Device.CpuUtil'(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> 'skip_32_Device.CpuUtil'(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_Device.CpuUtil'(<<>>, 0, 0, F@_1, _) -> #'Device.CpuUtil'{cpu_util = F@_1}.

'd_field_Device.CpuUtil_cpu_util'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> 'd_field_Device.CpuUtil_cpu_util'(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
'd_field_Device.CpuUtil_cpu_util'(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.CpuUtil'(RestF, 0, 0, NewFValue, TrUserData).

'skip_varint_Device.CpuUtil'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> 'skip_varint_Device.CpuUtil'(Rest, Z1, Z2, F@_1, TrUserData);
'skip_varint_Device.CpuUtil'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> 'dfp_read_field_def_Device.CpuUtil'(Rest, Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_Device.CpuUtil'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> 'skip_length_delimited_Device.CpuUtil'(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
'skip_length_delimited_Device.CpuUtil'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Device.CpuUtil'(Rest2, 0, 0, F@_1, TrUserData).

'skip_group_Device.CpuUtil'(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Device.CpuUtil'(Rest, 0, Z2, F@_1, TrUserData).

'skip_32_Device.CpuUtil'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> 'dfp_read_field_def_Device.CpuUtil'(Rest, Z1, Z2, F@_1, TrUserData).

'skip_64_Device.CpuUtil'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> 'dfp_read_field_def_Device.CpuUtil'(Rest, Z1, Z2, F@_1, TrUserData).

'decode_msg_Device.PerProcessUtil'(Bin, TrUserData) -> 'dfp_read_field_def_Device.PerProcessUtil'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_Device.PerProcessUtil'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.PerProcessUtil_pid'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.PerProcessUtil'(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.PerProcessUtil_cmd'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.PerProcessUtil'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_Device.PerProcessUtil_util'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_Device.PerProcessUtil'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'Device.PerProcessUtil'{pid = F@_1, cmd = F@_2, util = F@_3};
'dfp_read_field_def_Device.PerProcessUtil'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_Device.PerProcessUtil'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_Device.PerProcessUtil'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_Device.PerProcessUtil'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_Device.PerProcessUtil'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_Device.PerProcessUtil_pid'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> 'd_field_Device.PerProcessUtil_cmd'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> 'd_field_Device.PerProcessUtil_util'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_Device.PerProcessUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_Device.PerProcessUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_Device.PerProcessUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_Device.PerProcessUtil'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_Device.PerProcessUtil'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_Device.PerProcessUtil'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'Device.PerProcessUtil'{pid = F@_1, cmd = F@_2, util = F@_3}.

'd_field_Device.PerProcessUtil_pid'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Device.PerProcessUtil_pid'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Device.PerProcessUtil_pid'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.PerProcessUtil'(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

'd_field_Device.PerProcessUtil_cmd'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Device.PerProcessUtil_cmd'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Device.PerProcessUtil_cmd'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_Device.PerProcessUtil'(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

'd_field_Device.PerProcessUtil_util'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_Device.PerProcessUtil_util'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_Device.PerProcessUtil_util'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_Device.PerProcessUtil'(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

'skip_varint_Device.PerProcessUtil'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_Device.PerProcessUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_Device.PerProcessUtil'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.PerProcessUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_Device.PerProcessUtil'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_Device.PerProcessUtil'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_Device.PerProcessUtil'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Device.PerProcessUtil'(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

'skip_group_Device.PerProcessUtil'(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Device.PerProcessUtil'(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_32_Device.PerProcessUtil'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.PerProcessUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_64_Device.PerProcessUtil'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_Device.PerProcessUtil'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_Device(Bin, TrUserData) ->
    dfp_read_field_def_Device(Bin,
                              0,
                              0,
                              id(undefined, TrUserData),
                              id([], TrUserData),
                              id(undefined, TrUserData),
                              id(undefined, TrUserData),
                              id([], TrUserData),
                              id(undefined, TrUserData),
                              id([], TrUserData),
                              id(undefined, TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              TrUserData).

dfp_read_field_def_Device(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_Device_load(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Device(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_Device_radio_temp(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Device(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_Device_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Device(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_Device_uptime(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Device(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_Device_thermal_stats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Device(<<50, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_Device_mem_util(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Device(<<58, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_Device_fs_util(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Device(<<66, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_Device_cpuUtil(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Device(<<74, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_Device_ps_cpu_util(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Device(<<82, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_Device_ps_mem_util(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Device(<<>>, 0, 0, F@_1, R1, F@_3, F@_4, R2, F@_6, R3, F@_8, R4, R5, TrUserData) ->
    #'Device'{load = F@_1, radio_temp = lists_reverse(R1, TrUserData), timestamp_ms = F@_3, uptime = F@_4, thermal_stats = lists_reverse(R2, TrUserData), mem_util = F@_6, fs_util = lists_reverse(R3, TrUserData), cpuUtil = F@_8,
              ps_cpu_util = lists_reverse(R4, TrUserData), ps_mem_util = lists_reverse(R5, TrUserData)};
dfp_read_field_def_Device(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> dg_read_field_def_Device(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

dg_read_field_def_Device(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_Device(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dg_read_field_def_Device(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Device_load(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        18 -> d_field_Device_radio_temp(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        24 -> d_field_Device_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        32 -> d_field_Device_uptime(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        42 -> d_field_Device_thermal_stats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        50 -> d_field_Device_mem_util(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        58 -> d_field_Device_fs_util(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        66 -> d_field_Device_cpuUtil(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        74 -> d_field_Device_ps_cpu_util(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        82 -> d_field_Device_ps_mem_util(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Device(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                1 -> skip_64_Device(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                2 -> skip_length_delimited_Device(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                3 -> skip_group_Device(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                5 -> skip_32_Device(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData)
            end
    end;
dg_read_field_def_Device(<<>>, 0, 0, F@_1, R1, F@_3, F@_4, R2, F@_6, R3, F@_8, R4, R5, TrUserData) ->
    #'Device'{load = F@_1, radio_temp = lists_reverse(R1, TrUserData), timestamp_ms = F@_3, uptime = F@_4, thermal_stats = lists_reverse(R2, TrUserData), mem_util = F@_6, fs_util = lists_reverse(R3, TrUserData), cpuUtil = F@_8,
              ps_cpu_util = lists_reverse(R4, TrUserData), ps_mem_util = lists_reverse(R5, TrUserData)}.

d_field_Device_load(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_Device_load(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Device_load(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Device.LoadAvg'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Device(RestF,
                              0,
                              0,
                              if Prev == undefined -> NewFValue;
                                 true -> 'merge_msg_Device.LoadAvg'(Prev, NewFValue, TrUserData)
                              end,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              F@_8,
                              F@_9,
                              F@_10,
                              TrUserData).

d_field_Device_radio_temp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_Device_radio_temp(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Device_radio_temp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Device.RadioTemp'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Device(RestF, 0, 0, F@_1, cons(NewFValue, Prev, TrUserData), F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_Device_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_Device_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Device_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Device(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_Device_uptime(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_Device_uptime(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Device_uptime(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_Device(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_Device_thermal_stats(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_Device_thermal_stats(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Device_thermal_stats(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Device.Thermal'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Device(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, cons(NewFValue, Prev, TrUserData), F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_Device_mem_util(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_Device_mem_util(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Device_mem_util(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Device.MemUtil'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Device(RestF,
                              0,
                              0,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              if Prev == undefined -> NewFValue;
                                 true -> 'merge_msg_Device.MemUtil'(Prev, NewFValue, TrUserData)
                              end,
                              F@_7,
                              F@_8,
                              F@_9,
                              F@_10,
                              TrUserData).

d_field_Device_fs_util(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_Device_fs_util(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Device_fs_util(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Device.FsUtil'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Device(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, cons(NewFValue, Prev, TrUserData), F@_8, F@_9, F@_10, TrUserData).

d_field_Device_cpuUtil(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_Device_cpuUtil(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Device_cpuUtil(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Device.CpuUtil'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Device(RestF,
                              0,
                              0,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              if Prev == undefined -> NewFValue;
                                 true -> 'merge_msg_Device.CpuUtil'(Prev, NewFValue, TrUserData)
                              end,
                              F@_9,
                              F@_10,
                              TrUserData).

d_field_Device_ps_cpu_util(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_Device_ps_cpu_util(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Device_ps_cpu_util(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Device.PerProcessUtil'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Device(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, cons(NewFValue, Prev, TrUserData), F@_10, TrUserData).

d_field_Device_ps_mem_util(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_Device_ps_mem_util(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Device_ps_mem_util(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_Device.PerProcessUtil'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Device(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Device(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> skip_varint_Device(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_varint_Device(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> dfp_read_field_def_Device(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

skip_length_delimited_Device(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    skip_length_delimited_Device(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_length_delimited_Device(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Device(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

skip_group_Device(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Device(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

skip_32_Device(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> dfp_read_field_def_Device(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

skip_64_Device(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> dfp_read_field_def_Device(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'decode_msg_BSClient.BSEvent'(Bin, TrUserData) ->
    'dfp_read_field_def_BSClient.BSEvent'(Bin,
                                          0,
                                          0,
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          TrUserData).

'dfp_read_field_def_BSClient.BSEvent'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_type'(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    F@_8,
                                    F@_9,
                                    F@_10,
                                    F@_11,
                                    F@_12,
                                    F@_13,
                                    F@_14,
                                    F@_15,
                                    F@_16,
                                    F@_17,
                                    F@_18,
                                    F@_19,
                                    F@_20,
                                    F@_21,
                                    F@_22,
                                    F@_23,
                                    F@_24,
                                    F@_25,
                                    F@_26,
                                    F@_27,
                                    F@_28,
                                    F@_29,
                                    F@_30,
                                    F@_31,
                                    TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_offset_ms'(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         F@_11,
                                         F@_12,
                                         F@_13,
                                         F@_14,
                                         F@_15,
                                         F@_16,
                                         F@_17,
                                         F@_18,
                                         F@_19,
                                         F@_20,
                                         F@_21,
                                         F@_22,
                                         F@_23,
                                         F@_24,
                                         F@_25,
                                         F@_26,
                                         F@_27,
                                         F@_28,
                                         F@_29,
                                         F@_30,
                                         F@_31,
                                         TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_rssi'(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    F@_8,
                                    F@_9,
                                    F@_10,
                                    F@_11,
                                    F@_12,
                                    F@_13,
                                    F@_14,
                                    F@_15,
                                    F@_16,
                                    F@_17,
                                    F@_18,
                                    F@_19,
                                    F@_20,
                                    F@_21,
                                    F@_22,
                                    F@_23,
                                    F@_24,
                                    F@_25,
                                    F@_26,
                                    F@_27,
                                    F@_28,
                                    F@_29,
                                    F@_30,
                                    F@_31,
                                    TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_probe_bcast'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_probe_blocked'(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             F@_6,
                                             F@_7,
                                             F@_8,
                                             F@_9,
                                             F@_10,
                                             F@_11,
                                             F@_12,
                                             F@_13,
                                             F@_14,
                                             F@_15,
                                             F@_16,
                                             F@_17,
                                             F@_18,
                                             F@_19,
                                             F@_20,
                                             F@_21,
                                             F@_22,
                                             F@_23,
                                             F@_24,
                                             F@_25,
                                             F@_26,
                                             F@_27,
                                             F@_28,
                                             F@_29,
                                             F@_30,
                                             F@_31,
                                             TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_disconnect_src'(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              F@_12,
                                              F@_13,
                                              F@_14,
                                              F@_15,
                                              F@_16,
                                              F@_17,
                                              F@_18,
                                              F@_19,
                                              F@_20,
                                              F@_21,
                                              F@_22,
                                              F@_23,
                                              F@_24,
                                              F@_25,
                                              F@_26,
                                              F@_27,
                                              F@_28,
                                              F@_29,
                                              F@_30,
                                              F@_31,
                                              TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_disconnect_type'(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               F@_8,
                                               F@_9,
                                               F@_10,
                                               F@_11,
                                               F@_12,
                                               F@_13,
                                               F@_14,
                                               F@_15,
                                               F@_16,
                                               F@_17,
                                               F@_18,
                                               F@_19,
                                               F@_20,
                                               F@_21,
                                               F@_22,
                                               F@_23,
                                               F@_24,
                                               F@_25,
                                               F@_26,
                                               F@_27,
                                               F@_28,
                                               F@_29,
                                               F@_30,
                                               F@_31,
                                               TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_disconnect_reason'(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 F@_12,
                                                 F@_13,
                                                 F@_14,
                                                 F@_15,
                                                 F@_16,
                                                 F@_17,
                                                 F@_18,
                                                 F@_19,
                                                 F@_20,
                                                 F@_21,
                                                 F@_22,
                                                 F@_23,
                                                 F@_24,
                                                 F@_25,
                                                 F@_26,
                                                 F@_27,
                                                 F@_28,
                                                 F@_29,
                                                 F@_30,
                                                 F@_31,
                                                 TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<72, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_backoff_enabled'(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               F@_8,
                                               F@_9,
                                               F@_10,
                                               F@_11,
                                               F@_12,
                                               F@_13,
                                               F@_14,
                                               F@_15,
                                               F@_16,
                                               F@_17,
                                               F@_18,
                                               F@_19,
                                               F@_20,
                                               F@_21,
                                               F@_22,
                                               F@_23,
                                               F@_24,
                                               F@_25,
                                               F@_26,
                                               F@_27,
                                               F@_28,
                                               F@_29,
                                               F@_30,
                                               F@_31,
                                               TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<80, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_active'(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      F@_9,
                                      F@_10,
                                      F@_11,
                                      F@_12,
                                      F@_13,
                                      F@_14,
                                      F@_15,
                                      F@_16,
                                      F@_17,
                                      F@_18,
                                      F@_19,
                                      F@_20,
                                      F@_21,
                                      F@_22,
                                      F@_23,
                                      F@_24,
                                      F@_25,
                                      F@_26,
                                      F@_27,
                                      F@_28,
                                      F@_29,
                                      F@_30,
                                      F@_31,
                                      TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<88, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_rejected'(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        F@_9,
                                        F@_10,
                                        F@_11,
                                        F@_12,
                                        F@_13,
                                        F@_14,
                                        F@_15,
                                        F@_16,
                                        F@_17,
                                        F@_18,
                                        F@_19,
                                        F@_20,
                                        F@_21,
                                        F@_22,
                                        F@_23,
                                        F@_24,
                                        F@_25,
                                        F@_26,
                                        F@_27,
                                        F@_28,
                                        F@_29,
                                        F@_30,
                                        F@_31,
                                        TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<96, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_is_BTM_supported'(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                F@_12,
                                                F@_13,
                                                F@_14,
                                                F@_15,
                                                F@_16,
                                                F@_17,
                                                F@_18,
                                                F@_19,
                                                F@_20,
                                                F@_21,
                                                F@_22,
                                                F@_23,
                                                F@_24,
                                                F@_25,
                                                F@_26,
                                                F@_27,
                                                F@_28,
                                                F@_29,
                                                F@_30,
                                                F@_31,
                                                TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<104, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_is_RRM_supported'(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                F@_12,
                                                F@_13,
                                                F@_14,
                                                F@_15,
                                                F@_16,
                                                F@_17,
                                                F@_18,
                                                F@_19,
                                                F@_20,
                                                F@_21,
                                                F@_22,
                                                F@_23,
                                                F@_24,
                                                F@_25,
                                                F@_26,
                                                F@_27,
                                                F@_28,
                                                F@_29,
                                                F@_30,
                                                F@_31,
                                                TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<112, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_max_chwidth'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<120, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_max_streams'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<128, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_phy_mode'(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        F@_9,
                                        F@_10,
                                        F@_11,
                                        F@_12,
                                        F@_13,
                                        F@_14,
                                        F@_15,
                                        F@_16,
                                        F@_17,
                                        F@_18,
                                        F@_19,
                                        F@_20,
                                        F@_21,
                                        F@_22,
                                        F@_23,
                                        F@_24,
                                        F@_25,
                                        F@_26,
                                        F@_27,
                                        F@_28,
                                        F@_29,
                                        F@_30,
                                        F@_31,
                                        TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<136, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_max_mcs'(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       F@_9,
                                       F@_10,
                                       F@_11,
                                       F@_12,
                                       F@_13,
                                       F@_14,
                                       F@_15,
                                       F@_16,
                                       F@_17,
                                       F@_18,
                                       F@_19,
                                       F@_20,
                                       F@_21,
                                       F@_22,
                                       F@_23,
                                       F@_24,
                                       F@_25,
                                       F@_26,
                                       F@_27,
                                       F@_28,
                                       F@_29,
                                       F@_30,
                                       F@_31,
                                       TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<144, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_max_txpower'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<152, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_is_static_smps'(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              F@_12,
                                              F@_13,
                                              F@_14,
                                              F@_15,
                                              F@_16,
                                              F@_17,
                                              F@_18,
                                              F@_19,
                                              F@_20,
                                              F@_21,
                                              F@_22,
                                              F@_23,
                                              F@_24,
                                              F@_25,
                                              F@_26,
                                              F@_27,
                                              F@_28,
                                              F@_29,
                                              F@_30,
                                              F@_31,
                                              TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<160, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_is_mu_mimo_supported'(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    F@_13,
                                                    F@_14,
                                                    F@_15,
                                                    F@_16,
                                                    F@_17,
                                                    F@_18,
                                                    F@_19,
                                                    F@_20,
                                                    F@_21,
                                                    F@_22,
                                                    F@_23,
                                                    F@_24,
                                                    F@_25,
                                                    F@_26,
                                                    F@_27,
                                                    F@_28,
                                                    F@_29,
                                                    F@_30,
                                                    F@_31,
                                                    TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<168, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_band_cap_2G'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<176, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_band_cap_5G'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<184, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_rrm_caps_link_meas'(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  F@_11,
                                                  F@_12,
                                                  F@_13,
                                                  F@_14,
                                                  F@_15,
                                                  F@_16,
                                                  F@_17,
                                                  F@_18,
                                                  F@_19,
                                                  F@_20,
                                                  F@_21,
                                                  F@_22,
                                                  F@_23,
                                                  F@_24,
                                                  F@_25,
                                                  F@_26,
                                                  F@_27,
                                                  F@_28,
                                                  F@_29,
                                                  F@_30,
                                                  F@_31,
                                                  TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<192, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_rrm_caps_neigh_rpt'(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  F@_11,
                                                  F@_12,
                                                  F@_13,
                                                  F@_14,
                                                  F@_15,
                                                  F@_16,
                                                  F@_17,
                                                  F@_18,
                                                  F@_19,
                                                  F@_20,
                                                  F@_21,
                                                  F@_22,
                                                  F@_23,
                                                  F@_24,
                                                  F@_25,
                                                  F@_26,
                                                  F@_27,
                                                  F@_28,
                                                  F@_29,
                                                  F@_30,
                                                  F@_31,
                                                  TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<200, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_passive'(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        F@_9,
                                                        F@_10,
                                                        F@_11,
                                                        F@_12,
                                                        F@_13,
                                                        F@_14,
                                                        F@_15,
                                                        F@_16,
                                                        F@_17,
                                                        F@_18,
                                                        F@_19,
                                                        F@_20,
                                                        F@_21,
                                                        F@_22,
                                                        F@_23,
                                                        F@_24,
                                                        F@_25,
                                                        F@_26,
                                                        F@_27,
                                                        F@_28,
                                                        F@_29,
                                                        F@_30,
                                                        F@_31,
                                                        TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<208, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_active'(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       F@_6,
                                                       F@_7,
                                                       F@_8,
                                                       F@_9,
                                                       F@_10,
                                                       F@_11,
                                                       F@_12,
                                                       F@_13,
                                                       F@_14,
                                                       F@_15,
                                                       F@_16,
                                                       F@_17,
                                                       F@_18,
                                                       F@_19,
                                                       F@_20,
                                                       F@_21,
                                                       F@_22,
                                                       F@_23,
                                                       F@_24,
                                                       F@_25,
                                                       F@_26,
                                                       F@_27,
                                                       F@_28,
                                                       F@_29,
                                                       F@_30,
                                                       F@_31,
                                                       TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<216, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_table'(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      F@_12,
                                                      F@_13,
                                                      F@_14,
                                                      F@_15,
                                                      F@_16,
                                                      F@_17,
                                                      F@_18,
                                                      F@_19,
                                                      F@_20,
                                                      F@_21,
                                                      F@_22,
                                                      F@_23,
                                                      F@_24,
                                                      F@_25,
                                                      F@_26,
                                                      F@_27,
                                                      F@_28,
                                                      F@_29,
                                                      F@_30,
                                                      F@_31,
                                                      TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<224, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_rrm_caps_lci_meas'(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 F@_12,
                                                 F@_13,
                                                 F@_14,
                                                 F@_15,
                                                 F@_16,
                                                 F@_17,
                                                 F@_18,
                                                 F@_19,
                                                 F@_20,
                                                 F@_21,
                                                 F@_22,
                                                 F@_23,
                                                 F@_24,
                                                 F@_25,
                                                 F@_26,
                                                 F@_27,
                                                 F@_28,
                                                 F@_29,
                                                 F@_30,
                                                 F@_31,
                                                 TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<232, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_rrm_caps_ftm_range_rpt'(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      F@_12,
                                                      F@_13,
                                                      F@_14,
                                                      F@_15,
                                                      F@_16,
                                                      F@_17,
                                                      F@_18,
                                                      F@_19,
                                                      F@_20,
                                                      F@_21,
                                                      F@_22,
                                                      F@_23,
                                                      F@_24,
                                                      F@_25,
                                                      F@_26,
                                                      F@_27,
                                                      F@_28,
                                                      F@_29,
                                                      F@_30,
                                                      F@_31,
                                                      TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<240, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_backoff_period'(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              F@_12,
                                              F@_13,
                                              F@_14,
                                              F@_15,
                                              F@_16,
                                              F@_17,
                                              F@_18,
                                              F@_19,
                                              F@_20,
                                              F@_21,
                                              F@_22,
                                              F@_23,
                                              F@_24,
                                              F@_25,
                                              F@_26,
                                              F@_27,
                                              F@_28,
                                              F@_29,
                                              F@_30,
                                              F@_31,
                                              TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<250, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                      F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'd_field_BSClient.BSEvent_assoc_ies'(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         F@_11,
                                         F@_12,
                                         F@_13,
                                         F@_14,
                                         F@_15,
                                         F@_16,
                                         F@_17,
                                         F@_18,
                                         F@_19,
                                         F@_20,
                                         F@_21,
                                         F@_22,
                                         F@_23,
                                         F@_24,
                                         F@_25,
                                         F@_26,
                                         F@_27,
                                         F@_28,
                                         F@_29,
                                         F@_30,
                                         F@_31,
                                         TrUserData);
'dfp_read_field_def_BSClient.BSEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
                                      F@_31, _) ->
    #'BSClient.BSEvent'{type = F@_1, offset_ms = F@_2, rssi = F@_3, probe_bcast = F@_4, probe_blocked = F@_5, disconnect_src = F@_6, disconnect_type = F@_7, disconnect_reason = F@_8, backoff_enabled = F@_9, active = F@_10, rejected = F@_11,
                        is_BTM_supported = F@_12, is_RRM_supported = F@_13, max_chwidth = F@_14, max_streams = F@_15, phy_mode = F@_16, max_mcs = F@_17, max_txpower = F@_18, is_static_smps = F@_19, is_mu_mimo_supported = F@_20, band_cap_2G = F@_21, band_cap_5G = F@_22,
                        rrm_caps_link_meas = F@_23, rrm_caps_neigh_rpt = F@_24, rrm_caps_bcn_rpt_passive = F@_25, rrm_caps_bcn_rpt_active = F@_26, rrm_caps_bcn_rpt_table = F@_27, rrm_caps_lci_meas = F@_28, rrm_caps_ftm_range_rpt = F@_29, backoff_period = F@_30,
                        assoc_ies = F@_31};
'dfp_read_field_def_BSClient.BSEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
                                      F@_30, F@_31, TrUserData) ->
    'dg_read_field_def_BSClient.BSEvent'(Other,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         F@_11,
                                         F@_12,
                                         F@_13,
                                         F@_14,
                                         F@_15,
                                         F@_16,
                                         F@_17,
                                         F@_18,
                                         F@_19,
                                         F@_20,
                                         F@_21,
                                         F@_22,
                                         F@_23,
                                         F@_24,
                                         F@_25,
                                         F@_26,
                                         F@_27,
                                         F@_28,
                                         F@_29,
                                         F@_30,
                                         F@_31,
                                         TrUserData).

'dg_read_field_def_BSClient.BSEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                     F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_BSClient.BSEvent'(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         F@_11,
                                         F@_12,
                                         F@_13,
                                         F@_14,
                                         F@_15,
                                         F@_16,
                                         F@_17,
                                         F@_18,
                                         F@_19,
                                         F@_20,
                                         F@_21,
                                         F@_22,
                                         F@_23,
                                         F@_24,
                                         F@_25,
                                         F@_26,
                                         F@_27,
                                         F@_28,
                                         F@_29,
                                         F@_30,
                                         F@_31,
                                         TrUserData);
'dg_read_field_def_BSClient.BSEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                     F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_BSClient.BSEvent_type'(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            F@_6,
                                            F@_7,
                                            F@_8,
                                            F@_9,
                                            F@_10,
                                            F@_11,
                                            F@_12,
                                            F@_13,
                                            F@_14,
                                            F@_15,
                                            F@_16,
                                            F@_17,
                                            F@_18,
                                            F@_19,
                                            F@_20,
                                            F@_21,
                                            F@_22,
                                            F@_23,
                                            F@_24,
                                            F@_25,
                                            F@_26,
                                            F@_27,
                                            F@_28,
                                            F@_29,
                                            F@_30,
                                            F@_31,
                                            TrUserData);
        16 ->
            'd_field_BSClient.BSEvent_offset_ms'(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 F@_12,
                                                 F@_13,
                                                 F@_14,
                                                 F@_15,
                                                 F@_16,
                                                 F@_17,
                                                 F@_18,
                                                 F@_19,
                                                 F@_20,
                                                 F@_21,
                                                 F@_22,
                                                 F@_23,
                                                 F@_24,
                                                 F@_25,
                                                 F@_26,
                                                 F@_27,
                                                 F@_28,
                                                 F@_29,
                                                 F@_30,
                                                 F@_31,
                                                 TrUserData);
        24 ->
            'd_field_BSClient.BSEvent_rssi'(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            F@_6,
                                            F@_7,
                                            F@_8,
                                            F@_9,
                                            F@_10,
                                            F@_11,
                                            F@_12,
                                            F@_13,
                                            F@_14,
                                            F@_15,
                                            F@_16,
                                            F@_17,
                                            F@_18,
                                            F@_19,
                                            F@_20,
                                            F@_21,
                                            F@_22,
                                            F@_23,
                                            F@_24,
                                            F@_25,
                                            F@_26,
                                            F@_27,
                                            F@_28,
                                            F@_29,
                                            F@_30,
                                            F@_31,
                                            TrUserData);
        32 ->
            'd_field_BSClient.BSEvent_probe_bcast'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   F@_13,
                                                   F@_14,
                                                   F@_15,
                                                   F@_16,
                                                   F@_17,
                                                   F@_18,
                                                   F@_19,
                                                   F@_20,
                                                   F@_21,
                                                   F@_22,
                                                   F@_23,
                                                   F@_24,
                                                   F@_25,
                                                   F@_26,
                                                   F@_27,
                                                   F@_28,
                                                   F@_29,
                                                   F@_30,
                                                   F@_31,
                                                   TrUserData);
        40 ->
            'd_field_BSClient.BSEvent_probe_blocked'(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     F@_11,
                                                     F@_12,
                                                     F@_13,
                                                     F@_14,
                                                     F@_15,
                                                     F@_16,
                                                     F@_17,
                                                     F@_18,
                                                     F@_19,
                                                     F@_20,
                                                     F@_21,
                                                     F@_22,
                                                     F@_23,
                                                     F@_24,
                                                     F@_25,
                                                     F@_26,
                                                     F@_27,
                                                     F@_28,
                                                     F@_29,
                                                     F@_30,
                                                     F@_31,
                                                     TrUserData);
        48 ->
            'd_field_BSClient.BSEvent_disconnect_src'(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      F@_12,
                                                      F@_13,
                                                      F@_14,
                                                      F@_15,
                                                      F@_16,
                                                      F@_17,
                                                      F@_18,
                                                      F@_19,
                                                      F@_20,
                                                      F@_21,
                                                      F@_22,
                                                      F@_23,
                                                      F@_24,
                                                      F@_25,
                                                      F@_26,
                                                      F@_27,
                                                      F@_28,
                                                      F@_29,
                                                      F@_30,
                                                      F@_31,
                                                      TrUserData);
        56 ->
            'd_field_BSClient.BSEvent_disconnect_type'(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       F@_6,
                                                       F@_7,
                                                       F@_8,
                                                       F@_9,
                                                       F@_10,
                                                       F@_11,
                                                       F@_12,
                                                       F@_13,
                                                       F@_14,
                                                       F@_15,
                                                       F@_16,
                                                       F@_17,
                                                       F@_18,
                                                       F@_19,
                                                       F@_20,
                                                       F@_21,
                                                       F@_22,
                                                       F@_23,
                                                       F@_24,
                                                       F@_25,
                                                       F@_26,
                                                       F@_27,
                                                       F@_28,
                                                       F@_29,
                                                       F@_30,
                                                       F@_31,
                                                       TrUserData);
        64 ->
            'd_field_BSClient.BSEvent_disconnect_reason'(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         F@_11,
                                                         F@_12,
                                                         F@_13,
                                                         F@_14,
                                                         F@_15,
                                                         F@_16,
                                                         F@_17,
                                                         F@_18,
                                                         F@_19,
                                                         F@_20,
                                                         F@_21,
                                                         F@_22,
                                                         F@_23,
                                                         F@_24,
                                                         F@_25,
                                                         F@_26,
                                                         F@_27,
                                                         F@_28,
                                                         F@_29,
                                                         F@_30,
                                                         F@_31,
                                                         TrUserData);
        72 ->
            'd_field_BSClient.BSEvent_backoff_enabled'(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       F@_6,
                                                       F@_7,
                                                       F@_8,
                                                       F@_9,
                                                       F@_10,
                                                       F@_11,
                                                       F@_12,
                                                       F@_13,
                                                       F@_14,
                                                       F@_15,
                                                       F@_16,
                                                       F@_17,
                                                       F@_18,
                                                       F@_19,
                                                       F@_20,
                                                       F@_21,
                                                       F@_22,
                                                       F@_23,
                                                       F@_24,
                                                       F@_25,
                                                       F@_26,
                                                       F@_27,
                                                       F@_28,
                                                       F@_29,
                                                       F@_30,
                                                       F@_31,
                                                       TrUserData);
        80 ->
            'd_field_BSClient.BSEvent_active'(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              F@_12,
                                              F@_13,
                                              F@_14,
                                              F@_15,
                                              F@_16,
                                              F@_17,
                                              F@_18,
                                              F@_19,
                                              F@_20,
                                              F@_21,
                                              F@_22,
                                              F@_23,
                                              F@_24,
                                              F@_25,
                                              F@_26,
                                              F@_27,
                                              F@_28,
                                              F@_29,
                                              F@_30,
                                              F@_31,
                                              TrUserData);
        88 ->
            'd_field_BSClient.BSEvent_rejected'(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                F@_12,
                                                F@_13,
                                                F@_14,
                                                F@_15,
                                                F@_16,
                                                F@_17,
                                                F@_18,
                                                F@_19,
                                                F@_20,
                                                F@_21,
                                                F@_22,
                                                F@_23,
                                                F@_24,
                                                F@_25,
                                                F@_26,
                                                F@_27,
                                                F@_28,
                                                F@_29,
                                                F@_30,
                                                F@_31,
                                                TrUserData);
        96 ->
            'd_field_BSClient.BSEvent_is_BTM_supported'(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        F@_9,
                                                        F@_10,
                                                        F@_11,
                                                        F@_12,
                                                        F@_13,
                                                        F@_14,
                                                        F@_15,
                                                        F@_16,
                                                        F@_17,
                                                        F@_18,
                                                        F@_19,
                                                        F@_20,
                                                        F@_21,
                                                        F@_22,
                                                        F@_23,
                                                        F@_24,
                                                        F@_25,
                                                        F@_26,
                                                        F@_27,
                                                        F@_28,
                                                        F@_29,
                                                        F@_30,
                                                        F@_31,
                                                        TrUserData);
        104 ->
            'd_field_BSClient.BSEvent_is_RRM_supported'(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        F@_9,
                                                        F@_10,
                                                        F@_11,
                                                        F@_12,
                                                        F@_13,
                                                        F@_14,
                                                        F@_15,
                                                        F@_16,
                                                        F@_17,
                                                        F@_18,
                                                        F@_19,
                                                        F@_20,
                                                        F@_21,
                                                        F@_22,
                                                        F@_23,
                                                        F@_24,
                                                        F@_25,
                                                        F@_26,
                                                        F@_27,
                                                        F@_28,
                                                        F@_29,
                                                        F@_30,
                                                        F@_31,
                                                        TrUserData);
        112 ->
            'd_field_BSClient.BSEvent_max_chwidth'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   F@_13,
                                                   F@_14,
                                                   F@_15,
                                                   F@_16,
                                                   F@_17,
                                                   F@_18,
                                                   F@_19,
                                                   F@_20,
                                                   F@_21,
                                                   F@_22,
                                                   F@_23,
                                                   F@_24,
                                                   F@_25,
                                                   F@_26,
                                                   F@_27,
                                                   F@_28,
                                                   F@_29,
                                                   F@_30,
                                                   F@_31,
                                                   TrUserData);
        120 ->
            'd_field_BSClient.BSEvent_max_streams'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   F@_13,
                                                   F@_14,
                                                   F@_15,
                                                   F@_16,
                                                   F@_17,
                                                   F@_18,
                                                   F@_19,
                                                   F@_20,
                                                   F@_21,
                                                   F@_22,
                                                   F@_23,
                                                   F@_24,
                                                   F@_25,
                                                   F@_26,
                                                   F@_27,
                                                   F@_28,
                                                   F@_29,
                                                   F@_30,
                                                   F@_31,
                                                   TrUserData);
        128 ->
            'd_field_BSClient.BSEvent_phy_mode'(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                F@_12,
                                                F@_13,
                                                F@_14,
                                                F@_15,
                                                F@_16,
                                                F@_17,
                                                F@_18,
                                                F@_19,
                                                F@_20,
                                                F@_21,
                                                F@_22,
                                                F@_23,
                                                F@_24,
                                                F@_25,
                                                F@_26,
                                                F@_27,
                                                F@_28,
                                                F@_29,
                                                F@_30,
                                                F@_31,
                                                TrUserData);
        136 ->
            'd_field_BSClient.BSEvent_max_mcs'(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               F@_8,
                                               F@_9,
                                               F@_10,
                                               F@_11,
                                               F@_12,
                                               F@_13,
                                               F@_14,
                                               F@_15,
                                               F@_16,
                                               F@_17,
                                               F@_18,
                                               F@_19,
                                               F@_20,
                                               F@_21,
                                               F@_22,
                                               F@_23,
                                               F@_24,
                                               F@_25,
                                               F@_26,
                                               F@_27,
                                               F@_28,
                                               F@_29,
                                               F@_30,
                                               F@_31,
                                               TrUserData);
        144 ->
            'd_field_BSClient.BSEvent_max_txpower'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   F@_13,
                                                   F@_14,
                                                   F@_15,
                                                   F@_16,
                                                   F@_17,
                                                   F@_18,
                                                   F@_19,
                                                   F@_20,
                                                   F@_21,
                                                   F@_22,
                                                   F@_23,
                                                   F@_24,
                                                   F@_25,
                                                   F@_26,
                                                   F@_27,
                                                   F@_28,
                                                   F@_29,
                                                   F@_30,
                                                   F@_31,
                                                   TrUserData);
        152 ->
            'd_field_BSClient.BSEvent_is_static_smps'(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      F@_12,
                                                      F@_13,
                                                      F@_14,
                                                      F@_15,
                                                      F@_16,
                                                      F@_17,
                                                      F@_18,
                                                      F@_19,
                                                      F@_20,
                                                      F@_21,
                                                      F@_22,
                                                      F@_23,
                                                      F@_24,
                                                      F@_25,
                                                      F@_26,
                                                      F@_27,
                                                      F@_28,
                                                      F@_29,
                                                      F@_30,
                                                      F@_31,
                                                      TrUserData);
        160 ->
            'd_field_BSClient.BSEvent_is_mu_mimo_supported'(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            F@_9,
                                                            F@_10,
                                                            F@_11,
                                                            F@_12,
                                                            F@_13,
                                                            F@_14,
                                                            F@_15,
                                                            F@_16,
                                                            F@_17,
                                                            F@_18,
                                                            F@_19,
                                                            F@_20,
                                                            F@_21,
                                                            F@_22,
                                                            F@_23,
                                                            F@_24,
                                                            F@_25,
                                                            F@_26,
                                                            F@_27,
                                                            F@_28,
                                                            F@_29,
                                                            F@_30,
                                                            F@_31,
                                                            TrUserData);
        168 ->
            'd_field_BSClient.BSEvent_band_cap_2G'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   F@_13,
                                                   F@_14,
                                                   F@_15,
                                                   F@_16,
                                                   F@_17,
                                                   F@_18,
                                                   F@_19,
                                                   F@_20,
                                                   F@_21,
                                                   F@_22,
                                                   F@_23,
                                                   F@_24,
                                                   F@_25,
                                                   F@_26,
                                                   F@_27,
                                                   F@_28,
                                                   F@_29,
                                                   F@_30,
                                                   F@_31,
                                                   TrUserData);
        176 ->
            'd_field_BSClient.BSEvent_band_cap_5G'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   F@_13,
                                                   F@_14,
                                                   F@_15,
                                                   F@_16,
                                                   F@_17,
                                                   F@_18,
                                                   F@_19,
                                                   F@_20,
                                                   F@_21,
                                                   F@_22,
                                                   F@_23,
                                                   F@_24,
                                                   F@_25,
                                                   F@_26,
                                                   F@_27,
                                                   F@_28,
                                                   F@_29,
                                                   F@_30,
                                                   F@_31,
                                                   TrUserData);
        184 ->
            'd_field_BSClient.BSEvent_rrm_caps_link_meas'(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          F@_8,
                                                          F@_9,
                                                          F@_10,
                                                          F@_11,
                                                          F@_12,
                                                          F@_13,
                                                          F@_14,
                                                          F@_15,
                                                          F@_16,
                                                          F@_17,
                                                          F@_18,
                                                          F@_19,
                                                          F@_20,
                                                          F@_21,
                                                          F@_22,
                                                          F@_23,
                                                          F@_24,
                                                          F@_25,
                                                          F@_26,
                                                          F@_27,
                                                          F@_28,
                                                          F@_29,
                                                          F@_30,
                                                          F@_31,
                                                          TrUserData);
        192 ->
            'd_field_BSClient.BSEvent_rrm_caps_neigh_rpt'(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          F@_8,
                                                          F@_9,
                                                          F@_10,
                                                          F@_11,
                                                          F@_12,
                                                          F@_13,
                                                          F@_14,
                                                          F@_15,
                                                          F@_16,
                                                          F@_17,
                                                          F@_18,
                                                          F@_19,
                                                          F@_20,
                                                          F@_21,
                                                          F@_22,
                                                          F@_23,
                                                          F@_24,
                                                          F@_25,
                                                          F@_26,
                                                          F@_27,
                                                          F@_28,
                                                          F@_29,
                                                          F@_30,
                                                          F@_31,
                                                          TrUserData);
        200 ->
            'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_passive'(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                F@_6,
                                                                F@_7,
                                                                F@_8,
                                                                F@_9,
                                                                F@_10,
                                                                F@_11,
                                                                F@_12,
                                                                F@_13,
                                                                F@_14,
                                                                F@_15,
                                                                F@_16,
                                                                F@_17,
                                                                F@_18,
                                                                F@_19,
                                                                F@_20,
                                                                F@_21,
                                                                F@_22,
                                                                F@_23,
                                                                F@_24,
                                                                F@_25,
                                                                F@_26,
                                                                F@_27,
                                                                F@_28,
                                                                F@_29,
                                                                F@_30,
                                                                F@_31,
                                                                TrUserData);
        208 ->
            'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_active'(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               F@_6,
                                                               F@_7,
                                                               F@_8,
                                                               F@_9,
                                                               F@_10,
                                                               F@_11,
                                                               F@_12,
                                                               F@_13,
                                                               F@_14,
                                                               F@_15,
                                                               F@_16,
                                                               F@_17,
                                                               F@_18,
                                                               F@_19,
                                                               F@_20,
                                                               F@_21,
                                                               F@_22,
                                                               F@_23,
                                                               F@_24,
                                                               F@_25,
                                                               F@_26,
                                                               F@_27,
                                                               F@_28,
                                                               F@_29,
                                                               F@_30,
                                                               F@_31,
                                                               TrUserData);
        216 ->
            'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_table'(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              F@_6,
                                                              F@_7,
                                                              F@_8,
                                                              F@_9,
                                                              F@_10,
                                                              F@_11,
                                                              F@_12,
                                                              F@_13,
                                                              F@_14,
                                                              F@_15,
                                                              F@_16,
                                                              F@_17,
                                                              F@_18,
                                                              F@_19,
                                                              F@_20,
                                                              F@_21,
                                                              F@_22,
                                                              F@_23,
                                                              F@_24,
                                                              F@_25,
                                                              F@_26,
                                                              F@_27,
                                                              F@_28,
                                                              F@_29,
                                                              F@_30,
                                                              F@_31,
                                                              TrUserData);
        224 ->
            'd_field_BSClient.BSEvent_rrm_caps_lci_meas'(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         F@_11,
                                                         F@_12,
                                                         F@_13,
                                                         F@_14,
                                                         F@_15,
                                                         F@_16,
                                                         F@_17,
                                                         F@_18,
                                                         F@_19,
                                                         F@_20,
                                                         F@_21,
                                                         F@_22,
                                                         F@_23,
                                                         F@_24,
                                                         F@_25,
                                                         F@_26,
                                                         F@_27,
                                                         F@_28,
                                                         F@_29,
                                                         F@_30,
                                                         F@_31,
                                                         TrUserData);
        232 ->
            'd_field_BSClient.BSEvent_rrm_caps_ftm_range_rpt'(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              F@_6,
                                                              F@_7,
                                                              F@_8,
                                                              F@_9,
                                                              F@_10,
                                                              F@_11,
                                                              F@_12,
                                                              F@_13,
                                                              F@_14,
                                                              F@_15,
                                                              F@_16,
                                                              F@_17,
                                                              F@_18,
                                                              F@_19,
                                                              F@_20,
                                                              F@_21,
                                                              F@_22,
                                                              F@_23,
                                                              F@_24,
                                                              F@_25,
                                                              F@_26,
                                                              F@_27,
                                                              F@_28,
                                                              F@_29,
                                                              F@_30,
                                                              F@_31,
                                                              TrUserData);
        240 ->
            'd_field_BSClient.BSEvent_backoff_period'(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      F@_12,
                                                      F@_13,
                                                      F@_14,
                                                      F@_15,
                                                      F@_16,
                                                      F@_17,
                                                      F@_18,
                                                      F@_19,
                                                      F@_20,
                                                      F@_21,
                                                      F@_22,
                                                      F@_23,
                                                      F@_24,
                                                      F@_25,
                                                      F@_26,
                                                      F@_27,
                                                      F@_28,
                                                      F@_29,
                                                      F@_30,
                                                      F@_31,
                                                      TrUserData);
        250 ->
            'd_field_BSClient.BSEvent_assoc_ies'(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 F@_12,
                                                 F@_13,
                                                 F@_14,
                                                 F@_15,
                                                 F@_16,
                                                 F@_17,
                                                 F@_18,
                                                 F@_19,
                                                 F@_20,
                                                 F@_21,
                                                 F@_22,
                                                 F@_23,
                                                 F@_24,
                                                 F@_25,
                                                 F@_26,
                                                 F@_27,
                                                 F@_28,
                                                 F@_29,
                                                 F@_30,
                                                 F@_31,
                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_BSClient.BSEvent'(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   F@_13,
                                                   F@_14,
                                                   F@_15,
                                                   F@_16,
                                                   F@_17,
                                                   F@_18,
                                                   F@_19,
                                                   F@_20,
                                                   F@_21,
                                                   F@_22,
                                                   F@_23,
                                                   F@_24,
                                                   F@_25,
                                                   F@_26,
                                                   F@_27,
                                                   F@_28,
                                                   F@_29,
                                                   F@_30,
                                                   F@_31,
                                                   TrUserData);
                1 ->
                    'skip_64_BSClient.BSEvent'(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               F@_8,
                                               F@_9,
                                               F@_10,
                                               F@_11,
                                               F@_12,
                                               F@_13,
                                               F@_14,
                                               F@_15,
                                               F@_16,
                                               F@_17,
                                               F@_18,
                                               F@_19,
                                               F@_20,
                                               F@_21,
                                               F@_22,
                                               F@_23,
                                               F@_24,
                                               F@_25,
                                               F@_26,
                                               F@_27,
                                               F@_28,
                                               F@_29,
                                               F@_30,
                                               F@_31,
                                               TrUserData);
                2 ->
                    'skip_length_delimited_BSClient.BSEvent'(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             F@_8,
                                                             F@_9,
                                                             F@_10,
                                                             F@_11,
                                                             F@_12,
                                                             F@_13,
                                                             F@_14,
                                                             F@_15,
                                                             F@_16,
                                                             F@_17,
                                                             F@_18,
                                                             F@_19,
                                                             F@_20,
                                                             F@_21,
                                                             F@_22,
                                                             F@_23,
                                                             F@_24,
                                                             F@_25,
                                                             F@_26,
                                                             F@_27,
                                                             F@_28,
                                                             F@_29,
                                                             F@_30,
                                                             F@_31,
                                                             TrUserData);
                3 ->
                    'skip_group_BSClient.BSEvent'(Rest,
                                                  Key bsr 3,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  F@_11,
                                                  F@_12,
                                                  F@_13,
                                                  F@_14,
                                                  F@_15,
                                                  F@_16,
                                                  F@_17,
                                                  F@_18,
                                                  F@_19,
                                                  F@_20,
                                                  F@_21,
                                                  F@_22,
                                                  F@_23,
                                                  F@_24,
                                                  F@_25,
                                                  F@_26,
                                                  F@_27,
                                                  F@_28,
                                                  F@_29,
                                                  F@_30,
                                                  F@_31,
                                                  TrUserData);
                5 ->
                    'skip_32_BSClient.BSEvent'(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               F@_8,
                                               F@_9,
                                               F@_10,
                                               F@_11,
                                               F@_12,
                                               F@_13,
                                               F@_14,
                                               F@_15,
                                               F@_16,
                                               F@_17,
                                               F@_18,
                                               F@_19,
                                               F@_20,
                                               F@_21,
                                               F@_22,
                                               F@_23,
                                               F@_24,
                                               F@_25,
                                               F@_26,
                                               F@_27,
                                               F@_28,
                                               F@_29,
                                               F@_30,
                                               F@_31,
                                               TrUserData)
            end
    end;
'dg_read_field_def_BSClient.BSEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
                                     F@_31, _) ->
    #'BSClient.BSEvent'{type = F@_1, offset_ms = F@_2, rssi = F@_3, probe_bcast = F@_4, probe_blocked = F@_5, disconnect_src = F@_6, disconnect_type = F@_7, disconnect_reason = F@_8, backoff_enabled = F@_9, active = F@_10, rejected = F@_11,
                        is_BTM_supported = F@_12, is_RRM_supported = F@_13, max_chwidth = F@_14, max_streams = F@_15, phy_mode = F@_16, max_mcs = F@_17, max_txpower = F@_18, is_static_smps = F@_19, is_mu_mimo_supported = F@_20, band_cap_2G = F@_21, band_cap_5G = F@_22,
                        rrm_caps_link_meas = F@_23, rrm_caps_neigh_rpt = F@_24, rrm_caps_bcn_rpt_passive = F@_25, rrm_caps_bcn_rpt_active = F@_26, rrm_caps_bcn_rpt_table = F@_27, rrm_caps_lci_meas = F@_28, rrm_caps_ftm_range_rpt = F@_29, backoff_period = F@_30,
                        assoc_ies = F@_31}.

'd_field_BSClient.BSEvent_type'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_type'(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    F@_8,
                                    F@_9,
                                    F@_10,
                                    F@_11,
                                    F@_12,
                                    F@_13,
                                    F@_14,
                                    F@_15,
                                    F@_16,
                                    F@_17,
                                    F@_18,
                                    F@_19,
                                    F@_20,
                                    F@_21,
                                    F@_22,
                                    F@_23,
                                    F@_24,
                                    F@_25,
                                    F@_26,
                                    F@_27,
                                    F@_28,
                                    F@_29,
                                    F@_30,
                                    F@_31,
                                    TrUserData);
'd_field_BSClient.BSEvent_type'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
                                F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_BSEventType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          NewFValue,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_offset_ms'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                     F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_offset_ms'(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         F@_11,
                                         F@_12,
                                         F@_13,
                                         F@_14,
                                         F@_15,
                                         F@_16,
                                         F@_17,
                                         F@_18,
                                         F@_19,
                                         F@_20,
                                         F@_21,
                                         F@_22,
                                         F@_23,
                                         F@_24,
                                         F@_25,
                                         F@_26,
                                         F@_27,
                                         F@_28,
                                         F@_29,
                                         F@_30,
                                         F@_31,
                                         TrUserData);
'd_field_BSClient.BSEvent_offset_ms'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                     F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          NewFValue,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_rssi'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_rssi'(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    F@_8,
                                    F@_9,
                                    F@_10,
                                    F@_11,
                                    F@_12,
                                    F@_13,
                                    F@_14,
                                    F@_15,
                                    F@_16,
                                    F@_17,
                                    F@_18,
                                    F@_19,
                                    F@_20,
                                    F@_21,
                                    F@_22,
                                    F@_23,
                                    F@_24,
                                    F@_25,
                                    F@_26,
                                    F@_27,
                                    F@_28,
                                    F@_29,
                                    F@_30,
                                    F@_31,
                                    TrUserData);
'd_field_BSClient.BSEvent_rssi'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
                                F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          NewFValue,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_probe_bcast'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                       F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_probe_bcast'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'd_field_BSClient.BSEvent_probe_bcast'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                       F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          NewFValue,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_probe_blocked'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                         F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_probe_blocked'(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             F@_6,
                                             F@_7,
                                             F@_8,
                                             F@_9,
                                             F@_10,
                                             F@_11,
                                             F@_12,
                                             F@_13,
                                             F@_14,
                                             F@_15,
                                             F@_16,
                                             F@_17,
                                             F@_18,
                                             F@_19,
                                             F@_20,
                                             F@_21,
                                             F@_22,
                                             F@_23,
                                             F@_24,
                                             F@_25,
                                             F@_26,
                                             F@_27,
                                             F@_28,
                                             F@_29,
                                             F@_30,
                                             F@_31,
                                             TrUserData);
'd_field_BSClient.BSEvent_probe_blocked'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                         F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          NewFValue,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_disconnect_src'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                          F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_disconnect_src'(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              F@_12,
                                              F@_13,
                                              F@_14,
                                              F@_15,
                                              F@_16,
                                              F@_17,
                                              F@_18,
                                              F@_19,
                                              F@_20,
                                              F@_21,
                                              F@_22,
                                              F@_23,
                                              F@_24,
                                              F@_25,
                                              F@_26,
                                              F@_27,
                                              F@_28,
                                              F@_29,
                                              F@_30,
                                              F@_31,
                                              TrUserData);
'd_field_BSClient.BSEvent_disconnect_src'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                          F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_DisconnectSrc(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          NewFValue,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_disconnect_type'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                           F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_disconnect_type'(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               F@_8,
                                               F@_9,
                                               F@_10,
                                               F@_11,
                                               F@_12,
                                               F@_13,
                                               F@_14,
                                               F@_15,
                                               F@_16,
                                               F@_17,
                                               F@_18,
                                               F@_19,
                                               F@_20,
                                               F@_21,
                                               F@_22,
                                               F@_23,
                                               F@_24,
                                               F@_25,
                                               F@_26,
                                               F@_27,
                                               F@_28,
                                               F@_29,
                                               F@_30,
                                               F@_31,
                                               TrUserData);
'd_field_BSClient.BSEvent_disconnect_type'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                           F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_DisconnectType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          NewFValue,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_disconnect_reason'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                             F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_disconnect_reason'(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 F@_12,
                                                 F@_13,
                                                 F@_14,
                                                 F@_15,
                                                 F@_16,
                                                 F@_17,
                                                 F@_18,
                                                 F@_19,
                                                 F@_20,
                                                 F@_21,
                                                 F@_22,
                                                 F@_23,
                                                 F@_24,
                                                 F@_25,
                                                 F@_26,
                                                 F@_27,
                                                 F@_28,
                                                 F@_29,
                                                 F@_30,
                                                 F@_31,
                                                 TrUserData);
'd_field_BSClient.BSEvent_disconnect_reason'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                             F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          NewFValue,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_backoff_enabled'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                           F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_backoff_enabled'(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               F@_8,
                                               F@_9,
                                               F@_10,
                                               F@_11,
                                               F@_12,
                                               F@_13,
                                               F@_14,
                                               F@_15,
                                               F@_16,
                                               F@_17,
                                               F@_18,
                                               F@_19,
                                               F@_20,
                                               F@_21,
                                               F@_22,
                                               F@_23,
                                               F@_24,
                                               F@_25,
                                               F@_26,
                                               F@_27,
                                               F@_28,
                                               F@_29,
                                               F@_30,
                                               F@_31,
                                               TrUserData);
'd_field_BSClient.BSEvent_backoff_enabled'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                           F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          NewFValue,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_active'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                  F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_active'(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      F@_9,
                                      F@_10,
                                      F@_11,
                                      F@_12,
                                      F@_13,
                                      F@_14,
                                      F@_15,
                                      F@_16,
                                      F@_17,
                                      F@_18,
                                      F@_19,
                                      F@_20,
                                      F@_21,
                                      F@_22,
                                      F@_23,
                                      F@_24,
                                      F@_25,
                                      F@_26,
                                      F@_27,
                                      F@_28,
                                      F@_29,
                                      F@_30,
                                      F@_31,
                                      TrUserData);
'd_field_BSClient.BSEvent_active'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                  F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          NewFValue,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_rejected'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                    F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_rejected'(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        F@_9,
                                        F@_10,
                                        F@_11,
                                        F@_12,
                                        F@_13,
                                        F@_14,
                                        F@_15,
                                        F@_16,
                                        F@_17,
                                        F@_18,
                                        F@_19,
                                        F@_20,
                                        F@_21,
                                        F@_22,
                                        F@_23,
                                        F@_24,
                                        F@_25,
                                        F@_26,
                                        F@_27,
                                        F@_28,
                                        F@_29,
                                        F@_30,
                                        F@_31,
                                        TrUserData);
'd_field_BSClient.BSEvent_rejected'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                    F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          NewFValue,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_is_BTM_supported'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                            F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_is_BTM_supported'(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                F@_12,
                                                F@_13,
                                                F@_14,
                                                F@_15,
                                                F@_16,
                                                F@_17,
                                                F@_18,
                                                F@_19,
                                                F@_20,
                                                F@_21,
                                                F@_22,
                                                F@_23,
                                                F@_24,
                                                F@_25,
                                                F@_26,
                                                F@_27,
                                                F@_28,
                                                F@_29,
                                                F@_30,
                                                F@_31,
                                                TrUserData);
'd_field_BSClient.BSEvent_is_BTM_supported'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                            F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          NewFValue,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_is_RRM_supported'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                            F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_is_RRM_supported'(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                F@_12,
                                                F@_13,
                                                F@_14,
                                                F@_15,
                                                F@_16,
                                                F@_17,
                                                F@_18,
                                                F@_19,
                                                F@_20,
                                                F@_21,
                                                F@_22,
                                                F@_23,
                                                F@_24,
                                                F@_25,
                                                F@_26,
                                                F@_27,
                                                F@_28,
                                                F@_29,
                                                F@_30,
                                                F@_31,
                                                TrUserData);
'd_field_BSClient.BSEvent_is_RRM_supported'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                            F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          NewFValue,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_max_chwidth'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                       F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_max_chwidth'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'd_field_BSClient.BSEvent_max_chwidth'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                       F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          NewFValue,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_max_streams'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                       F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_max_streams'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'd_field_BSClient.BSEvent_max_streams'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                       F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          NewFValue,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_phy_mode'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                    F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_phy_mode'(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        F@_9,
                                        F@_10,
                                        F@_11,
                                        F@_12,
                                        F@_13,
                                        F@_14,
                                        F@_15,
                                        F@_16,
                                        F@_17,
                                        F@_18,
                                        F@_19,
                                        F@_20,
                                        F@_21,
                                        F@_22,
                                        F@_23,
                                        F@_24,
                                        F@_25,
                                        F@_26,
                                        F@_27,
                                        F@_28,
                                        F@_29,
                                        F@_30,
                                        F@_31,
                                        TrUserData);
'd_field_BSClient.BSEvent_phy_mode'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                    F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          NewFValue,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_max_mcs'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                   F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_max_mcs'(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       F@_9,
                                       F@_10,
                                       F@_11,
                                       F@_12,
                                       F@_13,
                                       F@_14,
                                       F@_15,
                                       F@_16,
                                       F@_17,
                                       F@_18,
                                       F@_19,
                                       F@_20,
                                       F@_21,
                                       F@_22,
                                       F@_23,
                                       F@_24,
                                       F@_25,
                                       F@_26,
                                       F@_27,
                                       F@_28,
                                       F@_29,
                                       F@_30,
                                       F@_31,
                                       TrUserData);
'd_field_BSClient.BSEvent_max_mcs'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, _, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                   F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          NewFValue,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_max_txpower'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                       F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_max_txpower'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'd_field_BSClient.BSEvent_max_txpower'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, _, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                       F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          NewFValue,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_is_static_smps'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                          F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_is_static_smps'(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              F@_12,
                                              F@_13,
                                              F@_14,
                                              F@_15,
                                              F@_16,
                                              F@_17,
                                              F@_18,
                                              F@_19,
                                              F@_20,
                                              F@_21,
                                              F@_22,
                                              F@_23,
                                              F@_24,
                                              F@_25,
                                              F@_26,
                                              F@_27,
                                              F@_28,
                                              F@_29,
                                              F@_30,
                                              F@_31,
                                              TrUserData);
'd_field_BSClient.BSEvent_is_static_smps'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, _, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                          F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          NewFValue,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_is_mu_mimo_supported'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                                F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_is_mu_mimo_supported'(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    F@_13,
                                                    F@_14,
                                                    F@_15,
                                                    F@_16,
                                                    F@_17,
                                                    F@_18,
                                                    F@_19,
                                                    F@_20,
                                                    F@_21,
                                                    F@_22,
                                                    F@_23,
                                                    F@_24,
                                                    F@_25,
                                                    F@_26,
                                                    F@_27,
                                                    F@_28,
                                                    F@_29,
                                                    F@_30,
                                                    F@_31,
                                                    TrUserData);
'd_field_BSClient.BSEvent_is_mu_mimo_supported'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, _, F@_21, F@_22, F@_23, F@_24, F@_25,
                                                F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          NewFValue,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_band_cap_2G'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                       F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_band_cap_2G'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'd_field_BSClient.BSEvent_band_cap_2G'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, _, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                                       F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          NewFValue,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_band_cap_5G'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                       F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_band_cap_5G'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           F@_12,
                                           F@_13,
                                           F@_14,
                                           F@_15,
                                           F@_16,
                                           F@_17,
                                           F@_18,
                                           F@_19,
                                           F@_20,
                                           F@_21,
                                           F@_22,
                                           F@_23,
                                           F@_24,
                                           F@_25,
                                           F@_26,
                                           F@_27,
                                           F@_28,
                                           F@_29,
                                           F@_30,
                                           F@_31,
                                           TrUserData);
'd_field_BSClient.BSEvent_band_cap_5G'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, _, F@_23, F@_24, F@_25, F@_26, F@_27,
                                       F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          NewFValue,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_rrm_caps_link_meas'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                              F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_rrm_caps_link_meas'(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  F@_11,
                                                  F@_12,
                                                  F@_13,
                                                  F@_14,
                                                  F@_15,
                                                  F@_16,
                                                  F@_17,
                                                  F@_18,
                                                  F@_19,
                                                  F@_20,
                                                  F@_21,
                                                  F@_22,
                                                  F@_23,
                                                  F@_24,
                                                  F@_25,
                                                  F@_26,
                                                  F@_27,
                                                  F@_28,
                                                  F@_29,
                                                  F@_30,
                                                  F@_31,
                                                  TrUserData);
'd_field_BSClient.BSEvent_rrm_caps_link_meas'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, _, F@_24, F@_25, F@_26,
                                              F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          NewFValue,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_rrm_caps_neigh_rpt'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                              F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_rrm_caps_neigh_rpt'(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  F@_11,
                                                  F@_12,
                                                  F@_13,
                                                  F@_14,
                                                  F@_15,
                                                  F@_16,
                                                  F@_17,
                                                  F@_18,
                                                  F@_19,
                                                  F@_20,
                                                  F@_21,
                                                  F@_22,
                                                  F@_23,
                                                  F@_24,
                                                  F@_25,
                                                  F@_26,
                                                  F@_27,
                                                  F@_28,
                                                  F@_29,
                                                  F@_30,
                                                  F@_31,
                                                  TrUserData);
'd_field_BSClient.BSEvent_rrm_caps_neigh_rpt'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, _, F@_25, F@_26,
                                              F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          NewFValue,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_passive'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
                                                    F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_passive'(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        F@_9,
                                                        F@_10,
                                                        F@_11,
                                                        F@_12,
                                                        F@_13,
                                                        F@_14,
                                                        F@_15,
                                                        F@_16,
                                                        F@_17,
                                                        F@_18,
                                                        F@_19,
                                                        F@_20,
                                                        F@_21,
                                                        F@_22,
                                                        F@_23,
                                                        F@_24,
                                                        F@_25,
                                                        F@_26,
                                                        F@_27,
                                                        F@_28,
                                                        F@_29,
                                                        F@_30,
                                                        F@_31,
                                                        TrUserData);
'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_passive'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, _,
                                                    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          NewFValue,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_active'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
                                                   F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_active'(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       F@_6,
                                                       F@_7,
                                                       F@_8,
                                                       F@_9,
                                                       F@_10,
                                                       F@_11,
                                                       F@_12,
                                                       F@_13,
                                                       F@_14,
                                                       F@_15,
                                                       F@_16,
                                                       F@_17,
                                                       F@_18,
                                                       F@_19,
                                                       F@_20,
                                                       F@_21,
                                                       F@_22,
                                                       F@_23,
                                                       F@_24,
                                                       F@_25,
                                                       F@_26,
                                                       F@_27,
                                                       F@_28,
                                                       F@_29,
                                                       F@_30,
                                                       F@_31,
                                                       TrUserData);
'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_active'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
                                                   F@_25, _, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          NewFValue,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_table'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                                  F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_table'(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      F@_12,
                                                      F@_13,
                                                      F@_14,
                                                      F@_15,
                                                      F@_16,
                                                      F@_17,
                                                      F@_18,
                                                      F@_19,
                                                      F@_20,
                                                      F@_21,
                                                      F@_22,
                                                      F@_23,
                                                      F@_24,
                                                      F@_25,
                                                      F@_26,
                                                      F@_27,
                                                      F@_28,
                                                      F@_29,
                                                      F@_30,
                                                      F@_31,
                                                      TrUserData);
'd_field_BSClient.BSEvent_rrm_caps_bcn_rpt_table'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                                  F@_26, _, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          NewFValue,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_rrm_caps_lci_meas'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                             F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_rrm_caps_lci_meas'(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 F@_12,
                                                 F@_13,
                                                 F@_14,
                                                 F@_15,
                                                 F@_16,
                                                 F@_17,
                                                 F@_18,
                                                 F@_19,
                                                 F@_20,
                                                 F@_21,
                                                 F@_22,
                                                 F@_23,
                                                 F@_24,
                                                 F@_25,
                                                 F@_26,
                                                 F@_27,
                                                 F@_28,
                                                 F@_29,
                                                 F@_30,
                                                 F@_31,
                                                 TrUserData);
'd_field_BSClient.BSEvent_rrm_caps_lci_meas'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                             F@_26, F@_27, _, F@_29, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          NewFValue,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_rrm_caps_ftm_range_rpt'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                                  F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_rrm_caps_ftm_range_rpt'(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      F@_12,
                                                      F@_13,
                                                      F@_14,
                                                      F@_15,
                                                      F@_16,
                                                      F@_17,
                                                      F@_18,
                                                      F@_19,
                                                      F@_20,
                                                      F@_21,
                                                      F@_22,
                                                      F@_23,
                                                      F@_24,
                                                      F@_25,
                                                      F@_26,
                                                      F@_27,
                                                      F@_28,
                                                      F@_29,
                                                      F@_30,
                                                      F@_31,
                                                      TrUserData);
'd_field_BSClient.BSEvent_rrm_caps_ftm_range_rpt'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
                                                  F@_26, F@_27, F@_28, _, F@_30, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          NewFValue,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_backoff_period'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                          F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_backoff_period'(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              F@_12,
                                              F@_13,
                                              F@_14,
                                              F@_15,
                                              F@_16,
                                              F@_17,
                                              F@_18,
                                              F@_19,
                                              F@_20,
                                              F@_21,
                                              F@_22,
                                              F@_23,
                                              F@_24,
                                              F@_25,
                                              F@_26,
                                              F@_27,
                                              F@_28,
                                              F@_29,
                                              F@_30,
                                              F@_31,
                                              TrUserData);
'd_field_BSClient.BSEvent_backoff_period'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                          F@_27, F@_28, F@_29, _, F@_31, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          NewFValue,
                                          F@_31,
                                          TrUserData).

'd_field_BSClient.BSEvent_assoc_ies'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                     F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'd_field_BSClient.BSEvent_assoc_ies'(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         F@_11,
                                         F@_12,
                                         F@_13,
                                         F@_14,
                                         F@_15,
                                         F@_16,
                                         F@_17,
                                         F@_18,
                                         F@_19,
                                         F@_20,
                                         F@_21,
                                         F@_22,
                                         F@_23,
                                         F@_24,
                                         F@_25,
                                         F@_26,
                                         F@_27,
                                         F@_28,
                                         F@_29,
                                         F@_30,
                                         F@_31,
                                         TrUserData);
'd_field_BSClient.BSEvent_assoc_ies'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                     F@_27, F@_28, F@_29, F@_30, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    'dfp_read_field_def_BSClient.BSEvent'(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          NewFValue,
                                          TrUserData).

'skip_varint_BSClient.BSEvent'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                               F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'skip_varint_BSClient.BSEvent'(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   F@_11,
                                   F@_12,
                                   F@_13,
                                   F@_14,
                                   F@_15,
                                   F@_16,
                                   F@_17,
                                   F@_18,
                                   F@_19,
                                   F@_20,
                                   F@_21,
                                   F@_22,
                                   F@_23,
                                   F@_24,
                                   F@_25,
                                   F@_26,
                                   F@_27,
                                   F@_28,
                                   F@_29,
                                   F@_30,
                                   F@_31,
                                   TrUserData);
'skip_varint_BSClient.BSEvent'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
                               F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    'dfp_read_field_def_BSClient.BSEvent'(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'skip_length_delimited_BSClient.BSEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                         F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData)
    when N < 57 ->
    'skip_length_delimited_BSClient.BSEvent'(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             F@_6,
                                             F@_7,
                                             F@_8,
                                             F@_9,
                                             F@_10,
                                             F@_11,
                                             F@_12,
                                             F@_13,
                                             F@_14,
                                             F@_15,
                                             F@_16,
                                             F@_17,
                                             F@_18,
                                             F@_19,
                                             F@_20,
                                             F@_21,
                                             F@_22,
                                             F@_23,
                                             F@_24,
                                             F@_25,
                                             F@_26,
                                             F@_27,
                                             F@_28,
                                             F@_29,
                                             F@_30,
                                             F@_31,
                                             TrUserData);
'skip_length_delimited_BSClient.BSEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
                                         F@_27, F@_28, F@_29, F@_30, F@_31, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_BSClient.BSEvent'(Rest2,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'skip_group_BSClient.BSEvent'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
                              F@_31, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_BSClient.BSEvent'(Rest,
                                          0,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'skip_32_BSClient.BSEvent'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
                           F@_29, F@_30, F@_31, TrUserData) ->
    'dfp_read_field_def_BSClient.BSEvent'(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'skip_64_BSClient.BSEvent'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
                           F@_29, F@_30, F@_31, TrUserData) ->
    'dfp_read_field_def_BSClient.BSEvent'(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          F@_12,
                                          F@_13,
                                          F@_14,
                                          F@_15,
                                          F@_16,
                                          F@_17,
                                          F@_18,
                                          F@_19,
                                          F@_20,
                                          F@_21,
                                          F@_22,
                                          F@_23,
                                          F@_24,
                                          F@_25,
                                          F@_26,
                                          F@_27,
                                          F@_28,
                                          F@_29,
                                          F@_30,
                                          F@_31,
                                          TrUserData).

'decode_msg_BSClient.BSBandReport'(Bin, TrUserData) ->
    'dfp_read_field_def_BSClient.BSBandReport'(Bin,
                                               0,
                                               0,
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id(undefined, TrUserData),
                                               id([], TrUserData),
                                               id(undefined, TrUserData),
                                               TrUserData).

'dfp_read_field_def_BSClient.BSBandReport'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_band'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_connected'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_rejects'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_connects'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_disconnects'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_activity_changes'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_steering_success_cnt'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_steering_fail_cnt'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<72, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_steering_kick_cnt'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<80, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_sticky_kick_cnt'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<88, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_probe_bcast_cnt'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<96, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_probe_bcast_blocked'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<104, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_probe_direct_cnt'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<112, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_probe_direct_blocked'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<122, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_event_list'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<130, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'd_field_BSClient.BSBandReport_ifname'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dfp_read_field_def_BSClient.BSBandReport'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, R1, F@_16, TrUserData) ->
    #'BSClient.BSBandReport'{'band' = F@_1, connected = F@_2, rejects = F@_3, connects = F@_4, disconnects = F@_5, activity_changes = F@_6, steering_success_cnt = F@_7, steering_fail_cnt = F@_8, steering_kick_cnt = F@_9, sticky_kick_cnt = F@_10,
                             probe_bcast_cnt = F@_11, probe_bcast_blocked = F@_12, probe_direct_cnt = F@_13, probe_direct_blocked = F@_14, event_list = lists_reverse(R1, TrUserData), ifname = F@_16};
'dfp_read_field_def_BSClient.BSBandReport'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'dg_read_field_def_BSClient.BSBandReport'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'dg_read_field_def_BSClient.BSBandReport'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_BSClient.BSBandReport'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'dg_read_field_def_BSClient.BSBandReport'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_BSClient.BSBandReport_band'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        16 -> 'd_field_BSClient.BSBandReport_connected'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        24 -> 'd_field_BSClient.BSBandReport_rejects'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        32 -> 'd_field_BSClient.BSBandReport_connects'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        40 -> 'd_field_BSClient.BSBandReport_disconnects'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        48 -> 'd_field_BSClient.BSBandReport_activity_changes'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        56 -> 'd_field_BSClient.BSBandReport_steering_success_cnt'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        64 -> 'd_field_BSClient.BSBandReport_steering_fail_cnt'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        72 -> 'd_field_BSClient.BSBandReport_steering_kick_cnt'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        80 -> 'd_field_BSClient.BSBandReport_sticky_kick_cnt'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        88 -> 'd_field_BSClient.BSBandReport_probe_bcast_cnt'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        96 -> 'd_field_BSClient.BSBandReport_probe_bcast_blocked'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        104 -> 'd_field_BSClient.BSBandReport_probe_direct_cnt'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        112 -> 'd_field_BSClient.BSBandReport_probe_direct_blocked'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        122 -> 'd_field_BSClient.BSBandReport_event_list'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        130 -> 'd_field_BSClient.BSBandReport_ifname'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_BSClient.BSBandReport'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
                1 -> 'skip_64_BSClient.BSBandReport'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
                2 -> 'skip_length_delimited_BSClient.BSBandReport'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
                3 -> 'skip_group_BSClient.BSBandReport'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
                5 -> 'skip_32_BSClient.BSBandReport'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData)
            end
    end;
'dg_read_field_def_BSClient.BSBandReport'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, R1, F@_16, TrUserData) ->
    #'BSClient.BSBandReport'{'band' = F@_1, connected = F@_2, rejects = F@_3, connects = F@_4, disconnects = F@_5, activity_changes = F@_6, steering_success_cnt = F@_7, steering_fail_cnt = F@_8, steering_kick_cnt = F@_9, sticky_kick_cnt = F@_10,
                             probe_bcast_cnt = F@_11, probe_bcast_blocked = F@_12, probe_direct_cnt = F@_13, probe_direct_blocked = F@_14, event_list = lists_reverse(R1, TrUserData), ifname = F@_16}.

'd_field_BSClient.BSBandReport_band'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_band'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_band'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_connected'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_connected'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_connected'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_rejects'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_rejects'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_rejects'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_connects'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_connects'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_connects'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_disconnects'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_disconnects'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_disconnects'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_activity_changes'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_activity_changes'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_activity_changes'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_steering_success_cnt'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_steering_success_cnt'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_steering_success_cnt'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_steering_fail_cnt'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_steering_fail_cnt'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_steering_fail_cnt'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_steering_kick_cnt'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_steering_kick_cnt'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_steering_kick_cnt'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_sticky_kick_cnt'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_sticky_kick_cnt'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_sticky_kick_cnt'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_probe_bcast_cnt'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_probe_bcast_cnt'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_probe_bcast_cnt'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewFValue, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_probe_bcast_blocked'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_probe_bcast_blocked'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_probe_bcast_blocked'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, NewFValue, F@_13, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_probe_direct_cnt'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_probe_direct_cnt'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_probe_direct_cnt'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, NewFValue, F@_14, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_probe_direct_blocked'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_probe_direct_blocked'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_probe_direct_blocked'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, NewFValue, F@_15, F@_16, TrUserData).

'd_field_BSClient.BSBandReport_event_list'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_event_list'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_event_list'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, Prev, F@_16, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_BSClient.BSEvent'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, cons(NewFValue, Prev, TrUserData), F@_16, TrUserData).

'd_field_BSClient.BSBandReport_ifname'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'd_field_BSClient.BSBandReport_ifname'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'd_field_BSClient.BSBandReport_ifname'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_BSClient.BSBandReport'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, NewFValue, TrUserData).

'skip_varint_BSClient.BSBandReport'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'skip_varint_BSClient.BSBandReport'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'skip_varint_BSClient.BSBandReport'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'dfp_read_field_def_BSClient.BSBandReport'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'skip_length_delimited_BSClient.BSBandReport'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) when N < 57 ->
    'skip_length_delimited_BSClient.BSBandReport'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
'skip_length_delimited_BSClient.BSBandReport'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_BSClient.BSBandReport'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'skip_group_BSClient.BSBandReport'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_BSClient.BSBandReport'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'skip_32_BSClient.BSBandReport'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'dfp_read_field_def_BSClient.BSBandReport'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

'skip_64_BSClient.BSBandReport'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    'dfp_read_field_def_BSClient.BSBandReport'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

decode_msg_BSClient(Bin, TrUserData) -> dfp_read_field_def_BSClient(Bin, 0, 0, id(undefined, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_BSClient(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_BSClient_mac_address(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_BSClient(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_BSClient_bs_band_report(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_BSClient(<<>>, 0, 0, F@_1, R1, TrUserData) -> #'BSClient'{mac_address = F@_1, bs_band_report = lists_reverse(R1, TrUserData)};
dfp_read_field_def_BSClient(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_BSClient(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_BSClient(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_BSClient(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_BSClient(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_BSClient_mac_address(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_BSClient_bs_band_report(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_BSClient(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_BSClient(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_BSClient(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_BSClient(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_BSClient(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_BSClient(<<>>, 0, 0, F@_1, R1, TrUserData) -> #'BSClient'{mac_address = F@_1, bs_band_report = lists_reverse(R1, TrUserData)}.

d_field_BSClient_mac_address(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_BSClient_mac_address(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_BSClient_mac_address(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_BSClient(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_BSClient_bs_band_report(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_BSClient_bs_band_report(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_BSClient_bs_band_report(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_BSClient.BSBandReport'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_BSClient(RestF, 0, 0, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_BSClient(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_BSClient(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_BSClient(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_BSClient(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_BSClient(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_BSClient(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_BSClient(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BSClient(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_BSClient(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BSClient(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_BSClient(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_BSClient(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_BSClient(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_BSClient(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_BSReport(Bin, TrUserData) -> dfp_read_field_def_BSReport(Bin, 0, 0, id(undefined, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_BSReport(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_BSReport_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_BSReport(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_BSReport_clients(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_BSReport(<<>>, 0, 0, F@_1, R1, TrUserData) -> #'BSReport'{timestamp_ms = F@_1, clients = lists_reverse(R1, TrUserData)};
dfp_read_field_def_BSReport(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_BSReport(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_BSReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_BSReport(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_BSReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_BSReport_timestamp_ms(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_BSReport_clients(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_BSReport(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_BSReport(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_BSReport(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_BSReport(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_BSReport(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_BSReport(<<>>, 0, 0, F@_1, R1, TrUserData) -> #'BSReport'{timestamp_ms = F@_1, clients = lists_reverse(R1, TrUserData)}.

d_field_BSReport_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_BSReport_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_BSReport_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_BSReport(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_BSReport_clients(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_BSReport_clients(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_BSReport_clients(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_BSClient(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_BSReport(RestF, 0, 0, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_BSReport(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_BSReport(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_BSReport(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_BSReport(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_BSReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_BSReport(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_BSReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BSReport(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_BSReport(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BSReport(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_BSReport(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_BSReport(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_BSReport(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_BSReport(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'decode_msg_RssiPeer.RssiSample'(Bin, TrUserData) -> 'dfp_read_field_def_RssiPeer.RssiSample'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_RssiPeer.RssiSample'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'd_field_RssiPeer.RssiSample_rssi'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_RssiPeer.RssiSample'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'd_field_RssiPeer.RssiSample_offset_ms'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_RssiPeer.RssiSample'(<<>>, 0, 0, F@_1, F@_2, _) -> #'RssiPeer.RssiSample'{rssi = F@_1, offset_ms = F@_2};
'dfp_read_field_def_RssiPeer.RssiSample'(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_RssiPeer.RssiSample'(Other, Z1, Z2, F@_1, F@_2, TrUserData).

'dg_read_field_def_RssiPeer.RssiSample'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_RssiPeer.RssiSample'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_RssiPeer.RssiSample'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_RssiPeer.RssiSample_rssi'(Rest, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_RssiPeer.RssiSample_offset_ms'(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_RssiPeer.RssiSample'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_RssiPeer.RssiSample'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_RssiPeer.RssiSample'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_RssiPeer.RssiSample'(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_RssiPeer.RssiSample'(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_RssiPeer.RssiSample'(<<>>, 0, 0, F@_1, F@_2, _) -> #'RssiPeer.RssiSample'{rssi = F@_1, offset_ms = F@_2}.

'd_field_RssiPeer.RssiSample_rssi'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_RssiPeer.RssiSample_rssi'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_RssiPeer.RssiSample_rssi'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_RssiPeer.RssiSample'(RestF, 0, 0, NewFValue, F@_2, TrUserData).

'd_field_RssiPeer.RssiSample_offset_ms'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_RssiPeer.RssiSample_offset_ms'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_RssiPeer.RssiSample_offset_ms'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_RssiPeer.RssiSample'(RestF, 0, 0, F@_1, NewFValue, TrUserData).

'skip_varint_RssiPeer.RssiSample'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'skip_varint_RssiPeer.RssiSample'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'skip_varint_RssiPeer.RssiSample'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_RssiPeer.RssiSample'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'skip_length_delimited_RssiPeer.RssiSample'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_RssiPeer.RssiSample'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'skip_length_delimited_RssiPeer.RssiSample'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_RssiPeer.RssiSample'(Rest2, 0, 0, F@_1, F@_2, TrUserData).

'skip_group_RssiPeer.RssiSample'(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_RssiPeer.RssiSample'(Rest, 0, Z2, F@_1, F@_2, TrUserData).

'skip_32_RssiPeer.RssiSample'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_RssiPeer.RssiSample'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'skip_64_RssiPeer.RssiSample'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_RssiPeer.RssiSample'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_RssiPeer(Bin, TrUserData) -> dfp_read_field_def_RssiPeer(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_RssiPeer(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_RssiPeer_mac_address(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_RssiPeer(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_RssiPeer_rssi_source(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_RssiPeer(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_RssiPeer_rssi_list(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_RssiPeer(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_RssiPeer_rssi_avg(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_RssiPeer(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_RssiPeer_rx_ppdus(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_RssiPeer(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_RssiPeer_tx_ppdus(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_RssiPeer(<<>>, 0, 0, F@_1, F@_2, R1, F@_4, F@_5, F@_6, TrUserData) -> #'RssiPeer'{mac_address = F@_1, rssi_source = F@_2, rssi_list = lists_reverse(R1, TrUserData), rssi_avg = F@_4, rx_ppdus = F@_5, tx_ppdus = F@_6};
dfp_read_field_def_RssiPeer(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_RssiPeer(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_RssiPeer(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 -> dg_read_field_def_RssiPeer(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_RssiPeer(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_RssiPeer_mac_address(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        16 -> d_field_RssiPeer_rssi_source(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        26 -> d_field_RssiPeer_rssi_list(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        34 -> d_field_RssiPeer_rssi_avg(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        40 -> d_field_RssiPeer_rx_ppdus(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        48 -> d_field_RssiPeer_tx_ppdus(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_RssiPeer(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_RssiPeer(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_RssiPeer(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_RssiPeer(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_RssiPeer(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_RssiPeer(<<>>, 0, 0, F@_1, F@_2, R1, F@_4, F@_5, F@_6, TrUserData) -> #'RssiPeer'{mac_address = F@_1, rssi_source = F@_2, rssi_list = lists_reverse(R1, TrUserData), rssi_avg = F@_4, rx_ppdus = F@_5, tx_ppdus = F@_6}.

d_field_RssiPeer_mac_address(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_RssiPeer_mac_address(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_RssiPeer_mac_address(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_RssiPeer(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_RssiPeer_rssi_source(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_RssiPeer_rssi_source(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_RssiPeer_rssi_source(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_RssiPeer.RssiSource'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_RssiPeer(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_RssiPeer_rssi_list(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_RssiPeer_rssi_list(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_RssiPeer_rssi_list(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_RssiPeer.RssiSample'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_RssiPeer(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, F@_5, F@_6, TrUserData).

d_field_RssiPeer_rssi_avg(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_RssiPeer_rssi_avg(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_RssiPeer_rssi_avg(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_AvgType(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_RssiPeer(RestF,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                if Prev == undefined -> NewFValue;
                                   true -> merge_msg_AvgType(Prev, NewFValue, TrUserData)
                                end,
                                F@_5,
                                F@_6,
                                TrUserData).

d_field_RssiPeer_rx_ppdus(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_RssiPeer_rx_ppdus(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_RssiPeer_rx_ppdus(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RssiPeer(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_RssiPeer_tx_ppdus(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_RssiPeer_tx_ppdus(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_RssiPeer_tx_ppdus(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RssiPeer(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_RssiPeer(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_RssiPeer(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_RssiPeer(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_RssiPeer(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_RssiPeer(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> skip_length_delimited_RssiPeer(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_RssiPeer(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RssiPeer(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_RssiPeer(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RssiPeer(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_RssiPeer(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_RssiPeer(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_RssiPeer(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_RssiPeer(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_RssiReport(Bin, TrUserData) -> dfp_read_field_def_RssiReport(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_RssiReport(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_RssiReport_band(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_RssiReport(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_RssiReport_report_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_RssiReport(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_RssiReport_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_RssiReport(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_RssiReport_peer_list(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_RssiReport(<<>>, 0, 0, F@_1, F@_2, F@_3, R1, TrUserData) -> #'RssiReport'{'band' = F@_1, report_type = F@_2, timestamp_ms = F@_3, peer_list = lists_reverse(R1, TrUserData)};
dfp_read_field_def_RssiReport(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_RssiReport(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_RssiReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_RssiReport(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_RssiReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_RssiReport_band(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_RssiReport_report_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_RssiReport_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_RssiReport_peer_list(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_RssiReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_RssiReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_RssiReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_RssiReport(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_RssiReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_RssiReport(<<>>, 0, 0, F@_1, F@_2, F@_3, R1, TrUserData) -> #'RssiReport'{'band' = F@_1, report_type = F@_2, timestamp_ms = F@_3, peer_list = lists_reverse(R1, TrUserData)}.

d_field_RssiReport_band(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_RssiReport_band(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RssiReport_band(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_RssiReport(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_RssiReport_report_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_RssiReport_report_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RssiReport_report_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ReportType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_RssiReport(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_RssiReport_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_RssiReport_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RssiReport_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RssiReport(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_RssiReport_peer_list(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_RssiReport_peer_list(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RssiReport_peer_list(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_RssiPeer(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_RssiReport(RestF, 0, 0, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_RssiReport(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_RssiReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_RssiReport(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_RssiReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_RssiReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_RssiReport(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_RssiReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RssiReport(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_RssiReport(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RssiReport(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_RssiReport(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_RssiReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_RssiReport(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_RssiReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_DNSProbeMetric(Bin, TrUserData) -> dfp_read_field_def_DNSProbeMetric(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_DNSProbeMetric(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_DNSProbeMetric_serverIP(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_DNSProbeMetric(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_DNSProbeMetric_state(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_DNSProbeMetric(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_DNSProbeMetric_latency(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_DNSProbeMetric(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'DNSProbeMetric'{serverIP = F@_1, state = F@_2, latency = F@_3};
dfp_read_field_def_DNSProbeMetric(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_DNSProbeMetric(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_DNSProbeMetric(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_DNSProbeMetric(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_DNSProbeMetric(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_DNSProbeMetric_serverIP(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_DNSProbeMetric_state(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_DNSProbeMetric_latency(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_DNSProbeMetric(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_DNSProbeMetric(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_DNSProbeMetric(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_DNSProbeMetric(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_DNSProbeMetric(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_DNSProbeMetric(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'DNSProbeMetric'{serverIP = F@_1, state = F@_2, latency = F@_3}.

d_field_DNSProbeMetric_serverIP(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_DNSProbeMetric_serverIP(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_DNSProbeMetric_serverIP(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_DNSProbeMetric(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_DNSProbeMetric_state(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_DNSProbeMetric_state(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_DNSProbeMetric_state(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_StateUpDown(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_DNSProbeMetric(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_DNSProbeMetric_latency(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_DNSProbeMetric_latency(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_DNSProbeMetric_latency(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_DNSProbeMetric(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_DNSProbeMetric(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_DNSProbeMetric(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_DNSProbeMetric(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_DNSProbeMetric(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_DNSProbeMetric(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_DNSProbeMetric(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_DNSProbeMetric(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DNSProbeMetric(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_DNSProbeMetric(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DNSProbeMetric(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_DNSProbeMetric(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_DNSProbeMetric(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_DNSProbeMetric(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_DNSProbeMetric(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_VLANMetrics(Bin, TrUserData) -> dfp_read_field_def_VLANMetrics(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_VLANMetrics(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_VLANMetrics_vlanIF(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_VLANMetrics(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_VLANMetrics_dhcpState(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_VLANMetrics(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_VLANMetrics_latency(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_VLANMetrics(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'VLANMetrics'{vlanIF = F@_1, dhcpState = F@_2, latency = F@_3};
dfp_read_field_def_VLANMetrics(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_VLANMetrics(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_VLANMetrics(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_VLANMetrics(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_VLANMetrics(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_VLANMetrics_vlanIF(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_VLANMetrics_dhcpState(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_VLANMetrics_latency(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_VLANMetrics(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_VLANMetrics(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_VLANMetrics(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_VLANMetrics(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_VLANMetrics(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_VLANMetrics(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'VLANMetrics'{vlanIF = F@_1, dhcpState = F@_2, latency = F@_3}.

d_field_VLANMetrics_vlanIF(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_VLANMetrics_vlanIF(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_VLANMetrics_vlanIF(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_VLANMetrics(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_VLANMetrics_dhcpState(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_VLANMetrics_dhcpState(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_VLANMetrics_dhcpState(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_StateUpDown(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_VLANMetrics(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_VLANMetrics_latency(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_VLANMetrics_latency(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_VLANMetrics_latency(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_VLANMetrics(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_VLANMetrics(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_VLANMetrics(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_VLANMetrics(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_VLANMetrics(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_VLANMetrics(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_VLANMetrics(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_VLANMetrics(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VLANMetrics(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_VLANMetrics(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_VLANMetrics(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_VLANMetrics(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_VLANMetrics(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_VLANMetrics(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_VLANMetrics(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_RADIUSMetrics(Bin, TrUserData) -> dfp_read_field_def_RADIUSMetrics(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_RADIUSMetrics(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_RADIUSMetrics_serverIP(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RADIUSMetrics(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_RADIUSMetrics_radiusState(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RADIUSMetrics(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_RADIUSMetrics_latency(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RADIUSMetrics(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'RADIUSMetrics'{serverIP = F@_1, radiusState = F@_2, latency = F@_3};
dfp_read_field_def_RADIUSMetrics(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_RADIUSMetrics(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_RADIUSMetrics(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_RADIUSMetrics(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_RADIUSMetrics(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_RADIUSMetrics_serverIP(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_RADIUSMetrics_radiusState(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_RADIUSMetrics_latency(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_RADIUSMetrics(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_RADIUSMetrics(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_RADIUSMetrics(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_RADIUSMetrics(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_RADIUSMetrics(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_RADIUSMetrics(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'RADIUSMetrics'{serverIP = F@_1, radiusState = F@_2, latency = F@_3}.

d_field_RADIUSMetrics_serverIP(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_RADIUSMetrics_serverIP(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_RADIUSMetrics_serverIP(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_RADIUSMetrics(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_RADIUSMetrics_radiusState(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_RADIUSMetrics_radiusState(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_RADIUSMetrics_radiusState(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_StateUpDown(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_RADIUSMetrics(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_RADIUSMetrics_latency(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_RADIUSMetrics_latency(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_RADIUSMetrics_latency(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RADIUSMetrics(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_RADIUSMetrics(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_RADIUSMetrics(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_RADIUSMetrics(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_RADIUSMetrics(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_RADIUSMetrics(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_RADIUSMetrics(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_RADIUSMetrics(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RADIUSMetrics(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_RADIUSMetrics(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RADIUSMetrics(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_RADIUSMetrics(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_RADIUSMetrics(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_RADIUSMetrics(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_RADIUSMetrics(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_NetworkProbe(Bin, TrUserData) -> dfp_read_field_def_NetworkProbe(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_NetworkProbe(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_NetworkProbe_dns_probe(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NetworkProbe(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_NetworkProbe_vlan_probe(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NetworkProbe(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_NetworkProbe_radius_probe(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NetworkProbe(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_NetworkProbe_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NetworkProbe(<<>>, 0, 0, F@_1, F@_2, R1, F@_4, TrUserData) -> #'NetworkProbe'{dns_probe = F@_1, vlan_probe = F@_2, radius_probe = lists_reverse(R1, TrUserData), timestamp_ms = F@_4};
dfp_read_field_def_NetworkProbe(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_NetworkProbe(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_NetworkProbe(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_NetworkProbe(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_NetworkProbe(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_NetworkProbe_dns_probe(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_NetworkProbe_vlan_probe(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_NetworkProbe_radius_probe(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_NetworkProbe_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_NetworkProbe(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_NetworkProbe(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_NetworkProbe(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_NetworkProbe(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_NetworkProbe(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_NetworkProbe(<<>>, 0, 0, F@_1, F@_2, R1, F@_4, TrUserData) -> #'NetworkProbe'{dns_probe = F@_1, vlan_probe = F@_2, radius_probe = lists_reverse(R1, TrUserData), timestamp_ms = F@_4}.

d_field_NetworkProbe_dns_probe(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_NetworkProbe_dns_probe(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_NetworkProbe_dns_probe(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_DNSProbeMetric(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_NetworkProbe(RestF,
                                    0,
                                    0,
                                    if Prev == undefined -> NewFValue;
                                       true -> merge_msg_DNSProbeMetric(Prev, NewFValue, TrUserData)
                                    end,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    TrUserData).

d_field_NetworkProbe_vlan_probe(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_NetworkProbe_vlan_probe(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_NetworkProbe_vlan_probe(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_VLANMetrics(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_NetworkProbe(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    if Prev == undefined -> NewFValue;
                                       true -> merge_msg_VLANMetrics(Prev, NewFValue, TrUserData)
                                    end,
                                    F@_3,
                                    F@_4,
                                    TrUserData).

d_field_NetworkProbe_radius_probe(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_NetworkProbe_radius_probe(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_NetworkProbe_radius_probe(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_RADIUSMetrics(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_NetworkProbe(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, TrUserData).

d_field_NetworkProbe_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_NetworkProbe_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_NetworkProbe_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_NetworkProbe(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_NetworkProbe(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_NetworkProbe(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_NetworkProbe(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_NetworkProbe(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_NetworkProbe(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_NetworkProbe(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_NetworkProbe(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NetworkProbe(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_NetworkProbe(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NetworkProbe(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_NetworkProbe(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_NetworkProbe(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_NetworkProbe(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_NetworkProbe(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_RtpFlowStats(Bin, TrUserData) ->
    dfp_read_field_def_RtpFlowStats(Bin,
                                    0,
                                    0,
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    TrUserData).

dfp_read_field_def_RtpFlowStats(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_direction(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_rtp_flow_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_latency(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_jitter(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_packet_loss_percent(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_packet_loss_consec(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_codec(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_mosx_100(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<74, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_block_codecs(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<80, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_total_packets_sent(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<88, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_total_packets_lost(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<96, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_rtp_seq_first(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<104, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_rtp_seq_last(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<112, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    d_field_RtpFlowStats_stats_idx(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_RtpFlowStats(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _) ->
    #'RtpFlowStats'{direction = F@_1, rtp_flow_type = F@_2, latency = F@_3, jitter = F@_4, packet_loss_percent = F@_5, packet_loss_consec = F@_6, codec = F@_7, mosx_100 = F@_8, block_codecs = F@_9, total_packets_sent = F@_10, total_packets_lost = F@_11,
                    rtp_seq_first = F@_12, rtp_seq_last = F@_13, stats_idx = F@_14};
dfp_read_field_def_RtpFlowStats(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dg_read_field_def_RtpFlowStats(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

dg_read_field_def_RtpFlowStats(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_RtpFlowStats(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dg_read_field_def_RtpFlowStats(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_RtpFlowStats_direction(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        16 -> d_field_RtpFlowStats_rtp_flow_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        24 -> d_field_RtpFlowStats_latency(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        32 -> d_field_RtpFlowStats_jitter(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        40 -> d_field_RtpFlowStats_packet_loss_percent(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        48 -> d_field_RtpFlowStats_packet_loss_consec(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        56 -> d_field_RtpFlowStats_codec(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        64 -> d_field_RtpFlowStats_mosx_100(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        74 -> d_field_RtpFlowStats_block_codecs(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        80 -> d_field_RtpFlowStats_total_packets_sent(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        88 -> d_field_RtpFlowStats_total_packets_lost(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        96 -> d_field_RtpFlowStats_rtp_seq_first(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        104 -> d_field_RtpFlowStats_rtp_seq_last(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        112 -> d_field_RtpFlowStats_stats_idx(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_RtpFlowStats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
                1 -> skip_64_RtpFlowStats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
                2 -> skip_length_delimited_RtpFlowStats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
                3 -> skip_group_RtpFlowStats(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
                5 -> skip_32_RtpFlowStats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
            end
    end;
dg_read_field_def_RtpFlowStats(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _) ->
    #'RtpFlowStats'{direction = F@_1, rtp_flow_type = F@_2, latency = F@_3, jitter = F@_4, packet_loss_percent = F@_5, packet_loss_consec = F@_6, codec = F@_7, mosx_100 = F@_8, block_codecs = F@_9, total_packets_sent = F@_10, total_packets_lost = F@_11,
                    rtp_seq_first = F@_12, rtp_seq_last = F@_13, stats_idx = F@_14}.

d_field_RtpFlowStats_direction(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_direction(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_direction(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_RtpFlowStats.RtpFlowDirection'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_rtp_flow_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_rtp_flow_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_rtp_flow_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_RtpFlowStats.RtpFlowType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_latency(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_latency(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_latency(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_jitter(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_jitter(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_jitter(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_packet_loss_percent(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_packet_loss_percent(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_packet_loss_percent(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_packet_loss_consec(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_packet_loss_consec(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_packet_loss_consec(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_codec(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_codec(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_codec(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_mosx_100(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_mosx_100(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_mosx_100(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_block_codecs(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_block_codecs(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_block_codecs(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_total_packets_sent(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_total_packets_sent(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_total_packets_sent(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_total_packets_lost(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_total_packets_lost(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_total_packets_lost(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewFValue, F@_12, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_rtp_seq_first(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_rtp_seq_first(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_rtp_seq_first(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, NewFValue, F@_13, F@_14, TrUserData).

d_field_RtpFlowStats_rtp_seq_last(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_rtp_seq_last(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_rtp_seq_last(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, F@_14, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, NewFValue, F@_14, TrUserData).

d_field_RtpFlowStats_stats_idx(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    d_field_RtpFlowStats_stats_idx(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_RtpFlowStats_stats_idx(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RtpFlowStats(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, NewFValue, TrUserData).

skip_varint_RtpFlowStats(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    skip_varint_RtpFlowStats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
skip_varint_RtpFlowStats(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dfp_read_field_def_RtpFlowStats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

skip_length_delimited_RtpFlowStats(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) when N < 57 ->
    skip_length_delimited_RtpFlowStats(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
skip_length_delimited_RtpFlowStats(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RtpFlowStats(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

skip_group_RtpFlowStats(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RtpFlowStats(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

skip_32_RtpFlowStats(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dfp_read_field_def_RtpFlowStats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

skip_64_RtpFlowStats(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dfp_read_field_def_RtpFlowStats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

decode_msg_CallStart(Bin, TrUserData) ->
    dfp_read_field_def_CallStart(Bin,
                                 0,
                                 0,
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id([], TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 TrUserData).

dfp_read_field_def_CallStart(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_CallStart_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_CallStart(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_CallStart_wifi_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_CallStart(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_CallStart_client_mac(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_CallStart(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_CallStart_codecs(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_CallStart(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_CallStart_provider_domain(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_CallStart(<<50, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_CallStart_device_info(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_CallStart(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_CallStart_channel(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_CallStart(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_CallStart_band(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_CallStart(<<>>, 0, 0, F@_1, F@_2, F@_3, R1, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    #'CallStart'{session_id = F@_1, wifi_session_id = F@_2, client_mac = F@_3, codecs = lists_reverse(R1, TrUserData), provider_domain = F@_5, device_info = F@_6, channel = F@_7, 'band' = F@_8};
dfp_read_field_def_CallStart(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> dg_read_field_def_CallStart(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

dg_read_field_def_CallStart(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_CallStart(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dg_read_field_def_CallStart(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_CallStart_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        16 -> d_field_CallStart_wifi_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        26 -> d_field_CallStart_client_mac(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        34 -> d_field_CallStart_codecs(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        42 -> d_field_CallStart_provider_domain(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        50 -> d_field_CallStart_device_info(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        56 -> d_field_CallStart_channel(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        64 -> d_field_CallStart_band(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_CallStart(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
                1 -> skip_64_CallStart(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
                2 -> skip_length_delimited_CallStart(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
                3 -> skip_group_CallStart(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
                5 -> skip_32_CallStart(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData)
            end
    end;
dg_read_field_def_CallStart(<<>>, 0, 0, F@_1, F@_2, F@_3, R1, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    #'CallStart'{session_id = F@_1, wifi_session_id = F@_2, client_mac = F@_3, codecs = lists_reverse(R1, TrUserData), provider_domain = F@_5, device_info = F@_6, channel = F@_7, 'band' = F@_8}.

d_field_CallStart_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_CallStart_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_CallStart_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CallStart(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_CallStart_wifi_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_CallStart_wifi_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_CallStart_wifi_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CallStart(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_CallStart_client_mac(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_CallStart_client_mac(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_CallStart_client_mac(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_CallStart(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_CallStart_codecs(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 -> d_field_CallStart_codecs(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_CallStart_codecs(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_CallStart(RestF, 0, 0, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_CallStart_provider_domain(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_CallStart_provider_domain(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_CallStart_provider_domain(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_CallStart(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, TrUserData).

d_field_CallStart_device_info(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_CallStart_device_info(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_CallStart_device_info(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_CallStart(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, TrUserData).

d_field_CallStart_channel(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 -> d_field_CallStart_channel(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_CallStart_channel(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CallStart(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, TrUserData).

d_field_CallStart_band(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 -> d_field_CallStart_band(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_CallStart_band(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_CallStart(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, TrUserData).

skip_varint_CallStart(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> skip_varint_CallStart(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_varint_CallStart(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> dfp_read_field_def_CallStart(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_length_delimited_CallStart(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    skip_length_delimited_CallStart(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_length_delimited_CallStart(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CallStart(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_group_CallStart(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CallStart(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_32_CallStart(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> dfp_read_field_def_CallStart(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_64_CallStart(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> dfp_read_field_def_CallStart(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

decode_msg_CallStop(Bin, TrUserData) ->
    dfp_read_field_def_CallStop(Bin,
                                0,
                                0,
                                id(undefined, TrUserData),
                                id(undefined, TrUserData),
                                id(undefined, TrUserData),
                                id(undefined, TrUserData),
                                id(undefined, TrUserData),
                                id([], TrUserData),
                                id(undefined, TrUserData),
                                id(undefined, TrUserData),
                                id([], TrUserData),
                                id(undefined, TrUserData),
                                TrUserData).

dfp_read_field_def_CallStop(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_CallStop_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_CallStop(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_CallStop_wifi_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_CallStop(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_CallStop_client_mac(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_CallStop(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_CallStop_reason(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_CallStop(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_CallStop_call_duration(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_CallStop(<<50, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_CallStop_stats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_CallStop(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_CallStop_channel(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_CallStop(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_CallStop_band(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_CallStop(<<74, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> d_field_CallStop_codecs(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_CallStop(<<82, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_CallStop_provider_domain(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_CallStop(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, R1, F@_7, F@_8, R2, F@_10, TrUserData) ->
    #'CallStop'{session_id = F@_1, wifi_session_id = F@_2, client_mac = F@_3, reason = F@_4, call_duration = F@_5, stats = lists_reverse(R1, TrUserData), channel = F@_7, 'band' = F@_8, codecs = lists_reverse(R2, TrUserData), provider_domain = F@_10};
dfp_read_field_def_CallStop(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> dg_read_field_def_CallStop(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

dg_read_field_def_CallStop(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_CallStop(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dg_read_field_def_CallStop(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_CallStop_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        16 -> d_field_CallStop_wifi_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        26 -> d_field_CallStop_client_mac(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        32 -> d_field_CallStop_reason(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        40 -> d_field_CallStop_call_duration(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        50 -> d_field_CallStop_stats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        56 -> d_field_CallStop_channel(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        64 -> d_field_CallStop_band(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        74 -> d_field_CallStop_codecs(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        82 -> d_field_CallStop_provider_domain(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_CallStop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                1 -> skip_64_CallStop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                2 -> skip_length_delimited_CallStop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                3 -> skip_group_CallStop(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                5 -> skip_32_CallStop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData)
            end
    end;
dg_read_field_def_CallStop(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, R1, F@_7, F@_8, R2, F@_10, TrUserData) ->
    #'CallStop'{session_id = F@_1, wifi_session_id = F@_2, client_mac = F@_3, reason = F@_4, call_duration = F@_5, stats = lists_reverse(R1, TrUserData), channel = F@_7, 'band' = F@_8, codecs = lists_reverse(R2, TrUserData), provider_domain = F@_10}.

d_field_CallStop_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_CallStop_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_CallStop_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CallStop(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_CallStop_wifi_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_CallStop_wifi_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_CallStop_wifi_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CallStop(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_CallStop_client_mac(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_CallStop_client_mac(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_CallStop_client_mac(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_CallStop(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_CallStop_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_CallStop_reason(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_CallStop_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_CallStop.CallStopReason'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_CallStop(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_CallStop_call_duration(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_CallStop_call_duration(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_CallStop_call_duration(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CallStop(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_CallStop_stats(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_CallStop_stats(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_CallStop_stats(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_RtpFlowStats(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_CallStop(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, cons(NewFValue, Prev, TrUserData), F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_CallStop_channel(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_CallStop_channel(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_CallStop_channel(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CallStop(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, TrUserData).

d_field_CallStop_band(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_CallStop_band(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_CallStop_band(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_CallStop(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, TrUserData).

d_field_CallStop_codecs(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_CallStop_codecs(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_CallStop_codecs(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_CallStop(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, cons(NewFValue, Prev, TrUserData), F@_10, TrUserData).

d_field_CallStop_provider_domain(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    d_field_CallStop_provider_domain(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_CallStop_provider_domain(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_CallStop(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, TrUserData).

skip_varint_CallStop(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> skip_varint_CallStop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_varint_CallStop(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> dfp_read_field_def_CallStop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

skip_length_delimited_CallStop(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    skip_length_delimited_CallStop(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_length_delimited_CallStop(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CallStop(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

skip_group_CallStop(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CallStop(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

skip_32_CallStop(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> dfp_read_field_def_CallStop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

skip_64_CallStop(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) -> dfp_read_field_def_CallStop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

decode_msg_CallReport(Bin, TrUserData) ->
    dfp_read_field_def_CallReport(Bin,
                                  0,
                                  0,
                                  id(undefined, TrUserData),
                                  id(undefined, TrUserData),
                                  id(undefined, TrUserData),
                                  id([], TrUserData),
                                  id(undefined, TrUserData),
                                  id(undefined, TrUserData),
                                  id(undefined, TrUserData),
                                  id([], TrUserData),
                                  id(undefined, TrUserData),
                                  TrUserData).

dfp_read_field_def_CallReport(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_CallReport_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_CallReport(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_CallReport_wifi_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_CallReport(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_CallReport_client_mac(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_CallReport(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_CallReport_stats(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_CallReport(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_CallReport_reason(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_CallReport(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_CallReport_channel(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_CallReport(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_CallReport_band(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_CallReport(<<66, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_CallReport_codecs(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_CallReport(<<74, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_CallReport_provider_domain(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_CallReport(<<>>, 0, 0, F@_1, F@_2, F@_3, R1, F@_5, F@_6, F@_7, R2, F@_9, TrUserData) ->
    #'CallReport'{session_id = F@_1, wifi_session_id = F@_2, client_mac = F@_3, stats = lists_reverse(R1, TrUserData), reason = F@_5, channel = F@_6, 'band' = F@_7, codecs = lists_reverse(R2, TrUserData), provider_domain = F@_9};
dfp_read_field_def_CallReport(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> dg_read_field_def_CallReport(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

dg_read_field_def_CallReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_CallReport(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dg_read_field_def_CallReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_CallReport_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        16 -> d_field_CallReport_wifi_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        26 -> d_field_CallReport_client_mac(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        34 -> d_field_CallReport_stats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        40 -> d_field_CallReport_reason(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        48 -> d_field_CallReport_channel(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        56 -> d_field_CallReport_band(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        66 -> d_field_CallReport_codecs(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        74 -> d_field_CallReport_provider_domain(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_CallReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                1 -> skip_64_CallReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                2 -> skip_length_delimited_CallReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                3 -> skip_group_CallReport(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                5 -> skip_32_CallReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData)
            end
    end;
dg_read_field_def_CallReport(<<>>, 0, 0, F@_1, F@_2, F@_3, R1, F@_5, F@_6, F@_7, R2, F@_9, TrUserData) ->
    #'CallReport'{session_id = F@_1, wifi_session_id = F@_2, client_mac = F@_3, stats = lists_reverse(R1, TrUserData), reason = F@_5, channel = F@_6, 'band' = F@_7, codecs = lists_reverse(R2, TrUserData), provider_domain = F@_9}.

d_field_CallReport_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_CallReport_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_CallReport_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CallReport(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_CallReport_wifi_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_CallReport_wifi_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_CallReport_wifi_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CallReport(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_CallReport_client_mac(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_CallReport_client_mac(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_CallReport_client_mac(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_CallReport(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_CallReport_stats(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_CallReport_stats(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_CallReport_stats(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_RtpFlowStats(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_CallReport(RestF, 0, 0, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_CallReport_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_CallReport_reason(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_CallReport_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_CallReport.CallReportReason'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_CallReport(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_CallReport_channel(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_CallReport_channel(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_CallReport_channel(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CallReport(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, TrUserData).

d_field_CallReport_band(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_CallReport_band(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_CallReport_band(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_CallReport(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, TrUserData).

d_field_CallReport_codecs(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_CallReport_codecs(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_CallReport_codecs(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_CallReport(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, cons(NewFValue, Prev, TrUserData), F@_9, TrUserData).

d_field_CallReport_provider_domain(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_CallReport_provider_domain(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_CallReport_provider_domain(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_CallReport(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, TrUserData).

skip_varint_CallReport(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> skip_varint_CallReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_varint_CallReport(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> dfp_read_field_def_CallReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_length_delimited_CallReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    skip_length_delimited_CallReport(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_length_delimited_CallReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CallReport(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_group_CallReport(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CallReport(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_32_CallReport(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> dfp_read_field_def_CallReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_64_CallReport(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> dfp_read_field_def_CallReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

decode_msg_StreamingVideoDetectPattern(Bin, TrUserData) -> dfp_read_field_def_StreamingVideoDetectPattern(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_StreamingVideoDetectPattern(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_StreamingVideoDetectPattern_dns_lookup_pattern(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_StreamingVideoDetectPattern(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_StreamingVideoDetectPattern_video_type(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_StreamingVideoDetectPattern(<<>>, 0, 0, F@_1, F@_2, _) -> #'StreamingVideoDetectPattern'{dns_lookup_pattern = F@_1, video_type = F@_2};
dfp_read_field_def_StreamingVideoDetectPattern(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_StreamingVideoDetectPattern(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_StreamingVideoDetectPattern(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_StreamingVideoDetectPattern(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_StreamingVideoDetectPattern(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StreamingVideoDetectPattern_dns_lookup_pattern(Rest, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_StreamingVideoDetectPattern_video_type(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StreamingVideoDetectPattern(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_StreamingVideoDetectPattern(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_StreamingVideoDetectPattern(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_StreamingVideoDetectPattern(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_StreamingVideoDetectPattern(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_StreamingVideoDetectPattern(<<>>, 0, 0, F@_1, F@_2, _) -> #'StreamingVideoDetectPattern'{dns_lookup_pattern = F@_1, video_type = F@_2}.

d_field_StreamingVideoDetectPattern_dns_lookup_pattern(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_StreamingVideoDetectPattern_dns_lookup_pattern(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_StreamingVideoDetectPattern_dns_lookup_pattern(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_StreamingVideoDetectPattern(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_StreamingVideoDetectPattern_video_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_StreamingVideoDetectPattern_video_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_StreamingVideoDetectPattern_video_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_StreamingVideoType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_StreamingVideoDetectPattern(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_StreamingVideoDetectPattern(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_StreamingVideoDetectPattern(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_StreamingVideoDetectPattern(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_StreamingVideoDetectPattern(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_StreamingVideoDetectPattern(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_StreamingVideoDetectPattern(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_StreamingVideoDetectPattern(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StreamingVideoDetectPattern(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_StreamingVideoDetectPattern(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StreamingVideoDetectPattern(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_StreamingVideoDetectPattern(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_StreamingVideoDetectPattern(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_StreamingVideoDetectPattern(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_StreamingVideoDetectPattern(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_StreamingVideoSessionStart(Bin, TrUserData) ->
    dfp_read_field_def_StreamingVideoSessionStart(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_StreamingVideoSessionStart(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StreamingVideoSessionStart_video_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StreamingVideoSessionStart(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StreamingVideoSessionStart_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StreamingVideoSessionStart(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StreamingVideoSessionStart_client_mac(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StreamingVideoSessionStart(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StreamingVideoSessionStart_server_ip(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StreamingVideoSessionStart(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StreamingVideoSessionStart_streaming_video_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StreamingVideoSessionStart(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'StreamingVideoSessionStart'{video_session_id = F@_1, session_id = F@_2, client_mac = F@_3, server_ip = F@_4, streaming_video_type = F@_5};
dfp_read_field_def_StreamingVideoSessionStart(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_StreamingVideoSessionStart(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_StreamingVideoSessionStart(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_StreamingVideoSessionStart(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_StreamingVideoSessionStart(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_StreamingVideoSessionStart_video_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> d_field_StreamingVideoSessionStart_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_StreamingVideoSessionStart_client_mac(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_StreamingVideoSessionStart_server_ip(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> d_field_StreamingVideoSessionStart_streaming_video_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StreamingVideoSessionStart(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_StreamingVideoSessionStart(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_StreamingVideoSessionStart(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_StreamingVideoSessionStart(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_StreamingVideoSessionStart(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_StreamingVideoSessionStart(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'StreamingVideoSessionStart'{video_session_id = F@_1, session_id = F@_2, client_mac = F@_3, server_ip = F@_4, streaming_video_type = F@_5}.

d_field_StreamingVideoSessionStart_video_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_StreamingVideoSessionStart_video_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StreamingVideoSessionStart_video_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingVideoSessionStart(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_StreamingVideoSessionStart_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_StreamingVideoSessionStart_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StreamingVideoSessionStart_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingVideoSessionStart(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_StreamingVideoSessionStart_client_mac(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_StreamingVideoSessionStart_client_mac(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StreamingVideoSessionStart_client_mac(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StreamingVideoSessionStart(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_StreamingVideoSessionStart_server_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_StreamingVideoSessionStart_server_ip(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StreamingVideoSessionStart_server_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StreamingVideoSessionStart(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_StreamingVideoSessionStart_streaming_video_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_StreamingVideoSessionStart_streaming_video_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StreamingVideoSessionStart_streaming_video_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_StreamingVideoType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_StreamingVideoSessionStart(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_StreamingVideoSessionStart(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_StreamingVideoSessionStart(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_StreamingVideoSessionStart(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StreamingVideoSessionStart(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_StreamingVideoSessionStart(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    skip_length_delimited_StreamingVideoSessionStart(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_StreamingVideoSessionStart(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StreamingVideoSessionStart(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_StreamingVideoSessionStart(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StreamingVideoSessionStart(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_StreamingVideoSessionStart(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StreamingVideoSessionStart(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_StreamingVideoSessionStart(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StreamingVideoSessionStart(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_StreamingVideoServerDetected(Bin, TrUserData) ->
    dfp_read_field_def_StreamingVideoServerDetected(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_StreamingVideoServerDetected(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_StreamingVideoServerDetected_video_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_StreamingVideoServerDetected(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_StreamingVideoServerDetected_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_StreamingVideoServerDetected(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_StreamingVideoServerDetected_client_mac(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_StreamingVideoServerDetected(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_StreamingVideoServerDetected_server_ip(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_StreamingVideoServerDetected(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_StreamingVideoServerDetected_server_dns_name(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_StreamingVideoServerDetected(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_StreamingVideoServerDetected_streaming_video_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_StreamingVideoServerDetected(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'StreamingVideoServerDetected'{video_session_id = F@_1, session_id = F@_2, client_mac = F@_3, server_ip = F@_4, server_dns_name = F@_5, streaming_video_type = F@_6};
dfp_read_field_def_StreamingVideoServerDetected(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_StreamingVideoServerDetected(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_StreamingVideoServerDetected(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_StreamingVideoServerDetected(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_StreamingVideoServerDetected(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_StreamingVideoServerDetected_video_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        16 -> d_field_StreamingVideoServerDetected_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        26 -> d_field_StreamingVideoServerDetected_client_mac(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        34 -> d_field_StreamingVideoServerDetected_server_ip(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        42 -> d_field_StreamingVideoServerDetected_server_dns_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        48 -> d_field_StreamingVideoServerDetected_streaming_video_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StreamingVideoServerDetected(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_StreamingVideoServerDetected(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_StreamingVideoServerDetected(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_StreamingVideoServerDetected(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_StreamingVideoServerDetected(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_StreamingVideoServerDetected(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'StreamingVideoServerDetected'{video_session_id = F@_1, session_id = F@_2, client_mac = F@_3, server_ip = F@_4, server_dns_name = F@_5, streaming_video_type = F@_6}.

d_field_StreamingVideoServerDetected_video_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_StreamingVideoServerDetected_video_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_StreamingVideoServerDetected_video_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingVideoServerDetected(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_StreamingVideoServerDetected_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_StreamingVideoServerDetected_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_StreamingVideoServerDetected_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingVideoServerDetected(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_StreamingVideoServerDetected_client_mac(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_StreamingVideoServerDetected_client_mac(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_StreamingVideoServerDetected_client_mac(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StreamingVideoServerDetected(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_StreamingVideoServerDetected_server_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_StreamingVideoServerDetected_server_ip(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_StreamingVideoServerDetected_server_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StreamingVideoServerDetected(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_StreamingVideoServerDetected_server_dns_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_StreamingVideoServerDetected_server_dns_name(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_StreamingVideoServerDetected_server_dns_name(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_StreamingVideoServerDetected(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_StreamingVideoServerDetected_streaming_video_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_StreamingVideoServerDetected_streaming_video_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_StreamingVideoServerDetected_streaming_video_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_StreamingVideoType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_StreamingVideoServerDetected(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_StreamingVideoServerDetected(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_StreamingVideoServerDetected(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_StreamingVideoServerDetected(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_StreamingVideoServerDetected(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_StreamingVideoServerDetected(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    skip_length_delimited_StreamingVideoServerDetected(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_StreamingVideoServerDetected(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StreamingVideoServerDetected(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_StreamingVideoServerDetected(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StreamingVideoServerDetected(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_StreamingVideoServerDetected(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_StreamingVideoServerDetected(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_StreamingVideoServerDetected(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_StreamingVideoServerDetected(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_StreamingVideoStop(Bin, TrUserData) ->
    dfp_read_field_def_StreamingVideoStop(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_StreamingVideoStop(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_StreamingVideoStop_video_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_StreamingVideoStop(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_StreamingVideoStop_session_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_StreamingVideoStop(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_StreamingVideoStop_client_mac(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_StreamingVideoStop(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_StreamingVideoStop_server_ip(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_StreamingVideoStop(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_StreamingVideoStop_total_bytes(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_StreamingVideoStop(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_StreamingVideoStop_streaming_video_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_StreamingVideoStop(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_StreamingVideoStop_duration_sec(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_StreamingVideoStop(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'StreamingVideoStop'{video_session_id = F@_1, session_id = F@_2, client_mac = F@_3, server_ip = F@_4, total_bytes = F@_5, streaming_video_type = F@_6, duration_sec = F@_7};
dfp_read_field_def_StreamingVideoStop(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dg_read_field_def_StreamingVideoStop(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_StreamingVideoStop(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_StreamingVideoStop(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_StreamingVideoStop(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_StreamingVideoStop_video_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        16 -> d_field_StreamingVideoStop_session_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        26 -> d_field_StreamingVideoStop_client_mac(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        34 -> d_field_StreamingVideoStop_server_ip(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        40 -> d_field_StreamingVideoStop_total_bytes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        48 -> d_field_StreamingVideoStop_streaming_video_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> d_field_StreamingVideoStop_duration_sec(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StreamingVideoStop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> skip_64_StreamingVideoStop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> skip_length_delimited_StreamingVideoStop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> skip_group_StreamingVideoStop(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> skip_32_StreamingVideoStop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
dg_read_field_def_StreamingVideoStop(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'StreamingVideoStop'{video_session_id = F@_1, session_id = F@_2, client_mac = F@_3, server_ip = F@_4, total_bytes = F@_5, streaming_video_type = F@_6, duration_sec = F@_7}.

d_field_StreamingVideoStop_video_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_StreamingVideoStop_video_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_StreamingVideoStop_video_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingVideoStop(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_StreamingVideoStop_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_StreamingVideoStop_session_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_StreamingVideoStop_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingVideoStop(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_StreamingVideoStop_client_mac(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_StreamingVideoStop_client_mac(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_StreamingVideoStop_client_mac(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StreamingVideoStop(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_StreamingVideoStop_server_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_StreamingVideoStop_server_ip(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_StreamingVideoStop_server_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StreamingVideoStop(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_StreamingVideoStop_total_bytes(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_StreamingVideoStop_total_bytes(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_StreamingVideoStop_total_bytes(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingVideoStop(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_StreamingVideoStop_streaming_video_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_StreamingVideoStop_streaming_video_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_StreamingVideoStop_streaming_video_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_StreamingVideoType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_StreamingVideoStop(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_StreamingVideoStop_duration_sec(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_StreamingVideoStop_duration_sec(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_StreamingVideoStop_duration_sec(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingVideoStop(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_StreamingVideoStop(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> skip_varint_StreamingVideoStop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_StreamingVideoStop(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_StreamingVideoStop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_StreamingVideoStop(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    skip_length_delimited_StreamingVideoStop(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_StreamingVideoStop(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StreamingVideoStop(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_StreamingVideoStop(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StreamingVideoStop(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_StreamingVideoStop(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_StreamingVideoStop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_StreamingVideoStop(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_StreamingVideoStop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_VideoVoiceReport(Bin, TrUserData) ->
    dfp_read_field_def_VideoVoiceReport(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_VideoVoiceReport(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_VideoVoiceReport_call_start(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_VideoVoiceReport(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_VideoVoiceReport_call_stop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_VideoVoiceReport(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_VideoVoiceReport_call_report(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_VideoVoiceReport(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_VideoVoiceReport_stream_video_stop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_VideoVoiceReport(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_VideoVoiceReport_stream_video_server(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_VideoVoiceReport(<<50, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_VideoVoiceReport_stream_video_session_start(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_VideoVoiceReport(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_VideoVoiceReport_timestamp_ms(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_VideoVoiceReport(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'VideoVoiceReport'{call_start = F@_1, call_stop = F@_2, call_report = F@_3, stream_video_stop = F@_4, stream_video_server = F@_5, stream_video_session_start = F@_6, timestamp_ms = F@_7};
dfp_read_field_def_VideoVoiceReport(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dg_read_field_def_VideoVoiceReport(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_VideoVoiceReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_VideoVoiceReport(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_VideoVoiceReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_VideoVoiceReport_call_start(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        18 -> d_field_VideoVoiceReport_call_stop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        26 -> d_field_VideoVoiceReport_call_report(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        34 -> d_field_VideoVoiceReport_stream_video_stop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        42 -> d_field_VideoVoiceReport_stream_video_server(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        50 -> d_field_VideoVoiceReport_stream_video_session_start(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> d_field_VideoVoiceReport_timestamp_ms(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_VideoVoiceReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> skip_64_VideoVoiceReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> skip_length_delimited_VideoVoiceReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> skip_group_VideoVoiceReport(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> skip_32_VideoVoiceReport(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
dg_read_field_def_VideoVoiceReport(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'VideoVoiceReport'{call_start = F@_1, call_stop = F@_2, call_report = F@_3, stream_video_stop = F@_4, stream_video_server = F@_5, stream_video_session_start = F@_6, timestamp_ms = F@_7}.

d_field_VideoVoiceReport_call_start(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_VideoVoiceReport_call_start(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_VideoVoiceReport_call_start(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_CallStart(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_VideoVoiceReport(RestF,
                                        0,
                                        0,
                                        if Prev == undefined -> NewFValue;
                                           true -> merge_msg_CallStart(Prev, NewFValue, TrUserData)
                                        end,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        TrUserData).

d_field_VideoVoiceReport_call_stop(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_VideoVoiceReport_call_stop(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_VideoVoiceReport_call_stop(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_CallStop(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_VideoVoiceReport(RestF,
                                        0,
                                        0,
                                        F@_1,
                                        if Prev == undefined -> NewFValue;
                                           true -> merge_msg_CallStop(Prev, NewFValue, TrUserData)
                                        end,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        TrUserData).

d_field_VideoVoiceReport_call_report(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_VideoVoiceReport_call_report(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_VideoVoiceReport_call_report(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_CallReport(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_VideoVoiceReport(RestF,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        if Prev == undefined -> NewFValue;
                                           true -> merge_msg_CallReport(Prev, NewFValue, TrUserData)
                                        end,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        TrUserData).

d_field_VideoVoiceReport_stream_video_stop(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_VideoVoiceReport_stream_video_stop(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_VideoVoiceReport_stream_video_stop(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_StreamingVideoStop(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_VideoVoiceReport(RestF,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        if Prev == undefined -> NewFValue;
                                           true -> merge_msg_StreamingVideoStop(Prev, NewFValue, TrUserData)
                                        end,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        TrUserData).

d_field_VideoVoiceReport_stream_video_server(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_VideoVoiceReport_stream_video_server(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_VideoVoiceReport_stream_video_server(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_StreamingVideoServerDetected(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_VideoVoiceReport(RestF,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        if Prev == undefined -> NewFValue;
                                           true -> merge_msg_StreamingVideoServerDetected(Prev, NewFValue, TrUserData)
                                        end,
                                        F@_6,
                                        F@_7,
                                        TrUserData).

d_field_VideoVoiceReport_stream_video_session_start(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_VideoVoiceReport_stream_video_session_start(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_VideoVoiceReport_stream_video_session_start(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_StreamingVideoSessionStart(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_VideoVoiceReport(RestF,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        if Prev == undefined -> NewFValue;
                                           true -> merge_msg_StreamingVideoSessionStart(Prev, NewFValue, TrUserData)
                                        end,
                                        F@_7,
                                        TrUserData).

d_field_VideoVoiceReport_timestamp_ms(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_VideoVoiceReport_timestamp_ms(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_VideoVoiceReport_timestamp_ms(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_VideoVoiceReport(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_VideoVoiceReport(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> skip_varint_VideoVoiceReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_VideoVoiceReport(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_VideoVoiceReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_VideoVoiceReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    skip_length_delimited_VideoVoiceReport(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_VideoVoiceReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VideoVoiceReport(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_VideoVoiceReport(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_VideoVoiceReport(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_VideoVoiceReport(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_VideoVoiceReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_VideoVoiceReport(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_VideoVoiceReport(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'decode_msg_EventReport.ClientAssocEvent'(Bin, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientAssocEvent'(Bin,
                                                      0,
                                                      0,
                                                      id(undefined, TrUserData),
                                                      id(undefined, TrUserData),
                                                      id(undefined, TrUserData),
                                                      id(undefined, TrUserData),
                                                      id(undefined, TrUserData),
                                                      id(undefined, TrUserData),
                                                      id(undefined, TrUserData),
                                                      id(undefined, TrUserData),
                                                      id(undefined, TrUserData),
                                                      id(undefined, TrUserData),
                                                      id(undefined, TrUserData),
                                                      TrUserData).

'dfp_read_field_def_EventReport.ClientAssocEvent'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_sta_mac'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_session_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_ssid'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_band'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_assoc_type'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_status'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_rssi'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_internal_sc'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<72, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_using11k'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<80, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_using11r'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<88, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientAssocEvent_using11v'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientAssocEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'EventReport.ClientAssocEvent'{sta_mac = F@_1, session_id = F@_2, ssid = F@_3, 'band' = F@_4, assoc_type = F@_5, status = F@_6, rssi = F@_7, internal_sc = F@_8, using11k = F@_9, using11r = F@_10, using11v = F@_11};
'dfp_read_field_def_EventReport.ClientAssocEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dg_read_field_def_EventReport.ClientAssocEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'dg_read_field_def_EventReport.ClientAssocEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_EventReport.ClientAssocEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dg_read_field_def_EventReport.ClientAssocEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_EventReport.ClientAssocEvent_sta_mac'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        16 -> 'd_field_EventReport.ClientAssocEvent_session_id'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        26 -> 'd_field_EventReport.ClientAssocEvent_ssid'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        32 -> 'd_field_EventReport.ClientAssocEvent_band'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        40 -> 'd_field_EventReport.ClientAssocEvent_assoc_type'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        48 -> 'd_field_EventReport.ClientAssocEvent_status'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        56 -> 'd_field_EventReport.ClientAssocEvent_rssi'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        64 -> 'd_field_EventReport.ClientAssocEvent_internal_sc'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        72 -> 'd_field_EventReport.ClientAssocEvent_using11k'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        80 -> 'd_field_EventReport.ClientAssocEvent_using11r'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        88 -> 'd_field_EventReport.ClientAssocEvent_using11v'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_EventReport.ClientAssocEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                1 -> 'skip_64_EventReport.ClientAssocEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                2 -> 'skip_length_delimited_EventReport.ClientAssocEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                3 -> 'skip_group_EventReport.ClientAssocEvent'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                5 -> 'skip_32_EventReport.ClientAssocEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
            end
    end;
'dg_read_field_def_EventReport.ClientAssocEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'EventReport.ClientAssocEvent'{sta_mac = F@_1, session_id = F@_2, ssid = F@_3, 'band' = F@_4, assoc_type = F@_5, status = F@_6, rssi = F@_7, internal_sc = F@_8, using11k = F@_9, using11r = F@_10, using11v = F@_11}.

'd_field_EventReport.ClientAssocEvent_sta_mac'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_sta_mac'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_sta_mac'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientAssocEvent_session_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_session_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_session_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientAssocEvent_ssid'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_ssid'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_ssid'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientAssocEvent_band'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_band'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_band'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientAssocEvent_assoc_type'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_assoc_type'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_assoc_type'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_AssocType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientAssocEvent_status'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_status'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_status'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientAssocEvent_rssi'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_rssi'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_rssi'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientAssocEvent_internal_sc'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_internal_sc'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_internal_sc'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientAssocEvent_using11k'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_using11k'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_using11k'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientAssocEvent_using11r'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_using11r'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_using11r'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, F@_11, TrUserData).

'd_field_EventReport.ClientAssocEvent_using11v'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAssocEvent_using11v'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientAssocEvent_using11v'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAssocEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewFValue, TrUserData).

'skip_varint_EventReport.ClientAssocEvent'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'skip_varint_EventReport.ClientAssocEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_varint_EventReport.ClientAssocEvent'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientAssocEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_length_delimited_EventReport.ClientAssocEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'skip_length_delimited_EventReport.ClientAssocEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_length_delimited_EventReport.ClientAssocEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_EventReport.ClientAssocEvent'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_group_EventReport.ClientAssocEvent'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_EventReport.ClientAssocEvent'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_32_EventReport.ClientAssocEvent'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientAssocEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_64_EventReport.ClientAssocEvent'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientAssocEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'decode_msg_EventReport.ClientAuthEvent'(Bin, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientAuthEvent'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_EventReport.ClientAuthEvent'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientAuthEvent_sta_mac'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientAuthEvent'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientAuthEvent_session_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientAuthEvent'(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientAuthEvent_ssid'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientAuthEvent'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientAuthEvent_band'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientAuthEvent'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientAuthEvent_auth_status'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientAuthEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'EventReport.ClientAuthEvent'{sta_mac = F@_1, session_id = F@_2, ssid = F@_3, 'band' = F@_4, auth_status = F@_5};
'dfp_read_field_def_EventReport.ClientAuthEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dg_read_field_def_EventReport.ClientAuthEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_EventReport.ClientAuthEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_EventReport.ClientAuthEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dg_read_field_def_EventReport.ClientAuthEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_EventReport.ClientAuthEvent_sta_mac'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> 'd_field_EventReport.ClientAuthEvent_session_id'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> 'd_field_EventReport.ClientAuthEvent_ssid'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        32 -> 'd_field_EventReport.ClientAuthEvent_band'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> 'd_field_EventReport.ClientAuthEvent_auth_status'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_EventReport.ClientAuthEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> 'skip_64_EventReport.ClientAuthEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> 'skip_length_delimited_EventReport.ClientAuthEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> 'skip_group_EventReport.ClientAuthEvent'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> 'skip_32_EventReport.ClientAuthEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
'dg_read_field_def_EventReport.ClientAuthEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'EventReport.ClientAuthEvent'{sta_mac = F@_1, session_id = F@_2, ssid = F@_3, 'band' = F@_4, auth_status = F@_5}.

'd_field_EventReport.ClientAuthEvent_sta_mac'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAuthEvent_sta_mac'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientAuthEvent_sta_mac'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientAuthEvent'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

'd_field_EventReport.ClientAuthEvent_session_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAuthEvent_session_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientAuthEvent_session_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAuthEvent'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

'd_field_EventReport.ClientAuthEvent_ssid'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_EventReport.ClientAuthEvent_ssid'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientAuthEvent_ssid'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientAuthEvent'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

'd_field_EventReport.ClientAuthEvent_band'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_EventReport.ClientAuthEvent_band'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientAuthEvent_band'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAuthEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

'd_field_EventReport.ClientAuthEvent_auth_status'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientAuthEvent_auth_status'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientAuthEvent_auth_status'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientAuthEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

'skip_varint_EventReport.ClientAuthEvent'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'skip_varint_EventReport.ClientAuthEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_EventReport.ClientAuthEvent'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_EventReport.ClientAuthEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_EventReport.ClientAuthEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'skip_length_delimited_EventReport.ClientAuthEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_length_delimited_EventReport.ClientAuthEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_EventReport.ClientAuthEvent'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_EventReport.ClientAuthEvent'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_EventReport.ClientAuthEvent'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_32_EventReport.ClientAuthEvent'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_EventReport.ClientAuthEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_EventReport.ClientAuthEvent'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_EventReport.ClientAuthEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_EventReport.ClientDisconnectEvent'(Bin, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(Bin,
                                                           0,
                                                           0,
                                                           id(undefined, TrUserData),
                                                           id(undefined, TrUserData),
                                                           id(undefined, TrUserData),
                                                           id(undefined, TrUserData),
                                                           id(undefined, TrUserData),
                                                           id(undefined, TrUserData),
                                                           id(undefined, TrUserData),
                                                           id(undefined, TrUserData),
                                                           id(undefined, TrUserData),
                                                           id(undefined, TrUserData),
                                                           id(undefined, TrUserData),
                                                           TrUserData).

'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_sta_mac'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_session_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_reason'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_dev_type'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_fr_type'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_lsent_up_ts_in_us'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_lrcv_up_ts_in_us'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_internal_rc'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<72, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_rssi'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<82, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_ssid'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<88, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'd_field_EventReport.ClientDisconnectEvent_band'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'EventReport.ClientDisconnectEvent'{sta_mac = F@_1, session_id = F@_2, reason = F@_3, dev_type = F@_4, fr_type = F@_5, lsent_up_ts_in_us = F@_6, lrcv_up_ts_in_us = F@_7, internal_rc = F@_8, rssi = F@_9, ssid = F@_10, 'band' = F@_11};
'dfp_read_field_def_EventReport.ClientDisconnectEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dg_read_field_def_EventReport.ClientDisconnectEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'dg_read_field_def_EventReport.ClientDisconnectEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_EventReport.ClientDisconnectEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'dg_read_field_def_EventReport.ClientDisconnectEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_EventReport.ClientDisconnectEvent_sta_mac'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        16 -> 'd_field_EventReport.ClientDisconnectEvent_session_id'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        24 -> 'd_field_EventReport.ClientDisconnectEvent_reason'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        32 -> 'd_field_EventReport.ClientDisconnectEvent_dev_type'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        40 -> 'd_field_EventReport.ClientDisconnectEvent_fr_type'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        48 -> 'd_field_EventReport.ClientDisconnectEvent_lsent_up_ts_in_us'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        56 -> 'd_field_EventReport.ClientDisconnectEvent_lrcv_up_ts_in_us'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        64 -> 'd_field_EventReport.ClientDisconnectEvent_internal_rc'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        72 -> 'd_field_EventReport.ClientDisconnectEvent_rssi'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        82 -> 'd_field_EventReport.ClientDisconnectEvent_ssid'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        88 -> 'd_field_EventReport.ClientDisconnectEvent_band'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_EventReport.ClientDisconnectEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                1 -> 'skip_64_EventReport.ClientDisconnectEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                2 -> 'skip_length_delimited_EventReport.ClientDisconnectEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                3 -> 'skip_group_EventReport.ClientDisconnectEvent'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                5 -> 'skip_32_EventReport.ClientDisconnectEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
            end
    end;
'dg_read_field_def_EventReport.ClientDisconnectEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'EventReport.ClientDisconnectEvent'{sta_mac = F@_1, session_id = F@_2, reason = F@_3, dev_type = F@_4, fr_type = F@_5, lsent_up_ts_in_us = F@_6, lrcv_up_ts_in_us = F@_7, internal_rc = F@_8, rssi = F@_9, ssid = F@_10, 'band' = F@_11}.

'd_field_EventReport.ClientDisconnectEvent_sta_mac'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_sta_mac'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_sta_mac'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientDisconnectEvent_session_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_session_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_session_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientDisconnectEvent_reason'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_reason'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_reason'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientDisconnectEvent_dev_type'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_dev_type'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_dev_type'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_DeviceType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientDisconnectEvent_fr_type'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_fr_type'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_fr_type'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_FrameType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientDisconnectEvent_lsent_up_ts_in_us'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_lsent_up_ts_in_us'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_lsent_up_ts_in_us'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientDisconnectEvent_lrcv_up_ts_in_us'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_lrcv_up_ts_in_us'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_lrcv_up_ts_in_us'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientDisconnectEvent_internal_rc'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_internal_rc'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_internal_rc'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientDisconnectEvent_rssi'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_rssi'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_rssi'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, TrUserData).

'd_field_EventReport.ClientDisconnectEvent_ssid'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_ssid'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_ssid'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, F@_11, TrUserData).

'd_field_EventReport.ClientDisconnectEvent_band'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientDisconnectEvent_band'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'd_field_EventReport.ClientDisconnectEvent_band'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewFValue, TrUserData).

'skip_varint_EventReport.ClientDisconnectEvent'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'skip_varint_EventReport.ClientDisconnectEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_varint_EventReport.ClientDisconnectEvent'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_length_delimited_EventReport.ClientDisconnectEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    'skip_length_delimited_EventReport.ClientDisconnectEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_length_delimited_EventReport.ClientDisconnectEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_group_EventReport.ClientDisconnectEvent'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_32_EventReport.ClientDisconnectEvent'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'skip_64_EventReport.ClientDisconnectEvent'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientDisconnectEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

'decode_msg_EventReport.ClientConnectEvent'(Bin, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientConnectEvent'(Bin,
                                                        0,
                                                        0,
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        id(undefined, TrUserData),
                                                        TrUserData).

'dfp_read_field_def_EventReport.ClientConnectEvent'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_sta_mac'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_session_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_band'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_assoc_type'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_ssid'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_sec_type'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_fbt_used'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<66, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_ip_addr'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<74, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_clt_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<80, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_auth'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<88, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_assoc'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<96, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_eapol'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<104, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_port_enable'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<112, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_first_rx'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<120, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_first_tx'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<128, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_using11k'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<136, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_using11r'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<144, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_using11v'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<152, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_ip'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<160, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'd_field_EventReport.ClientConnectEvent_assoc_rssi'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dfp_read_field_def_EventReport.ClientConnectEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, _) ->
    #'EventReport.ClientConnectEvent'{sta_mac = F@_1, session_id = F@_2, 'band' = F@_3, assoc_type = F@_4, ssid = F@_5, sec_type = F@_6, fbt_used = F@_7, ip_addr = F@_8, clt_id = F@_9, ev_time_bootup_in_us_auth = F@_10,
                                      ev_time_bootup_in_us_assoc = F@_11, ev_time_bootup_in_us_eapol = F@_12, ev_time_bootup_in_us_port_enable = F@_13, ev_time_bootup_in_us_first_rx = F@_14, ev_time_bootup_in_us_first_tx = F@_15, using11k = F@_16, using11r = F@_17, using11v = F@_18,
                                      ev_time_bootup_in_us_ip = F@_19, assoc_rssi = F@_20};
'dfp_read_field_def_EventReport.ClientConnectEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'dg_read_field_def_EventReport.ClientConnectEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'dg_read_field_def_EventReport.ClientConnectEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_EventReport.ClientConnectEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'dg_read_field_def_EventReport.ClientConnectEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_EventReport.ClientConnectEvent_sta_mac'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        16 -> 'd_field_EventReport.ClientConnectEvent_session_id'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        24 -> 'd_field_EventReport.ClientConnectEvent_band'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        32 -> 'd_field_EventReport.ClientConnectEvent_assoc_type'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        42 -> 'd_field_EventReport.ClientConnectEvent_ssid'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        48 -> 'd_field_EventReport.ClientConnectEvent_sec_type'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        56 -> 'd_field_EventReport.ClientConnectEvent_fbt_used'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        66 -> 'd_field_EventReport.ClientConnectEvent_ip_addr'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        74 -> 'd_field_EventReport.ClientConnectEvent_clt_id'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        80 -> 'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_auth'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        88 -> 'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_assoc'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        96 -> 'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_eapol'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        104 -> 'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_port_enable'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        112 -> 'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_first_rx'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        120 -> 'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_first_tx'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        128 -> 'd_field_EventReport.ClientConnectEvent_using11k'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        136 -> 'd_field_EventReport.ClientConnectEvent_using11r'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        144 -> 'd_field_EventReport.ClientConnectEvent_using11v'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        152 -> 'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_ip'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        160 -> 'd_field_EventReport.ClientConnectEvent_assoc_rssi'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_EventReport.ClientConnectEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
                1 -> 'skip_64_EventReport.ClientConnectEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
                2 -> 'skip_length_delimited_EventReport.ClientConnectEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
                3 -> 'skip_group_EventReport.ClientConnectEvent'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
                5 -> 'skip_32_EventReport.ClientConnectEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
            end
    end;
'dg_read_field_def_EventReport.ClientConnectEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, _) ->
    #'EventReport.ClientConnectEvent'{sta_mac = F@_1, session_id = F@_2, 'band' = F@_3, assoc_type = F@_4, ssid = F@_5, sec_type = F@_6, fbt_used = F@_7, ip_addr = F@_8, clt_id = F@_9, ev_time_bootup_in_us_auth = F@_10,
                                      ev_time_bootup_in_us_assoc = F@_11, ev_time_bootup_in_us_eapol = F@_12, ev_time_bootup_in_us_port_enable = F@_13, ev_time_bootup_in_us_first_rx = F@_14, ev_time_bootup_in_us_first_tx = F@_15, using11k = F@_16, using11r = F@_17, using11v = F@_18,
                                      ev_time_bootup_in_us_ip = F@_19, assoc_rssi = F@_20}.

'd_field_EventReport.ClientConnectEvent_sta_mac'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_sta_mac'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_sta_mac'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_session_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_session_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_session_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_band'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_band'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_band'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RadioBandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_assoc_type'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_assoc_type'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_assoc_type'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_AssocType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_ssid'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_ssid'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_ssid'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_sec_type'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_sec_type'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_sec_type'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_SecurityType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_fbt_used'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_fbt_used'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_fbt_used'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_ip_addr'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_ip_addr'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_ip_addr'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_clt_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_clt_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_clt_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_auth'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_auth'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_auth'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_assoc'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_assoc'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_assoc'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewFValue, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_eapol'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_eapol'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_eapol'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, NewFValue, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_port_enable'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
                                                                          TrUserData)
    when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_port_enable'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_port_enable'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, NewFValue, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_first_rx'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_first_rx'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_first_rx'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, NewFValue, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_first_tx'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_first_tx'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_first_tx'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, NewFValue, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_using11k'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_using11k'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_using11k'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, NewFValue, F@_17, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_using11r'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_using11r'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_using11r'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, _, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, NewFValue, F@_18, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_using11v'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_using11v'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_using11v'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, _, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, NewFValue, F@_19, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_ip'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_ip'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_ev_time_bootup_in_us_ip'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, _, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, NewFValue, F@_20, TrUserData).

'd_field_EventReport.ClientConnectEvent_assoc_rssi'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientConnectEvent_assoc_rssi'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'd_field_EventReport.ClientConnectEvent_assoc_rssi'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientConnectEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, NewFValue, TrUserData).

'skip_varint_EventReport.ClientConnectEvent'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'skip_varint_EventReport.ClientConnectEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'skip_varint_EventReport.ClientConnectEvent'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientConnectEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'skip_length_delimited_EventReport.ClientConnectEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) when N < 57 ->
    'skip_length_delimited_EventReport.ClientConnectEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
'skip_length_delimited_EventReport.ClientConnectEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_EventReport.ClientConnectEvent'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'skip_group_EventReport.ClientConnectEvent'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_EventReport.ClientConnectEvent'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'skip_32_EventReport.ClientConnectEvent'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientConnectEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'skip_64_EventReport.ClientConnectEvent'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientConnectEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData).

'decode_msg_EventReport.ClientFailureEvent'(Bin, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientFailureEvent'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_EventReport.ClientFailureEvent'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientFailureEvent_sta_mac'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientFailureEvent'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientFailureEvent_session_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientFailureEvent'(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientFailureEvent_ssid'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientFailureEvent'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientFailureEvent_reason_code'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientFailureEvent'(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientFailureEvent_reason_str'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientFailureEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'EventReport.ClientFailureEvent'{sta_mac = F@_1, session_id = F@_2, ssid = F@_3, reason_code = F@_4, reason_str = F@_5};
'dfp_read_field_def_EventReport.ClientFailureEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dg_read_field_def_EventReport.ClientFailureEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_EventReport.ClientFailureEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_EventReport.ClientFailureEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dg_read_field_def_EventReport.ClientFailureEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_EventReport.ClientFailureEvent_sta_mac'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> 'd_field_EventReport.ClientFailureEvent_session_id'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> 'd_field_EventReport.ClientFailureEvent_ssid'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        32 -> 'd_field_EventReport.ClientFailureEvent_reason_code'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> 'd_field_EventReport.ClientFailureEvent_reason_str'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_EventReport.ClientFailureEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> 'skip_64_EventReport.ClientFailureEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> 'skip_length_delimited_EventReport.ClientFailureEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> 'skip_group_EventReport.ClientFailureEvent'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> 'skip_32_EventReport.ClientFailureEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
'dg_read_field_def_EventReport.ClientFailureEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'EventReport.ClientFailureEvent'{sta_mac = F@_1, session_id = F@_2, ssid = F@_3, reason_code = F@_4, reason_str = F@_5}.

'd_field_EventReport.ClientFailureEvent_sta_mac'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientFailureEvent_sta_mac'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientFailureEvent_sta_mac'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientFailureEvent'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

'd_field_EventReport.ClientFailureEvent_session_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientFailureEvent_session_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientFailureEvent_session_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientFailureEvent'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

'd_field_EventReport.ClientFailureEvent_ssid'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientFailureEvent_ssid'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientFailureEvent_ssid'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientFailureEvent'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

'd_field_EventReport.ClientFailureEvent_reason_code'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientFailureEvent_reason_code'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientFailureEvent_reason_code'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_EventReport.ClientFailureEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

'd_field_EventReport.ClientFailureEvent_reason_str'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientFailureEvent_reason_str'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientFailureEvent_reason_str'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientFailureEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

'skip_varint_EventReport.ClientFailureEvent'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'skip_varint_EventReport.ClientFailureEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_EventReport.ClientFailureEvent'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_EventReport.ClientFailureEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_EventReport.ClientFailureEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'skip_length_delimited_EventReport.ClientFailureEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_length_delimited_EventReport.ClientFailureEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_EventReport.ClientFailureEvent'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_EventReport.ClientFailureEvent'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_EventReport.ClientFailureEvent'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_32_EventReport.ClientFailureEvent'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_EventReport.ClientFailureEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_EventReport.ClientFailureEvent'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_EventReport.ClientFailureEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_EventReport.ClientFirstDataEvent'(Bin, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientFirstDataEvent'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_EventReport.ClientFirstDataEvent'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_EventReport.ClientFirstDataEvent_sta_mac'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_EventReport.ClientFirstDataEvent'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_EventReport.ClientFirstDataEvent_session_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_EventReport.ClientFirstDataEvent'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_EventReport.ClientFirstDataEvent_fdata_tx_up_ts_in_us'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_EventReport.ClientFirstDataEvent'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_EventReport.ClientFirstDataEvent_fdata_rx_up_ts_in_us'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_EventReport.ClientFirstDataEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'EventReport.ClientFirstDataEvent'{sta_mac = F@_1, session_id = F@_2, fdata_tx_up_ts_in_us = F@_3, fdata_rx_up_ts_in_us = F@_4};
'dfp_read_field_def_EventReport.ClientFirstDataEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dg_read_field_def_EventReport.ClientFirstDataEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'dg_read_field_def_EventReport.ClientFirstDataEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_EventReport.ClientFirstDataEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dg_read_field_def_EventReport.ClientFirstDataEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_EventReport.ClientFirstDataEvent_sta_mac'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> 'd_field_EventReport.ClientFirstDataEvent_session_id'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> 'd_field_EventReport.ClientFirstDataEvent_fdata_tx_up_ts_in_us'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> 'd_field_EventReport.ClientFirstDataEvent_fdata_rx_up_ts_in_us'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_EventReport.ClientFirstDataEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> 'skip_64_EventReport.ClientFirstDataEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> 'skip_length_delimited_EventReport.ClientFirstDataEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> 'skip_group_EventReport.ClientFirstDataEvent'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> 'skip_32_EventReport.ClientFirstDataEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
'dg_read_field_def_EventReport.ClientFirstDataEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #'EventReport.ClientFirstDataEvent'{sta_mac = F@_1, session_id = F@_2, fdata_tx_up_ts_in_us = F@_3, fdata_rx_up_ts_in_us = F@_4}.

'd_field_EventReport.ClientFirstDataEvent_sta_mac'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientFirstDataEvent_sta_mac'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_EventReport.ClientFirstDataEvent_sta_mac'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientFirstDataEvent'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

'd_field_EventReport.ClientFirstDataEvent_session_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientFirstDataEvent_session_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_EventReport.ClientFirstDataEvent_session_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientFirstDataEvent'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

'd_field_EventReport.ClientFirstDataEvent_fdata_tx_up_ts_in_us'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientFirstDataEvent_fdata_tx_up_ts_in_us'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_EventReport.ClientFirstDataEvent_fdata_tx_up_ts_in_us'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientFirstDataEvent'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, TrUserData).

'd_field_EventReport.ClientFirstDataEvent_fdata_rx_up_ts_in_us'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientFirstDataEvent_fdata_rx_up_ts_in_us'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_EventReport.ClientFirstDataEvent_fdata_rx_up_ts_in_us'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientFirstDataEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, TrUserData).

'skip_varint_EventReport.ClientFirstDataEvent'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'skip_varint_EventReport.ClientFirstDataEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_EventReport.ClientFirstDataEvent'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_EventReport.ClientFirstDataEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_length_delimited_EventReport.ClientFirstDataEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    'skip_length_delimited_EventReport.ClientFirstDataEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_length_delimited_EventReport.ClientFirstDataEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_EventReport.ClientFirstDataEvent'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_group_EventReport.ClientFirstDataEvent'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_EventReport.ClientFirstDataEvent'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_32_EventReport.ClientFirstDataEvent'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_EventReport.ClientFirstDataEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_64_EventReport.ClientFirstDataEvent'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_EventReport.ClientFirstDataEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_EventReport.ClientIdEvent'(Bin, TrUserData) -> 'dfp_read_field_def_EventReport.ClientIdEvent'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_EventReport.ClientIdEvent'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_EventReport.ClientIdEvent_clt_mac'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_EventReport.ClientIdEvent'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_EventReport.ClientIdEvent_session_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_EventReport.ClientIdEvent'(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_EventReport.ClientIdEvent_clt_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_EventReport.ClientIdEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'EventReport.ClientIdEvent'{clt_mac = F@_1, session_id = F@_2, clt_id = F@_3};
'dfp_read_field_def_EventReport.ClientIdEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_EventReport.ClientIdEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_EventReport.ClientIdEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_EventReport.ClientIdEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_EventReport.ClientIdEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_EventReport.ClientIdEvent_clt_mac'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> 'd_field_EventReport.ClientIdEvent_session_id'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> 'd_field_EventReport.ClientIdEvent_clt_id'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_EventReport.ClientIdEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_EventReport.ClientIdEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_EventReport.ClientIdEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_EventReport.ClientIdEvent'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_EventReport.ClientIdEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_EventReport.ClientIdEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'EventReport.ClientIdEvent'{clt_mac = F@_1, session_id = F@_2, clt_id = F@_3}.

'd_field_EventReport.ClientIdEvent_clt_mac'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_EventReport.ClientIdEvent_clt_mac'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_EventReport.ClientIdEvent_clt_mac'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientIdEvent'(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

'd_field_EventReport.ClientIdEvent_session_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_EventReport.ClientIdEvent_session_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_EventReport.ClientIdEvent_session_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientIdEvent'(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

'd_field_EventReport.ClientIdEvent_clt_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_EventReport.ClientIdEvent_clt_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_EventReport.ClientIdEvent_clt_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientIdEvent'(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

'skip_varint_EventReport.ClientIdEvent'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_EventReport.ClientIdEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_EventReport.ClientIdEvent'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_EventReport.ClientIdEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_EventReport.ClientIdEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_EventReport.ClientIdEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_EventReport.ClientIdEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_EventReport.ClientIdEvent'(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

'skip_group_EventReport.ClientIdEvent'(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_EventReport.ClientIdEvent'(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_32_EventReport.ClientIdEvent'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_EventReport.ClientIdEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_64_EventReport.ClientIdEvent'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_EventReport.ClientIdEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_EventReport.ClientIpEvent'(Bin, TrUserData) -> 'dfp_read_field_def_EventReport.ClientIpEvent'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_EventReport.ClientIpEvent'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_EventReport.ClientIpEvent_sta_mac'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_EventReport.ClientIpEvent'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_EventReport.ClientIpEvent_session_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_EventReport.ClientIpEvent'(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_EventReport.ClientIpEvent_ip_addr'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_EventReport.ClientIpEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'EventReport.ClientIpEvent'{sta_mac = F@_1, session_id = F@_2, ip_addr = F@_3};
'dfp_read_field_def_EventReport.ClientIpEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_EventReport.ClientIpEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_EventReport.ClientIpEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_EventReport.ClientIpEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_EventReport.ClientIpEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_EventReport.ClientIpEvent_sta_mac'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> 'd_field_EventReport.ClientIpEvent_session_id'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> 'd_field_EventReport.ClientIpEvent_ip_addr'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_EventReport.ClientIpEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_EventReport.ClientIpEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_EventReport.ClientIpEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_EventReport.ClientIpEvent'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_EventReport.ClientIpEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_EventReport.ClientIpEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #'EventReport.ClientIpEvent'{sta_mac = F@_1, session_id = F@_2, ip_addr = F@_3}.

'd_field_EventReport.ClientIpEvent_sta_mac'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_EventReport.ClientIpEvent_sta_mac'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_EventReport.ClientIpEvent_sta_mac'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientIpEvent'(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

'd_field_EventReport.ClientIpEvent_session_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_EventReport.ClientIpEvent_session_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_EventReport.ClientIpEvent_session_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientIpEvent'(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

'd_field_EventReport.ClientIpEvent_ip_addr'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_EventReport.ClientIpEvent_ip_addr'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'd_field_EventReport.ClientIpEvent_ip_addr'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientIpEvent'(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

'skip_varint_EventReport.ClientIpEvent'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_EventReport.ClientIpEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_EventReport.ClientIpEvent'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_EventReport.ClientIpEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_EventReport.ClientIpEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_EventReport.ClientIpEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_EventReport.ClientIpEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_EventReport.ClientIpEvent'(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

'skip_group_EventReport.ClientIpEvent'(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_EventReport.ClientIpEvent'(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_32_EventReport.ClientIpEvent'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_EventReport.ClientIpEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'skip_64_EventReport.ClientIpEvent'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_EventReport.ClientIpEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_EventReport.ClientTimeoutEvent'(Bin, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientTimeoutEvent'(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_EventReport.ClientTimeoutEvent'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientTimeoutEvent_sta_mac'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientTimeoutEvent'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientTimeoutEvent_session_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientTimeoutEvent'(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientTimeoutEvent_r_code'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientTimeoutEvent'(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientTimeoutEvent_last_sent_up_ts_in_us'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientTimeoutEvent'(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_EventReport.ClientTimeoutEvent_last_rcv_up_ts_in_us'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_EventReport.ClientTimeoutEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'EventReport.ClientTimeoutEvent'{sta_mac = F@_1, session_id = F@_2, r_code = F@_3, last_sent_up_ts_in_us = F@_4, last_rcv_up_ts_in_us = F@_5};
'dfp_read_field_def_EventReport.ClientTimeoutEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dg_read_field_def_EventReport.ClientTimeoutEvent'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_EventReport.ClientTimeoutEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_EventReport.ClientTimeoutEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dg_read_field_def_EventReport.ClientTimeoutEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_EventReport.ClientTimeoutEvent_sta_mac'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> 'd_field_EventReport.ClientTimeoutEvent_session_id'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> 'd_field_EventReport.ClientTimeoutEvent_r_code'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        32 -> 'd_field_EventReport.ClientTimeoutEvent_last_sent_up_ts_in_us'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> 'd_field_EventReport.ClientTimeoutEvent_last_rcv_up_ts_in_us'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_EventReport.ClientTimeoutEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> 'skip_64_EventReport.ClientTimeoutEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> 'skip_length_delimited_EventReport.ClientTimeoutEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> 'skip_group_EventReport.ClientTimeoutEvent'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> 'skip_32_EventReport.ClientTimeoutEvent'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
'dg_read_field_def_EventReport.ClientTimeoutEvent'(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'EventReport.ClientTimeoutEvent'{sta_mac = F@_1, session_id = F@_2, r_code = F@_3, last_sent_up_ts_in_us = F@_4, last_rcv_up_ts_in_us = F@_5}.

'd_field_EventReport.ClientTimeoutEvent_sta_mac'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientTimeoutEvent_sta_mac'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientTimeoutEvent_sta_mac'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientTimeoutEvent'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

'd_field_EventReport.ClientTimeoutEvent_session_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientTimeoutEvent_session_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientTimeoutEvent_session_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientTimeoutEvent'(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

'd_field_EventReport.ClientTimeoutEvent_r_code'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientTimeoutEvent_r_code'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientTimeoutEvent_r_code'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_CTReasonType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientTimeoutEvent'(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

'd_field_EventReport.ClientTimeoutEvent_last_sent_up_ts_in_us'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientTimeoutEvent_last_sent_up_ts_in_us'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientTimeoutEvent_last_sent_up_ts_in_us'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientTimeoutEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

'd_field_EventReport.ClientTimeoutEvent_last_rcv_up_ts_in_us'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientTimeoutEvent_last_rcv_up_ts_in_us'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_EventReport.ClientTimeoutEvent_last_rcv_up_ts_in_us'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientTimeoutEvent'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

'skip_varint_EventReport.ClientTimeoutEvent'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'skip_varint_EventReport.ClientTimeoutEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_EventReport.ClientTimeoutEvent'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_EventReport.ClientTimeoutEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_EventReport.ClientTimeoutEvent'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'skip_length_delimited_EventReport.ClientTimeoutEvent'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_length_delimited_EventReport.ClientTimeoutEvent'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_EventReport.ClientTimeoutEvent'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_EventReport.ClientTimeoutEvent'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_EventReport.ClientTimeoutEvent'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_32_EventReport.ClientTimeoutEvent'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_EventReport.ClientTimeoutEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_EventReport.ClientTimeoutEvent'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_EventReport.ClientTimeoutEvent'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_EventReport.ClientSession'(Bin, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientSession'(Bin,
                                                   0,
                                                   0,
                                                   id(undefined, TrUserData),
                                                   id([], TrUserData),
                                                   id([], TrUserData),
                                                   id([], TrUserData),
                                                   id([], TrUserData),
                                                   id([], TrUserData),
                                                   id([], TrUserData),
                                                   id([], TrUserData),
                                                   id([], TrUserData),
                                                   id([], TrUserData),
                                                   TrUserData).

'dfp_read_field_def_EventReport.ClientSession'(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_EventReport.ClientSession_session_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_EventReport.ClientSession'(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_EventReport.ClientSession_client_assoc_event'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_EventReport.ClientSession'(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_EventReport.ClientSession_client_auth_event'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_EventReport.ClientSession'(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_EventReport.ClientSession_client_disconnect_event'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_EventReport.ClientSession'(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_EventReport.ClientSession_client_failure_event'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_EventReport.ClientSession'(<<50, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_EventReport.ClientSession_client_first_data_event'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_EventReport.ClientSession'(<<58, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_EventReport.ClientSession_client_id_event'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_EventReport.ClientSession'(<<66, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_EventReport.ClientSession_client_ip_event'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_EventReport.ClientSession'(<<74, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_EventReport.ClientSession_client_timeout_event'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_EventReport.ClientSession'(<<82, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'd_field_EventReport.ClientSession_client_connect_event'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dfp_read_field_def_EventReport.ClientSession'(<<>>, 0, 0, F@_1, R1, R2, R3, R4, R5, R6, R7, R8, R9, TrUserData) ->
    #'EventReport.ClientSession'{session_id = F@_1, client_assoc_event = lists_reverse(R1, TrUserData), client_auth_event = lists_reverse(R2, TrUserData), client_disconnect_event = lists_reverse(R3, TrUserData),
                                 client_failure_event = lists_reverse(R4, TrUserData), client_first_data_event = lists_reverse(R5, TrUserData), client_id_event = lists_reverse(R6, TrUserData), client_ip_event = lists_reverse(R7, TrUserData),
                                 client_timeout_event = lists_reverse(R8, TrUserData), client_connect_event = lists_reverse(R9, TrUserData)};
'dfp_read_field_def_EventReport.ClientSession'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'dg_read_field_def_EventReport.ClientSession'(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'dg_read_field_def_EventReport.ClientSession'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_EventReport.ClientSession'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'dg_read_field_def_EventReport.ClientSession'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_EventReport.ClientSession_session_id'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        18 -> 'd_field_EventReport.ClientSession_client_assoc_event'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        26 -> 'd_field_EventReport.ClientSession_client_auth_event'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        34 -> 'd_field_EventReport.ClientSession_client_disconnect_event'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        42 -> 'd_field_EventReport.ClientSession_client_failure_event'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        50 -> 'd_field_EventReport.ClientSession_client_first_data_event'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        58 -> 'd_field_EventReport.ClientSession_client_id_event'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        66 -> 'd_field_EventReport.ClientSession_client_ip_event'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        74 -> 'd_field_EventReport.ClientSession_client_timeout_event'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        82 -> 'd_field_EventReport.ClientSession_client_connect_event'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_EventReport.ClientSession'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                1 -> 'skip_64_EventReport.ClientSession'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                2 -> 'skip_length_delimited_EventReport.ClientSession'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                3 -> 'skip_group_EventReport.ClientSession'(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
                5 -> 'skip_32_EventReport.ClientSession'(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData)
            end
    end;
'dg_read_field_def_EventReport.ClientSession'(<<>>, 0, 0, F@_1, R1, R2, R3, R4, R5, R6, R7, R8, R9, TrUserData) ->
    #'EventReport.ClientSession'{session_id = F@_1, client_assoc_event = lists_reverse(R1, TrUserData), client_auth_event = lists_reverse(R2, TrUserData), client_disconnect_event = lists_reverse(R3, TrUserData),
                                 client_failure_event = lists_reverse(R4, TrUserData), client_first_data_event = lists_reverse(R5, TrUserData), client_id_event = lists_reverse(R6, TrUserData), client_ip_event = lists_reverse(R7, TrUserData),
                                 client_timeout_event = lists_reverse(R8, TrUserData), client_connect_event = lists_reverse(R9, TrUserData)}.

'd_field_EventReport.ClientSession_session_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientSession_session_id'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_EventReport.ClientSession_session_id'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_EventReport.ClientSession'(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_EventReport.ClientSession_client_assoc_event'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientSession_client_assoc_event'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_EventReport.ClientSession_client_assoc_event'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_EventReport.ClientAssocEvent'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientSession'(RestF, 0, 0, F@_1, cons(NewFValue, Prev, TrUserData), F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_EventReport.ClientSession_client_auth_event'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientSession_client_auth_event'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_EventReport.ClientSession_client_auth_event'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_EventReport.ClientAuthEvent'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientSession'(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_EventReport.ClientSession_client_disconnect_event'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientSession_client_disconnect_event'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_EventReport.ClientSession_client_disconnect_event'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_EventReport.ClientDisconnectEvent'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientSession'(RestF, 0, 0, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_EventReport.ClientSession_client_failure_event'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientSession_client_failure_event'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_EventReport.ClientSession_client_failure_event'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_EventReport.ClientFailureEvent'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientSession'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, cons(NewFValue, Prev, TrUserData), F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_EventReport.ClientSession_client_first_data_event'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientSession_client_first_data_event'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_EventReport.ClientSession_client_first_data_event'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_EventReport.ClientFirstDataEvent'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientSession'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, cons(NewFValue, Prev, TrUserData), F@_7, F@_8, F@_9, F@_10, TrUserData).

'd_field_EventReport.ClientSession_client_id_event'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientSession_client_id_event'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_EventReport.ClientSession_client_id_event'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_EventReport.ClientIdEvent'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientSession'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, cons(NewFValue, Prev, TrUserData), F@_8, F@_9, F@_10, TrUserData).

'd_field_EventReport.ClientSession_client_ip_event'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientSession_client_ip_event'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_EventReport.ClientSession_client_ip_event'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_EventReport.ClientIpEvent'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientSession'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, cons(NewFValue, Prev, TrUserData), F@_9, F@_10, TrUserData).

'd_field_EventReport.ClientSession_client_timeout_event'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientSession_client_timeout_event'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_EventReport.ClientSession_client_timeout_event'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_EventReport.ClientTimeoutEvent'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientSession'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, cons(NewFValue, Prev, TrUserData), F@_10, TrUserData).

'd_field_EventReport.ClientSession_client_connect_event'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'd_field_EventReport.ClientSession_client_connect_event'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'd_field_EventReport.ClientSession_client_connect_event'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_EventReport.ClientConnectEvent'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_EventReport.ClientSession'(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, cons(NewFValue, Prev, TrUserData), TrUserData).

'skip_varint_EventReport.ClientSession'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'skip_varint_EventReport.ClientSession'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'skip_varint_EventReport.ClientSession'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientSession'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'skip_length_delimited_EventReport.ClientSession'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) when N < 57 ->
    'skip_length_delimited_EventReport.ClientSession'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
'skip_length_delimited_EventReport.ClientSession'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_EventReport.ClientSession'(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'skip_group_EventReport.ClientSession'(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_EventReport.ClientSession'(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'skip_32_EventReport.ClientSession'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientSession'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

'skip_64_EventReport.ClientSession'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    'dfp_read_field_def_EventReport.ClientSession'(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData).

decode_msg_EventReport(Bin, TrUserData) -> dfp_read_field_def_EventReport(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_EventReport(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_EventReport_client_session(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_EventReport(<<>>, 0, 0, R1, TrUserData) -> #'EventReport'{client_session = lists_reverse(R1, TrUserData)};
dfp_read_field_def_EventReport(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_EventReport(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_EventReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_EventReport(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_EventReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_EventReport_client_session(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_EventReport(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_EventReport(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_EventReport(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_EventReport(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_EventReport(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_EventReport(<<>>, 0, 0, R1, TrUserData) -> #'EventReport'{client_session = lists_reverse(R1, TrUserData)}.

d_field_EventReport_client_session(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_EventReport_client_session(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_EventReport_client_session(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_EventReport.ClientSession'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_EventReport(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_EventReport(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_EventReport(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_EventReport(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_EventReport(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_EventReport(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_EventReport(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_EventReport(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EventReport(Rest2, 0, 0, F@_1, TrUserData).

skip_group_EventReport(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EventReport(Rest, 0, Z2, F@_1, TrUserData).

skip_32_EventReport(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_EventReport(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_EventReport(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_EventReport(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_Report(Bin, TrUserData) ->
    dfp_read_field_def_Report(Bin,
                              0,
                              0,
                              id(undefined, TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              TrUserData).

dfp_read_field_def_Report(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_nodeID(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_survey(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_capacity(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_neighbors(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_clients(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<50, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_device(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<58, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_bs_report(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<66, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_rssi_report(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<74, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_video_voice_report(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<170, 6, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_network_probe(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<178, 6, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Report_event_report(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Report(<<>>, 0, 0, F@_1, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, TrUserData) ->
    #'Report'{nodeID = F@_1, survey = lists_reverse(R1, TrUserData), capacity = lists_reverse(R2, TrUserData), neighbors = lists_reverse(R3, TrUserData), clients = lists_reverse(R4, TrUserData), device = lists_reverse(R5, TrUserData),
              bs_report = lists_reverse(R6, TrUserData), rssi_report = lists_reverse(R7, TrUserData), video_voice_report = lists_reverse(R8, TrUserData), network_probe = lists_reverse(R9, TrUserData), event_report = lists_reverse(R10, TrUserData)};
dfp_read_field_def_Report(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) -> dg_read_field_def_Report(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

dg_read_field_def_Report(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_Report(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dg_read_field_def_Report(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Report_nodeID(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        18 -> d_field_Report_survey(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        26 -> d_field_Report_capacity(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        34 -> d_field_Report_neighbors(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        42 -> d_field_Report_clients(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        50 -> d_field_Report_device(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        58 -> d_field_Report_bs_report(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        66 -> d_field_Report_rssi_report(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        74 -> d_field_Report_video_voice_report(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        810 -> d_field_Report_network_probe(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        818 -> d_field_Report_event_report(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Report(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                1 -> skip_64_Report(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                2 -> skip_length_delimited_Report(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                3 -> skip_group_Report(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                5 -> skip_32_Report(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
            end
    end;
dg_read_field_def_Report(<<>>, 0, 0, F@_1, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, TrUserData) ->
    #'Report'{nodeID = F@_1, survey = lists_reverse(R1, TrUserData), capacity = lists_reverse(R2, TrUserData), neighbors = lists_reverse(R3, TrUserData), clients = lists_reverse(R4, TrUserData), device = lists_reverse(R5, TrUserData),
              bs_report = lists_reverse(R6, TrUserData), rssi_report = lists_reverse(R7, TrUserData), video_voice_report = lists_reverse(R8, TrUserData), network_probe = lists_reverse(R9, TrUserData), event_report = lists_reverse(R10, TrUserData)}.

d_field_Report_nodeID(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_nodeID(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_nodeID(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Report_survey(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_survey(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_survey(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Survey(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, F@_1, cons(NewFValue, Prev, TrUserData), F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Report_capacity(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_capacity(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_capacity(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Capacity(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Report_neighbors(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_neighbors(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_neighbors(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Neighbor(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Report_clients(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_clients(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_clients(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_ClientReport(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, cons(NewFValue, Prev, TrUserData), F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Report_device(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_device(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_device(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Device(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, cons(NewFValue, Prev, TrUserData), F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Report_bs_report(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_bs_report(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_bs_report(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_BSReport(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, cons(NewFValue, Prev, TrUserData), F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Report_rssi_report(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_rssi_report(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_rssi_report(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_RssiReport(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, cons(NewFValue, Prev, TrUserData), F@_9, F@_10, F@_11, TrUserData).

d_field_Report_video_voice_report(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_video_voice_report(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_video_voice_report(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_VideoVoiceReport(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, cons(NewFValue, Prev, TrUserData), F@_10, F@_11, TrUserData).

d_field_Report_network_probe(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_network_probe(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_network_probe(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, Prev, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_NetworkProbe(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, cons(NewFValue, Prev, TrUserData), F@_11, TrUserData).

d_field_Report_event_report(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Report_event_report(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Report_event_report(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_EventReport(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Report(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Report(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) -> skip_varint_Report(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
skip_varint_Report(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Report(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_length_delimited_Report(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    skip_length_delimited_Report(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
skip_length_delimited_Report(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Report(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_group_Report(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Report(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_32_Report(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) -> dfp_read_field_def_Report(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_64_Report(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) -> dfp_read_field_def_Report(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_enum_RadioBandType(0) -> 'BAND2G';
d_enum_RadioBandType(1) -> 'BAND5G';
d_enum_RadioBandType(2) -> 'BAND5GL';
d_enum_RadioBandType(3) -> 'BAND5GU';
d_enum_RadioBandType(V) -> V.

d_enum_SurveyType(0) -> 'ON_CHANNEL';
d_enum_SurveyType(1) -> 'OFF_CHANNEL';
d_enum_SurveyType(2) -> 'FULL';
d_enum_SurveyType(V) -> V.

d_enum_NeighborType(0) -> 'ONCHAN_SCAN';
d_enum_NeighborType(1) -> 'OFFCHAN_SCAN';
d_enum_NeighborType(2) -> 'FULL_SCAN';
d_enum_NeighborType(V) -> V.

d_enum_ChanWidth(0) -> 'CHAN_WIDTH_UNKNOWN';
d_enum_ChanWidth(1) -> 'CHAN_WIDTH_20MHZ';
d_enum_ChanWidth(2) -> 'CHAN_WIDTH_40MHZ';
d_enum_ChanWidth(3) -> 'CHAN_WIDTH_40MHZ_ABOVE';
d_enum_ChanWidth(4) -> 'CHAN_WIDTH_40MHZ_BELOW';
d_enum_ChanWidth(5) -> 'CHAN_WIDTH_80MHZ';
d_enum_ChanWidth(6) -> 'CHAN_WIDTH_160MHZ';
d_enum_ChanWidth(7) -> 'CHAN_WIDTH_80_PLUS_80MHZ';
d_enum_ChanWidth(V) -> V.

d_enum_WmmAc(1) -> 'WMM_AC_VO';
d_enum_WmmAc(2) -> 'WMM_AC_VI';
d_enum_WmmAc(3) -> 'WMM_AC_BE';
d_enum_WmmAc(4) -> 'WMM_AC_BK';
d_enum_WmmAc(V) -> V.

d_enum_BSEventType(0) -> 'PROBE';
d_enum_BSEventType(1) -> 'CONNECT';
d_enum_BSEventType(2) -> 'DISCONNECT';
d_enum_BSEventType(3) -> 'BACKOFF';
d_enum_BSEventType(4) -> 'ACTIVITY';
d_enum_BSEventType(5) -> 'OVERRUN';
d_enum_BSEventType(6) -> 'BAND_STEERING_ATTEMPT';
d_enum_BSEventType(7) -> 'CLIENT_STEERING_ATTEMPT';
d_enum_BSEventType(8) -> 'CLIENT_STEERING_STARTED';
d_enum_BSEventType(9) -> 'CLIENT_STEERING_DISABLED';
d_enum_BSEventType(10) -> 'CLIENT_STEERING_EXPIRED';
d_enum_BSEventType(11) -> 'CLIENT_STEERING_FAILED';
d_enum_BSEventType(12) -> 'AUTH_BLOCK';
d_enum_BSEventType(13) -> 'CLIENT_KICKED';
d_enum_BSEventType(14) -> 'CLIENT_BS_BTM';
d_enum_BSEventType(15) -> 'CLIENT_STICKY_BTM';
d_enum_BSEventType(16) -> 'CLIENT_BTM';
d_enum_BSEventType(17) -> 'CLIENT_CAPABILITIES';
d_enum_BSEventType(18) -> 'CLIENT_BS_BTM_RETRY';
d_enum_BSEventType(19) -> 'CLIENT_STICKY_BTM_RETRY';
d_enum_BSEventType(20) -> 'CLIENT_BTM_RETRY';
d_enum_BSEventType(21) -> 'CLIENT_RRM_BCN_RPT';
d_enum_BSEventType(22) -> 'CLIENT_BS_KICK';
d_enum_BSEventType(23) -> 'CLIENT_STICKY_KICK';
d_enum_BSEventType(24) -> 'CLIENT_SPECULATIVE_KICK';
d_enum_BSEventType(25) -> 'CLIENT_DIRECTED_KICK';
d_enum_BSEventType(26) -> 'CLIENT_GHOST_DEVICE_KICK';
d_enum_BSEventType(V) -> V.

d_enum_DeviceType(0) -> 'DEV_AP';
d_enum_DeviceType(1) -> 'DEV_STA';
d_enum_DeviceType(V) -> V.

d_enum_FrameType(0) -> 'FT_DEAUTH';
d_enum_FrameType(1) -> 'FT_DISASSOC';
d_enum_FrameType(V) -> V.

d_enum_DisconnectSrc(0) -> 'LOCAL';
d_enum_DisconnectSrc(1) -> 'REMOTE';
d_enum_DisconnectSrc(V) -> V.

d_enum_AssocType(0) -> 'ASSOC';
d_enum_AssocType(1) -> 'REASSOC';
d_enum_AssocType(V) -> V.

d_enum_DisconnectType(0) -> 'DISASSOC';
d_enum_DisconnectType(1) -> 'DEAUTH';
d_enum_DisconnectType(V) -> V.

d_enum_SecurityType(0) -> 'SEC_OPEN';
d_enum_SecurityType(1) -> 'SEC_RADIUS';
d_enum_SecurityType(2) -> 'SEC_PSK';
d_enum_SecurityType(V) -> V.

d_enum_ReportType(0) -> 'RAW';
d_enum_ReportType(1) -> 'AVERAGE';
d_enum_ReportType(2) -> 'HISTOGRAM';
d_enum_ReportType(3) -> 'PERCENTILE';
d_enum_ReportType(4) -> 'DIFF';
d_enum_ReportType(V) -> V.

d_enum_FsType(0) -> 'FS_TYPE_ROOTFS';
d_enum_FsType(1) -> 'FS_TYPE_TMPFS';
d_enum_FsType(V) -> V.

d_enum_CTReasonType(0) -> 'CTR_IDLE_TOO_LONG';
d_enum_CTReasonType(1) -> 'CTR_PROBE_FAIL';
d_enum_CTReasonType(V) -> V.

d_enum_DiffType(0) -> 'ADDED';
d_enum_DiffType(1) -> 'REMOVED';
d_enum_DiffType(V) -> V.

d_enum_StreamingVideoType(0) -> 'UNKNOWN';
d_enum_StreamingVideoType(1) -> 'NETFLIX';
d_enum_StreamingVideoType(2) -> 'YOUTUBE';
d_enum_StreamingVideoType(3) -> 'PLEX';
d_enum_StreamingVideoType(V) -> V.

'd_enum_RssiPeer.RssiSource'(0) -> 'CLIENT';
'd_enum_RssiPeer.RssiSource'(1) -> 'PROBE';
'd_enum_RssiPeer.RssiSource'(2) -> 'NEIGHBOR';
'd_enum_RssiPeer.RssiSource'(V) -> V.

d_enum_StateUpDown(0) -> 'SUD_down';
d_enum_StateUpDown(1) -> 'SUD_up';
d_enum_StateUpDown(2) -> 'SUD_error';
d_enum_StateUpDown(V) -> V.

'd_enum_RtpFlowStats.RtpFlowDirection'(0) -> 'RTP_UPSTREAM';
'd_enum_RtpFlowStats.RtpFlowDirection'(1) -> 'RTP_DOWNSTREAM';
'd_enum_RtpFlowStats.RtpFlowDirection'(V) -> V.

'd_enum_RtpFlowStats.RtpFlowType'(0) -> 'RTP_VOICE';
'd_enum_RtpFlowStats.RtpFlowType'(1) -> 'RTP_VIDEO';
'd_enum_RtpFlowStats.RtpFlowType'(V) -> V.

'd_enum_CallStop.CallStopReason'(0) -> 'BYE_OK';
'd_enum_CallStop.CallStopReason'(1) -> 'CALL_DROPPED';
'd_enum_CallStop.CallStopReason'(V) -> V.

'd_enum_CallReport.CallReportReason'(0) -> 'ROAMED_FROM';
'd_enum_CallReport.CallReportReason'(1) -> 'ROAMED_TO';
'd_enum_CallReport.CallReportReason'(2) -> 'GOT_PUBLISH';
'd_enum_CallReport.CallReportReason'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'AvgType' -> merge_msg_AvgType(Prev, New, TrUserData);
        'Neighbor.NeighborBss' -> 'merge_msg_Neighbor.NeighborBss'(Prev, New, TrUserData);
        'Neighbor' -> merge_msg_Neighbor(Prev, New, TrUserData);
        'Client.Stats' -> 'merge_msg_Client.Stats'(Prev, New, TrUserData);
        'Client.RxStats' -> 'merge_msg_Client.RxStats'(Prev, New, TrUserData);
        'Client.RxStats.ChainRSSI' -> 'merge_msg_Client.RxStats.ChainRSSI'(Prev, New, TrUserData);
        'Client.TxStats' -> 'merge_msg_Client.TxStats'(Prev, New, TrUserData);
        'Client.TidStats' -> 'merge_msg_Client.TidStats'(Prev, New, TrUserData);
        'Client.TidStats.Sojourn' -> 'merge_msg_Client.TidStats.Sojourn'(Prev, New, TrUserData);
        'Client' -> merge_msg_Client(Prev, New, TrUserData);
        'ClientReport' -> merge_msg_ClientReport(Prev, New, TrUserData);
        'Survey.SurveySample' -> 'merge_msg_Survey.SurveySample'(Prev, New, TrUserData);
        'Survey.SurveyAvg' -> 'merge_msg_Survey.SurveyAvg'(Prev, New, TrUserData);
        'Survey' -> merge_msg_Survey(Prev, New, TrUserData);
        'Capacity.QueueSample' -> 'merge_msg_Capacity.QueueSample'(Prev, New, TrUserData);
        'Capacity' -> merge_msg_Capacity(Prev, New, TrUserData);
        'Device.LoadAvg' -> 'merge_msg_Device.LoadAvg'(Prev, New, TrUserData);
        'Device.RadioTemp' -> 'merge_msg_Device.RadioTemp'(Prev, New, TrUserData);
        'Device.Thermal' -> 'merge_msg_Device.Thermal'(Prev, New, TrUserData);
        'Device.Thermal.RadioTxChainMask' -> 'merge_msg_Device.Thermal.RadioTxChainMask'(Prev, New, TrUserData);
        'Device.MemUtil' -> 'merge_msg_Device.MemUtil'(Prev, New, TrUserData);
        'Device.FsUtil' -> 'merge_msg_Device.FsUtil'(Prev, New, TrUserData);
        'Device.CpuUtil' -> 'merge_msg_Device.CpuUtil'(Prev, New, TrUserData);
        'Device.PerProcessUtil' -> 'merge_msg_Device.PerProcessUtil'(Prev, New, TrUserData);
        'Device' -> merge_msg_Device(Prev, New, TrUserData);
        'BSClient.BSEvent' -> 'merge_msg_BSClient.BSEvent'(Prev, New, TrUserData);
        'BSClient.BSBandReport' -> 'merge_msg_BSClient.BSBandReport'(Prev, New, TrUserData);
        'BSClient' -> merge_msg_BSClient(Prev, New, TrUserData);
        'BSReport' -> merge_msg_BSReport(Prev, New, TrUserData);
        'RssiPeer.RssiSample' -> 'merge_msg_RssiPeer.RssiSample'(Prev, New, TrUserData);
        'RssiPeer' -> merge_msg_RssiPeer(Prev, New, TrUserData);
        'RssiReport' -> merge_msg_RssiReport(Prev, New, TrUserData);
        'DNSProbeMetric' -> merge_msg_DNSProbeMetric(Prev, New, TrUserData);
        'VLANMetrics' -> merge_msg_VLANMetrics(Prev, New, TrUserData);
        'RADIUSMetrics' -> merge_msg_RADIUSMetrics(Prev, New, TrUserData);
        'NetworkProbe' -> merge_msg_NetworkProbe(Prev, New, TrUserData);
        'RtpFlowStats' -> merge_msg_RtpFlowStats(Prev, New, TrUserData);
        'CallStart' -> merge_msg_CallStart(Prev, New, TrUserData);
        'CallStop' -> merge_msg_CallStop(Prev, New, TrUserData);
        'CallReport' -> merge_msg_CallReport(Prev, New, TrUserData);
        'StreamingVideoDetectPattern' -> merge_msg_StreamingVideoDetectPattern(Prev, New, TrUserData);
        'StreamingVideoSessionStart' -> merge_msg_StreamingVideoSessionStart(Prev, New, TrUserData);
        'StreamingVideoServerDetected' -> merge_msg_StreamingVideoServerDetected(Prev, New, TrUserData);
        'StreamingVideoStop' -> merge_msg_StreamingVideoStop(Prev, New, TrUserData);
        'VideoVoiceReport' -> merge_msg_VideoVoiceReport(Prev, New, TrUserData);
        'EventReport.ClientAssocEvent' -> 'merge_msg_EventReport.ClientAssocEvent'(Prev, New, TrUserData);
        'EventReport.ClientAuthEvent' -> 'merge_msg_EventReport.ClientAuthEvent'(Prev, New, TrUserData);
        'EventReport.ClientDisconnectEvent' -> 'merge_msg_EventReport.ClientDisconnectEvent'(Prev, New, TrUserData);
        'EventReport.ClientConnectEvent' -> 'merge_msg_EventReport.ClientConnectEvent'(Prev, New, TrUserData);
        'EventReport.ClientFailureEvent' -> 'merge_msg_EventReport.ClientFailureEvent'(Prev, New, TrUserData);
        'EventReport.ClientFirstDataEvent' -> 'merge_msg_EventReport.ClientFirstDataEvent'(Prev, New, TrUserData);
        'EventReport.ClientIdEvent' -> 'merge_msg_EventReport.ClientIdEvent'(Prev, New, TrUserData);
        'EventReport.ClientIpEvent' -> 'merge_msg_EventReport.ClientIpEvent'(Prev, New, TrUserData);
        'EventReport.ClientTimeoutEvent' -> 'merge_msg_EventReport.ClientTimeoutEvent'(Prev, New, TrUserData);
        'EventReport.ClientSession' -> 'merge_msg_EventReport.ClientSession'(Prev, New, TrUserData);
        'EventReport' -> merge_msg_EventReport(Prev, New, TrUserData);
        'Report' -> merge_msg_Report(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_AvgType/3}).
merge_msg_AvgType(#'AvgType'{min = PFmin, max = PFmax, num = PFnum}, #'AvgType'{avg = NFavg, min = NFmin, max = NFmax, num = NFnum}, _) ->
    #'AvgType'{avg = NFavg,
               min =
                   if NFmin =:= undefined -> PFmin;
                      true -> NFmin
                   end,
               max =
                   if NFmax =:= undefined -> PFmax;
                      true -> NFmax
                   end,
               num =
                   if NFnum =:= undefined -> PFnum;
                      true -> NFnum
                   end}.

-compile({nowarn_unused_function,'merge_msg_Neighbor.NeighborBss'/3}).
'merge_msg_Neighbor.NeighborBss'(#'Neighbor.NeighborBss'{ssid = PFssid, rssi = PFrssi, tsf = PFtsf, chan_width = PFchan_width, status = PFstatus},
                                 #'Neighbor.NeighborBss'{bssid = NFbssid, ssid = NFssid, rssi = NFrssi, tsf = NFtsf, chan_width = NFchan_width, channel = NFchannel, status = NFstatus}, _) ->
    #'Neighbor.NeighborBss'{bssid = NFbssid,
                            ssid =
                                if NFssid =:= undefined -> PFssid;
                                   true -> NFssid
                                end,
                            rssi =
                                if NFrssi =:= undefined -> PFrssi;
                                   true -> NFrssi
                                end,
                            tsf =
                                if NFtsf =:= undefined -> PFtsf;
                                   true -> NFtsf
                                end,
                            chan_width =
                                if NFchan_width =:= undefined -> PFchan_width;
                                   true -> NFchan_width
                                end,
                            channel = NFchannel,
                            status =
                                if NFstatus =:= undefined -> PFstatus;
                                   true -> NFstatus
                                end}.

-compile({nowarn_unused_function,merge_msg_Neighbor/3}).
merge_msg_Neighbor(#'Neighbor'{timestamp_ms = PFtimestamp_ms, bss_list = PFbss_list, report_type = PFreport_type},
                   #'Neighbor'{'band' = NFband, scan_type = NFscan_type, timestamp_ms = NFtimestamp_ms, bss_list = NFbss_list, report_type = NFreport_type}, TrUserData) ->
    #'Neighbor'{'band' = NFband, scan_type = NFscan_type,
                timestamp_ms =
                    if NFtimestamp_ms =:= undefined -> PFtimestamp_ms;
                       true -> NFtimestamp_ms
                    end,
                bss_list =
                    if PFbss_list /= undefined, NFbss_list /= undefined -> 'erlang_++'(PFbss_list, NFbss_list, TrUserData);
                       PFbss_list == undefined -> NFbss_list;
                       NFbss_list == undefined -> PFbss_list
                    end,
                report_type =
                    if NFreport_type =:= undefined -> PFreport_type;
                       true -> NFreport_type
                    end}.

-compile({nowarn_unused_function,'merge_msg_Client.Stats'/3}).
'merge_msg_Client.Stats'(#'Client.Stats'{rx_bytes = PFrx_bytes, tx_bytes = PFtx_bytes, rx_frames = PFrx_frames, tx_frames = PFtx_frames, rx_retries = PFrx_retries, tx_retries = PFtx_retries, rx_errors = PFrx_errors, tx_errors = PFtx_errors,
                                         rx_rate = PFrx_rate, tx_rate = PFtx_rate, rssi = PFrssi},
                         #'Client.Stats'{rx_bytes = NFrx_bytes, tx_bytes = NFtx_bytes, rx_frames = NFrx_frames, tx_frames = NFtx_frames, rx_retries = NFrx_retries, tx_retries = NFtx_retries, rx_errors = NFrx_errors, tx_errors = NFtx_errors, rx_rate = NFrx_rate,
                                         tx_rate = NFtx_rate, rssi = NFrssi},
                         _) ->
    #'Client.Stats'{rx_bytes =
                        if NFrx_bytes =:= undefined -> PFrx_bytes;
                           true -> NFrx_bytes
                        end,
                    tx_bytes =
                        if NFtx_bytes =:= undefined -> PFtx_bytes;
                           true -> NFtx_bytes
                        end,
                    rx_frames =
                        if NFrx_frames =:= undefined -> PFrx_frames;
                           true -> NFrx_frames
                        end,
                    tx_frames =
                        if NFtx_frames =:= undefined -> PFtx_frames;
                           true -> NFtx_frames
                        end,
                    rx_retries =
                        if NFrx_retries =:= undefined -> PFrx_retries;
                           true -> NFrx_retries
                        end,
                    tx_retries =
                        if NFtx_retries =:= undefined -> PFtx_retries;
                           true -> NFtx_retries
                        end,
                    rx_errors =
                        if NFrx_errors =:= undefined -> PFrx_errors;
                           true -> NFrx_errors
                        end,
                    tx_errors =
                        if NFtx_errors =:= undefined -> PFtx_errors;
                           true -> NFtx_errors
                        end,
                    rx_rate =
                        if NFrx_rate =:= undefined -> PFrx_rate;
                           true -> NFrx_rate
                        end,
                    tx_rate =
                        if NFtx_rate =:= undefined -> PFtx_rate;
                           true -> NFtx_rate
                        end,
                    rssi =
                        if NFrssi =:= undefined -> PFrssi;
                           true -> NFrssi
                        end}.

-compile({nowarn_unused_function,'merge_msg_Client.RxStats'/3}).
'merge_msg_Client.RxStats'(#'Client.RxStats'{bytes = PFbytes, msdus = PFmsdus, mpdus = PFmpdus, ppdus = PFppdus, retries = PFretries, errors = PFerrors, rssi = PFrssi, chain_rssi = PFchain_rssi},
                           #'Client.RxStats'{mcs = NFmcs, nss = NFnss, bw = NFbw, bytes = NFbytes, msdus = NFmsdus, mpdus = NFmpdus, ppdus = NFppdus, retries = NFretries, errors = NFerrors, rssi = NFrssi, chain_rssi = NFchain_rssi}, TrUserData) ->
    #'Client.RxStats'{mcs = NFmcs, nss = NFnss, bw = NFbw,
                      bytes =
                          if NFbytes =:= undefined -> PFbytes;
                             true -> NFbytes
                          end,
                      msdus =
                          if NFmsdus =:= undefined -> PFmsdus;
                             true -> NFmsdus
                          end,
                      mpdus =
                          if NFmpdus =:= undefined -> PFmpdus;
                             true -> NFmpdus
                          end,
                      ppdus =
                          if NFppdus =:= undefined -> PFppdus;
                             true -> NFppdus
                          end,
                      retries =
                          if NFretries =:= undefined -> PFretries;
                             true -> NFretries
                          end,
                      errors =
                          if NFerrors =:= undefined -> PFerrors;
                             true -> NFerrors
                          end,
                      rssi =
                          if NFrssi =:= undefined -> PFrssi;
                             true -> NFrssi
                          end,
                      chain_rssi =
                          if PFchain_rssi /= undefined, NFchain_rssi /= undefined -> 'erlang_++'(PFchain_rssi, NFchain_rssi, TrUserData);
                             PFchain_rssi == undefined -> NFchain_rssi;
                             NFchain_rssi == undefined -> PFchain_rssi
                          end}.

-compile({nowarn_unused_function,'merge_msg_Client.RxStats.ChainRSSI'/3}).
'merge_msg_Client.RxStats.ChainRSSI'(#'Client.RxStats.ChainRSSI'{rssi = PFrssi}, #'Client.RxStats.ChainRSSI'{chain = NFchain, ht = NFht, rssi = NFrssi}, _) ->
    #'Client.RxStats.ChainRSSI'{chain = NFchain, ht = NFht,
                                rssi =
                                    if NFrssi =:= undefined -> PFrssi;
                                       true -> NFrssi
                                    end}.

-compile({nowarn_unused_function,'merge_msg_Client.TxStats'/3}).
'merge_msg_Client.TxStats'(#'Client.TxStats'{bytes = PFbytes, msdus = PFmsdus, mpdus = PFmpdus, ppdus = PFppdus, retries = PFretries, errors = PFerrors},
                           #'Client.TxStats'{mcs = NFmcs, nss = NFnss, bw = NFbw, bytes = NFbytes, msdus = NFmsdus, mpdus = NFmpdus, ppdus = NFppdus, retries = NFretries, errors = NFerrors}, _) ->
    #'Client.TxStats'{mcs = NFmcs, nss = NFnss, bw = NFbw,
                      bytes =
                          if NFbytes =:= undefined -> PFbytes;
                             true -> NFbytes
                          end,
                      msdus =
                          if NFmsdus =:= undefined -> PFmsdus;
                             true -> NFmsdus
                          end,
                      mpdus =
                          if NFmpdus =:= undefined -> PFmpdus;
                             true -> NFmpdus
                          end,
                      ppdus =
                          if NFppdus =:= undefined -> PFppdus;
                             true -> NFppdus
                          end,
                      retries =
                          if NFretries =:= undefined -> PFretries;
                             true -> NFretries
                          end,
                      errors =
                          if NFerrors =:= undefined -> PFerrors;
                             true -> NFerrors
                          end}.

-compile({nowarn_unused_function,'merge_msg_Client.TidStats'/3}).
'merge_msg_Client.TidStats'(#'Client.TidStats'{sojourn = PFsojourn, offset_ms = PFoffset_ms}, #'Client.TidStats'{sojourn = NFsojourn, offset_ms = NFoffset_ms}, TrUserData) ->
    #'Client.TidStats'{sojourn =
                           if PFsojourn /= undefined, NFsojourn /= undefined -> 'erlang_++'(PFsojourn, NFsojourn, TrUserData);
                              PFsojourn == undefined -> NFsojourn;
                              NFsojourn == undefined -> PFsojourn
                           end,
                       offset_ms =
                           if NFoffset_ms =:= undefined -> PFoffset_ms;
                              true -> NFoffset_ms
                           end}.

-compile({nowarn_unused_function,'merge_msg_Client.TidStats.Sojourn'/3}).
'merge_msg_Client.TidStats.Sojourn'(#'Client.TidStats.Sojourn'{ewma_time_ms = PFewma_time_ms, sum_time_ms = PFsum_time_ms, num_msdus = PFnum_msdus},
                                    #'Client.TidStats.Sojourn'{ac = NFac, tid = NFtid, ewma_time_ms = NFewma_time_ms, sum_time_ms = NFsum_time_ms, num_msdus = NFnum_msdus}, _) ->
    #'Client.TidStats.Sojourn'{ac = NFac, tid = NFtid,
                               ewma_time_ms =
                                   if NFewma_time_ms =:= undefined -> PFewma_time_ms;
                                      true -> NFewma_time_ms
                                   end,
                               sum_time_ms =
                                   if NFsum_time_ms =:= undefined -> PFsum_time_ms;
                                      true -> NFsum_time_ms
                                   end,
                               num_msdus =
                                   if NFnum_msdus =:= undefined -> PFnum_msdus;
                                      true -> NFnum_msdus
                                   end}.

-compile({nowarn_unused_function,merge_msg_Client/3}).
merge_msg_Client(#'Client'{ssid = PFssid, connected = PFconnected, connect_count = PFconnect_count, disconnect_count = PFdisconnect_count, connect_offset_ms = PFconnect_offset_ms, disconnect_offset_ms = PFdisconnect_offset_ms,
                           duration_ms = PFduration_ms, stats = PFstats, rx_stats = PFrx_stats, tx_stats = PFtx_stats, tid_stats = PFtid_stats, uapsd = PFuapsd},
                 #'Client'{mac_address = NFmac_address, ssid = NFssid, connected = NFconnected, connect_count = NFconnect_count, disconnect_count = NFdisconnect_count, connect_offset_ms = NFconnect_offset_ms, disconnect_offset_ms = NFdisconnect_offset_ms,
                           duration_ms = NFduration_ms, stats = NFstats, rx_stats = NFrx_stats, tx_stats = NFtx_stats, tid_stats = NFtid_stats, uapsd = NFuapsd},
                 TrUserData) ->
    #'Client'{mac_address = NFmac_address,
              ssid =
                  if NFssid =:= undefined -> PFssid;
                     true -> NFssid
                  end,
              connected =
                  if NFconnected =:= undefined -> PFconnected;
                     true -> NFconnected
                  end,
              connect_count =
                  if NFconnect_count =:= undefined -> PFconnect_count;
                     true -> NFconnect_count
                  end,
              disconnect_count =
                  if NFdisconnect_count =:= undefined -> PFdisconnect_count;
                     true -> NFdisconnect_count
                  end,
              connect_offset_ms =
                  if NFconnect_offset_ms =:= undefined -> PFconnect_offset_ms;
                     true -> NFconnect_offset_ms
                  end,
              disconnect_offset_ms =
                  if NFdisconnect_offset_ms =:= undefined -> PFdisconnect_offset_ms;
                     true -> NFdisconnect_offset_ms
                  end,
              duration_ms =
                  if NFduration_ms =:= undefined -> PFduration_ms;
                     true -> NFduration_ms
                  end,
              stats =
                  if PFstats /= undefined, NFstats /= undefined -> 'merge_msg_Client.Stats'(PFstats, NFstats, TrUserData);
                     PFstats == undefined -> NFstats;
                     NFstats == undefined -> PFstats
                  end,
              rx_stats =
                  if PFrx_stats /= undefined, NFrx_stats /= undefined -> 'erlang_++'(PFrx_stats, NFrx_stats, TrUserData);
                     PFrx_stats == undefined -> NFrx_stats;
                     NFrx_stats == undefined -> PFrx_stats
                  end,
              tx_stats =
                  if PFtx_stats /= undefined, NFtx_stats /= undefined -> 'erlang_++'(PFtx_stats, NFtx_stats, TrUserData);
                     PFtx_stats == undefined -> NFtx_stats;
                     NFtx_stats == undefined -> PFtx_stats
                  end,
              tid_stats =
                  if PFtid_stats /= undefined, NFtid_stats /= undefined -> 'erlang_++'(PFtid_stats, NFtid_stats, TrUserData);
                     PFtid_stats == undefined -> NFtid_stats;
                     NFtid_stats == undefined -> PFtid_stats
                  end,
              uapsd =
                  if NFuapsd =:= undefined -> PFuapsd;
                     true -> NFuapsd
                  end}.

-compile({nowarn_unused_function,merge_msg_ClientReport/3}).
merge_msg_ClientReport(#'ClientReport'{timestamp_ms = PFtimestamp_ms, client_list = PFclient_list}, #'ClientReport'{'band' = NFband, timestamp_ms = NFtimestamp_ms, client_list = NFclient_list, channel = NFchannel}, TrUserData) ->
    #'ClientReport'{'band' = NFband,
                    timestamp_ms =
                        if NFtimestamp_ms =:= undefined -> PFtimestamp_ms;
                           true -> NFtimestamp_ms
                        end,
                    client_list =
                        if PFclient_list /= undefined, NFclient_list /= undefined -> 'erlang_++'(PFclient_list, NFclient_list, TrUserData);
                           PFclient_list == undefined -> NFclient_list;
                           NFclient_list == undefined -> PFclient_list
                        end,
                    channel = NFchannel}.

-compile({nowarn_unused_function,'merge_msg_Survey.SurveySample'/3}).
'merge_msg_Survey.SurveySample'(#'Survey.SurveySample'{duration_ms = PFduration_ms, total_count = PFtotal_count, sample_count = PFsample_count, busy = PFbusy, busy_tx = PFbusy_tx, busy_rx = PFbusy_rx, busy_self = PFbusy_self, offset_ms = PFoffset_ms,
                                                       busy_ext = PFbusy_ext, noise = PFnoise},
                                #'Survey.SurveySample'{channel = NFchannel, duration_ms = NFduration_ms, total_count = NFtotal_count, sample_count = NFsample_count, busy = NFbusy, busy_tx = NFbusy_tx, busy_rx = NFbusy_rx, busy_self = NFbusy_self, offset_ms = NFoffset_ms,
                                                       busy_ext = NFbusy_ext, noise = NFnoise},
                                _) ->
    #'Survey.SurveySample'{channel = NFchannel,
                           duration_ms =
                               if NFduration_ms =:= undefined -> PFduration_ms;
                                  true -> NFduration_ms
                               end,
                           total_count =
                               if NFtotal_count =:= undefined -> PFtotal_count;
                                  true -> NFtotal_count
                               end,
                           sample_count =
                               if NFsample_count =:= undefined -> PFsample_count;
                                  true -> NFsample_count
                               end,
                           busy =
                               if NFbusy =:= undefined -> PFbusy;
                                  true -> NFbusy
                               end,
                           busy_tx =
                               if NFbusy_tx =:= undefined -> PFbusy_tx;
                                  true -> NFbusy_tx
                               end,
                           busy_rx =
                               if NFbusy_rx =:= undefined -> PFbusy_rx;
                                  true -> NFbusy_rx
                               end,
                           busy_self =
                               if NFbusy_self =:= undefined -> PFbusy_self;
                                  true -> NFbusy_self
                               end,
                           offset_ms =
                               if NFoffset_ms =:= undefined -> PFoffset_ms;
                                  true -> NFoffset_ms
                               end,
                           busy_ext =
                               if NFbusy_ext =:= undefined -> PFbusy_ext;
                                  true -> NFbusy_ext
                               end,
                           noise =
                               if NFnoise =:= undefined -> PFnoise;
                                  true -> NFnoise
                               end}.

-compile({nowarn_unused_function,'merge_msg_Survey.SurveyAvg'/3}).
'merge_msg_Survey.SurveyAvg'(#'Survey.SurveyAvg'{busy = PFbusy, busy_tx = PFbusy_tx, busy_rx = PFbusy_rx, busy_self = PFbusy_self, busy_ext = PFbusy_ext, noise = PFnoise},
                             #'Survey.SurveyAvg'{channel = NFchannel, busy = NFbusy, busy_tx = NFbusy_tx, busy_rx = NFbusy_rx, busy_self = NFbusy_self, busy_ext = NFbusy_ext, noise = NFnoise}, TrUserData) ->
    #'Survey.SurveyAvg'{channel = NFchannel,
                        busy =
                            if PFbusy /= undefined, NFbusy /= undefined -> merge_msg_AvgType(PFbusy, NFbusy, TrUserData);
                               PFbusy == undefined -> NFbusy;
                               NFbusy == undefined -> PFbusy
                            end,
                        busy_tx =
                            if PFbusy_tx /= undefined, NFbusy_tx /= undefined -> merge_msg_AvgType(PFbusy_tx, NFbusy_tx, TrUserData);
                               PFbusy_tx == undefined -> NFbusy_tx;
                               NFbusy_tx == undefined -> PFbusy_tx
                            end,
                        busy_rx =
                            if PFbusy_rx /= undefined, NFbusy_rx /= undefined -> merge_msg_AvgType(PFbusy_rx, NFbusy_rx, TrUserData);
                               PFbusy_rx == undefined -> NFbusy_rx;
                               NFbusy_rx == undefined -> PFbusy_rx
                            end,
                        busy_self =
                            if PFbusy_self /= undefined, NFbusy_self /= undefined -> merge_msg_AvgType(PFbusy_self, NFbusy_self, TrUserData);
                               PFbusy_self == undefined -> NFbusy_self;
                               NFbusy_self == undefined -> PFbusy_self
                            end,
                        busy_ext =
                            if PFbusy_ext /= undefined, NFbusy_ext /= undefined -> merge_msg_AvgType(PFbusy_ext, NFbusy_ext, TrUserData);
                               PFbusy_ext == undefined -> NFbusy_ext;
                               NFbusy_ext == undefined -> PFbusy_ext
                            end,
                        noise =
                            if PFnoise /= undefined, NFnoise /= undefined -> merge_msg_AvgType(PFnoise, NFnoise, TrUserData);
                               PFnoise == undefined -> NFnoise;
                               NFnoise == undefined -> PFnoise
                            end}.

-compile({nowarn_unused_function,merge_msg_Survey/3}).
merge_msg_Survey(#'Survey'{timestamp_ms = PFtimestamp_ms, survey_list = PFsurvey_list, survey_avg = PFsurvey_avg, report_type = PFreport_type},
                 #'Survey'{'band' = NFband, survey_type = NFsurvey_type, timestamp_ms = NFtimestamp_ms, survey_list = NFsurvey_list, survey_avg = NFsurvey_avg, report_type = NFreport_type}, TrUserData) ->
    #'Survey'{'band' = NFband, survey_type = NFsurvey_type,
              timestamp_ms =
                  if NFtimestamp_ms =:= undefined -> PFtimestamp_ms;
                     true -> NFtimestamp_ms
                  end,
              survey_list =
                  if PFsurvey_list /= undefined, NFsurvey_list /= undefined -> 'erlang_++'(PFsurvey_list, NFsurvey_list, TrUserData);
                     PFsurvey_list == undefined -> NFsurvey_list;
                     NFsurvey_list == undefined -> PFsurvey_list
                  end,
              survey_avg =
                  if PFsurvey_avg /= undefined, NFsurvey_avg /= undefined -> 'erlang_++'(PFsurvey_avg, NFsurvey_avg, TrUserData);
                     PFsurvey_avg == undefined -> NFsurvey_avg;
                     NFsurvey_avg == undefined -> PFsurvey_avg
                  end,
              report_type =
                  if NFreport_type =:= undefined -> PFreport_type;
                     true -> NFreport_type
                  end}.

-compile({nowarn_unused_function,'merge_msg_Capacity.QueueSample'/3}).
'merge_msg_Capacity.QueueSample'(#'Capacity.QueueSample'{busy_tx = PFbusy_tx, bytes_tx = PFbytes_tx, sample_count = PFsample_count, 'Vo_count' = PFVo_count, 'Vi_count' = PFVi_count, 'Be_count' = PFBe_count, 'Bk_count' = PFBk_count,
                                                         'Bcn_count' = PFBcn_count, 'Cab_count' = PFCab_count, offset_ms = PFoffset_ms},
                                 #'Capacity.QueueSample'{busy_tx = NFbusy_tx, bytes_tx = NFbytes_tx, sample_count = NFsample_count, 'Vo_count' = NFVo_count, 'Vi_count' = NFVi_count, 'Be_count' = NFBe_count, 'Bk_count' = NFBk_count, 'Bcn_count' = NFBcn_count,
                                                         'Cab_count' = NFCab_count, offset_ms = NFoffset_ms},
                                 _) ->
    #'Capacity.QueueSample'{busy_tx =
                                if NFbusy_tx =:= undefined -> PFbusy_tx;
                                   true -> NFbusy_tx
                                end,
                            bytes_tx =
                                if NFbytes_tx =:= undefined -> PFbytes_tx;
                                   true -> NFbytes_tx
                                end,
                            sample_count =
                                if NFsample_count =:= undefined -> PFsample_count;
                                   true -> NFsample_count
                                end,
                            'Vo_count' =
                                if NFVo_count =:= undefined -> PFVo_count;
                                   true -> NFVo_count
                                end,
                            'Vi_count' =
                                if NFVi_count =:= undefined -> PFVi_count;
                                   true -> NFVi_count
                                end,
                            'Be_count' =
                                if NFBe_count =:= undefined -> PFBe_count;
                                   true -> NFBe_count
                                end,
                            'Bk_count' =
                                if NFBk_count =:= undefined -> PFBk_count;
                                   true -> NFBk_count
                                end,
                            'Bcn_count' =
                                if NFBcn_count =:= undefined -> PFBcn_count;
                                   true -> NFBcn_count
                                end,
                            'Cab_count' =
                                if NFCab_count =:= undefined -> PFCab_count;
                                   true -> NFCab_count
                                end,
                            offset_ms =
                                if NFoffset_ms =:= undefined -> PFoffset_ms;
                                   true -> NFoffset_ms
                                end}.

-compile({nowarn_unused_function,merge_msg_Capacity/3}).
merge_msg_Capacity(#'Capacity'{timestamp_ms = PFtimestamp_ms, queue_list = PFqueue_list}, #'Capacity'{'band' = NFband, timestamp_ms = NFtimestamp_ms, queue_list = NFqueue_list}, TrUserData) ->
    #'Capacity'{'band' = NFband,
                timestamp_ms =
                    if NFtimestamp_ms =:= undefined -> PFtimestamp_ms;
                       true -> NFtimestamp_ms
                    end,
                queue_list =
                    if PFqueue_list /= undefined, NFqueue_list /= undefined -> 'erlang_++'(PFqueue_list, NFqueue_list, TrUserData);
                       PFqueue_list == undefined -> NFqueue_list;
                       NFqueue_list == undefined -> PFqueue_list
                    end}.

-compile({nowarn_unused_function,'merge_msg_Device.LoadAvg'/3}).
'merge_msg_Device.LoadAvg'(#'Device.LoadAvg'{one = PFone, five = PFfive, fifteen = PFfifteen}, #'Device.LoadAvg'{one = NFone, five = NFfive, fifteen = NFfifteen}, _) ->
    #'Device.LoadAvg'{one =
                          if NFone =:= undefined -> PFone;
                             true -> NFone
                          end,
                      five =
                          if NFfive =:= undefined -> PFfive;
                             true -> NFfive
                          end,
                      fifteen =
                          if NFfifteen =:= undefined -> PFfifteen;
                             true -> NFfifteen
                          end}.

-compile({nowarn_unused_function,'merge_msg_Device.RadioTemp'/3}).
'merge_msg_Device.RadioTemp'(#'Device.RadioTemp'{'band' = PFband, value = PFvalue}, #'Device.RadioTemp'{'band' = NFband, value = NFvalue}, _) ->
    #'Device.RadioTemp'{'band' =
                            if NFband =:= undefined -> PFband;
                               true -> NFband
                            end,
                        value =
                            if NFvalue =:= undefined -> PFvalue;
                               true -> NFvalue
                            end}.

-compile({nowarn_unused_function,'merge_msg_Device.Thermal'/3}).
'merge_msg_Device.Thermal'(#'Device.Thermal'{txchainmask = PFtxchainmask, fan_rpm = PFfan_rpm, timestamp_ms = PFtimestamp_ms}, #'Device.Thermal'{txchainmask = NFtxchainmask, fan_rpm = NFfan_rpm, timestamp_ms = NFtimestamp_ms}, TrUserData) ->
    #'Device.Thermal'{txchainmask =
                          if PFtxchainmask /= undefined, NFtxchainmask /= undefined -> 'erlang_++'(PFtxchainmask, NFtxchainmask, TrUserData);
                             PFtxchainmask == undefined -> NFtxchainmask;
                             NFtxchainmask == undefined -> PFtxchainmask
                          end,
                      fan_rpm =
                          if NFfan_rpm =:= undefined -> PFfan_rpm;
                             true -> NFfan_rpm
                          end,
                      timestamp_ms =
                          if NFtimestamp_ms =:= undefined -> PFtimestamp_ms;
                             true -> NFtimestamp_ms
                          end}.

-compile({nowarn_unused_function,'merge_msg_Device.Thermal.RadioTxChainMask'/3}).
'merge_msg_Device.Thermal.RadioTxChainMask'(#'Device.Thermal.RadioTxChainMask'{'band' = PFband, value = PFvalue}, #'Device.Thermal.RadioTxChainMask'{'band' = NFband, value = NFvalue}, _) ->
    #'Device.Thermal.RadioTxChainMask'{'band' =
                                           if NFband =:= undefined -> PFband;
                                              true -> NFband
                                           end,
                                       value =
                                           if NFvalue =:= undefined -> PFvalue;
                                              true -> NFvalue
                                           end}.

-compile({nowarn_unused_function,'merge_msg_Device.MemUtil'/3}).
'merge_msg_Device.MemUtil'(#'Device.MemUtil'{swap_total = PFswap_total, swap_used = PFswap_used}, #'Device.MemUtil'{mem_total = NFmem_total, mem_used = NFmem_used, swap_total = NFswap_total, swap_used = NFswap_used}, _) ->
    #'Device.MemUtil'{mem_total = NFmem_total, mem_used = NFmem_used,
                      swap_total =
                          if NFswap_total =:= undefined -> PFswap_total;
                             true -> NFswap_total
                          end,
                      swap_used =
                          if NFswap_used =:= undefined -> PFswap_used;
                             true -> NFswap_used
                          end}.

-compile({nowarn_unused_function,'merge_msg_Device.FsUtil'/3}).
'merge_msg_Device.FsUtil'(#'Device.FsUtil'{}, #'Device.FsUtil'{fs_type = NFfs_type, fs_total = NFfs_total, fs_used = NFfs_used}, _) -> #'Device.FsUtil'{fs_type = NFfs_type, fs_total = NFfs_total, fs_used = NFfs_used}.

-compile({nowarn_unused_function,'merge_msg_Device.CpuUtil'/3}).
'merge_msg_Device.CpuUtil'(#'Device.CpuUtil'{cpu_util = PFcpu_util}, #'Device.CpuUtil'{cpu_util = NFcpu_util}, _) ->
    #'Device.CpuUtil'{cpu_util =
                          if NFcpu_util =:= undefined -> PFcpu_util;
                             true -> NFcpu_util
                          end}.

-compile({nowarn_unused_function,'merge_msg_Device.PerProcessUtil'/3}).
'merge_msg_Device.PerProcessUtil'(#'Device.PerProcessUtil'{}, #'Device.PerProcessUtil'{pid = NFpid, cmd = NFcmd, util = NFutil}, _) -> #'Device.PerProcessUtil'{pid = NFpid, cmd = NFcmd, util = NFutil}.

-compile({nowarn_unused_function,merge_msg_Device/3}).
merge_msg_Device(#'Device'{load = PFload, radio_temp = PFradio_temp, timestamp_ms = PFtimestamp_ms, uptime = PFuptime, thermal_stats = PFthermal_stats, mem_util = PFmem_util, fs_util = PFfs_util, cpuUtil = PFcpuUtil, ps_cpu_util = PFps_cpu_util,
                           ps_mem_util = PFps_mem_util},
                 #'Device'{load = NFload, radio_temp = NFradio_temp, timestamp_ms = NFtimestamp_ms, uptime = NFuptime, thermal_stats = NFthermal_stats, mem_util = NFmem_util, fs_util = NFfs_util, cpuUtil = NFcpuUtil, ps_cpu_util = NFps_cpu_util,
                           ps_mem_util = NFps_mem_util},
                 TrUserData) ->
    #'Device'{load =
                  if PFload /= undefined, NFload /= undefined -> 'merge_msg_Device.LoadAvg'(PFload, NFload, TrUserData);
                     PFload == undefined -> NFload;
                     NFload == undefined -> PFload
                  end,
              radio_temp =
                  if PFradio_temp /= undefined, NFradio_temp /= undefined -> 'erlang_++'(PFradio_temp, NFradio_temp, TrUserData);
                     PFradio_temp == undefined -> NFradio_temp;
                     NFradio_temp == undefined -> PFradio_temp
                  end,
              timestamp_ms =
                  if NFtimestamp_ms =:= undefined -> PFtimestamp_ms;
                     true -> NFtimestamp_ms
                  end,
              uptime =
                  if NFuptime =:= undefined -> PFuptime;
                     true -> NFuptime
                  end,
              thermal_stats =
                  if PFthermal_stats /= undefined, NFthermal_stats /= undefined -> 'erlang_++'(PFthermal_stats, NFthermal_stats, TrUserData);
                     PFthermal_stats == undefined -> NFthermal_stats;
                     NFthermal_stats == undefined -> PFthermal_stats
                  end,
              mem_util =
                  if PFmem_util /= undefined, NFmem_util /= undefined -> 'merge_msg_Device.MemUtil'(PFmem_util, NFmem_util, TrUserData);
                     PFmem_util == undefined -> NFmem_util;
                     NFmem_util == undefined -> PFmem_util
                  end,
              fs_util =
                  if PFfs_util /= undefined, NFfs_util /= undefined -> 'erlang_++'(PFfs_util, NFfs_util, TrUserData);
                     PFfs_util == undefined -> NFfs_util;
                     NFfs_util == undefined -> PFfs_util
                  end,
              cpuUtil =
                  if PFcpuUtil /= undefined, NFcpuUtil /= undefined -> 'merge_msg_Device.CpuUtil'(PFcpuUtil, NFcpuUtil, TrUserData);
                     PFcpuUtil == undefined -> NFcpuUtil;
                     NFcpuUtil == undefined -> PFcpuUtil
                  end,
              ps_cpu_util =
                  if PFps_cpu_util /= undefined, NFps_cpu_util /= undefined -> 'erlang_++'(PFps_cpu_util, NFps_cpu_util, TrUserData);
                     PFps_cpu_util == undefined -> NFps_cpu_util;
                     NFps_cpu_util == undefined -> PFps_cpu_util
                  end,
              ps_mem_util =
                  if PFps_mem_util /= undefined, NFps_mem_util /= undefined -> 'erlang_++'(PFps_mem_util, NFps_mem_util, TrUserData);
                     PFps_mem_util == undefined -> NFps_mem_util;
                     NFps_mem_util == undefined -> PFps_mem_util
                  end}.

-compile({nowarn_unused_function,'merge_msg_BSClient.BSEvent'/3}).
'merge_msg_BSClient.BSEvent'(#'BSClient.BSEvent'{rssi = PFrssi, probe_bcast = PFprobe_bcast, probe_blocked = PFprobe_blocked, disconnect_src = PFdisconnect_src, disconnect_type = PFdisconnect_type, disconnect_reason = PFdisconnect_reason,
                                                 backoff_enabled = PFbackoff_enabled, active = PFactive, rejected = PFrejected, is_BTM_supported = PFis_BTM_supported, is_RRM_supported = PFis_RRM_supported, max_chwidth = PFmax_chwidth, max_streams = PFmax_streams, phy_mode = PFphy_mode,
                                                 max_mcs = PFmax_mcs, max_txpower = PFmax_txpower, is_static_smps = PFis_static_smps, is_mu_mimo_supported = PFis_mu_mimo_supported, band_cap_2G = PFband_cap_2G, band_cap_5G = PFband_cap_5G, rrm_caps_link_meas = PFrrm_caps_link_meas,
                                                 rrm_caps_neigh_rpt = PFrrm_caps_neigh_rpt, rrm_caps_bcn_rpt_passive = PFrrm_caps_bcn_rpt_passive, rrm_caps_bcn_rpt_active = PFrrm_caps_bcn_rpt_active, rrm_caps_bcn_rpt_table = PFrrm_caps_bcn_rpt_table, rrm_caps_lci_meas = PFrrm_caps_lci_meas,
                                                 rrm_caps_ftm_range_rpt = PFrrm_caps_ftm_range_rpt, backoff_period = PFbackoff_period, assoc_ies = PFassoc_ies},
                             #'BSClient.BSEvent'{type = NFtype, offset_ms = NFoffset_ms, rssi = NFrssi, probe_bcast = NFprobe_bcast, probe_blocked = NFprobe_blocked, disconnect_src = NFdisconnect_src, disconnect_type = NFdisconnect_type, disconnect_reason = NFdisconnect_reason,
                                                 backoff_enabled = NFbackoff_enabled, active = NFactive, rejected = NFrejected, is_BTM_supported = NFis_BTM_supported, is_RRM_supported = NFis_RRM_supported, max_chwidth = NFmax_chwidth, max_streams = NFmax_streams, phy_mode = NFphy_mode,
                                                 max_mcs = NFmax_mcs, max_txpower = NFmax_txpower, is_static_smps = NFis_static_smps, is_mu_mimo_supported = NFis_mu_mimo_supported, band_cap_2G = NFband_cap_2G, band_cap_5G = NFband_cap_5G, rrm_caps_link_meas = NFrrm_caps_link_meas,
                                                 rrm_caps_neigh_rpt = NFrrm_caps_neigh_rpt, rrm_caps_bcn_rpt_passive = NFrrm_caps_bcn_rpt_passive, rrm_caps_bcn_rpt_active = NFrrm_caps_bcn_rpt_active, rrm_caps_bcn_rpt_table = NFrrm_caps_bcn_rpt_table, rrm_caps_lci_meas = NFrrm_caps_lci_meas,
                                                 rrm_caps_ftm_range_rpt = NFrrm_caps_ftm_range_rpt, backoff_period = NFbackoff_period, assoc_ies = NFassoc_ies},
                             _) ->
    #'BSClient.BSEvent'{type = NFtype, offset_ms = NFoffset_ms,
                        rssi =
                            if NFrssi =:= undefined -> PFrssi;
                               true -> NFrssi
                            end,
                        probe_bcast =
                            if NFprobe_bcast =:= undefined -> PFprobe_bcast;
                               true -> NFprobe_bcast
                            end,
                        probe_blocked =
                            if NFprobe_blocked =:= undefined -> PFprobe_blocked;
                               true -> NFprobe_blocked
                            end,
                        disconnect_src =
                            if NFdisconnect_src =:= undefined -> PFdisconnect_src;
                               true -> NFdisconnect_src
                            end,
                        disconnect_type =
                            if NFdisconnect_type =:= undefined -> PFdisconnect_type;
                               true -> NFdisconnect_type
                            end,
                        disconnect_reason =
                            if NFdisconnect_reason =:= undefined -> PFdisconnect_reason;
                               true -> NFdisconnect_reason
                            end,
                        backoff_enabled =
                            if NFbackoff_enabled =:= undefined -> PFbackoff_enabled;
                               true -> NFbackoff_enabled
                            end,
                        active =
                            if NFactive =:= undefined -> PFactive;
                               true -> NFactive
                            end,
                        rejected =
                            if NFrejected =:= undefined -> PFrejected;
                               true -> NFrejected
                            end,
                        is_BTM_supported =
                            if NFis_BTM_supported =:= undefined -> PFis_BTM_supported;
                               true -> NFis_BTM_supported
                            end,
                        is_RRM_supported =
                            if NFis_RRM_supported =:= undefined -> PFis_RRM_supported;
                               true -> NFis_RRM_supported
                            end,
                        max_chwidth =
                            if NFmax_chwidth =:= undefined -> PFmax_chwidth;
                               true -> NFmax_chwidth
                            end,
                        max_streams =
                            if NFmax_streams =:= undefined -> PFmax_streams;
                               true -> NFmax_streams
                            end,
                        phy_mode =
                            if NFphy_mode =:= undefined -> PFphy_mode;
                               true -> NFphy_mode
                            end,
                        max_mcs =
                            if NFmax_mcs =:= undefined -> PFmax_mcs;
                               true -> NFmax_mcs
                            end,
                        max_txpower =
                            if NFmax_txpower =:= undefined -> PFmax_txpower;
                               true -> NFmax_txpower
                            end,
                        is_static_smps =
                            if NFis_static_smps =:= undefined -> PFis_static_smps;
                               true -> NFis_static_smps
                            end,
                        is_mu_mimo_supported =
                            if NFis_mu_mimo_supported =:= undefined -> PFis_mu_mimo_supported;
                               true -> NFis_mu_mimo_supported
                            end,
                        band_cap_2G =
                            if NFband_cap_2G =:= undefined -> PFband_cap_2G;
                               true -> NFband_cap_2G
                            end,
                        band_cap_5G =
                            if NFband_cap_5G =:= undefined -> PFband_cap_5G;
                               true -> NFband_cap_5G
                            end,
                        rrm_caps_link_meas =
                            if NFrrm_caps_link_meas =:= undefined -> PFrrm_caps_link_meas;
                               true -> NFrrm_caps_link_meas
                            end,
                        rrm_caps_neigh_rpt =
                            if NFrrm_caps_neigh_rpt =:= undefined -> PFrrm_caps_neigh_rpt;
                               true -> NFrrm_caps_neigh_rpt
                            end,
                        rrm_caps_bcn_rpt_passive =
                            if NFrrm_caps_bcn_rpt_passive =:= undefined -> PFrrm_caps_bcn_rpt_passive;
                               true -> NFrrm_caps_bcn_rpt_passive
                            end,
                        rrm_caps_bcn_rpt_active =
                            if NFrrm_caps_bcn_rpt_active =:= undefined -> PFrrm_caps_bcn_rpt_active;
                               true -> NFrrm_caps_bcn_rpt_active
                            end,
                        rrm_caps_bcn_rpt_table =
                            if NFrrm_caps_bcn_rpt_table =:= undefined -> PFrrm_caps_bcn_rpt_table;
                               true -> NFrrm_caps_bcn_rpt_table
                            end,
                        rrm_caps_lci_meas =
                            if NFrrm_caps_lci_meas =:= undefined -> PFrrm_caps_lci_meas;
                               true -> NFrrm_caps_lci_meas
                            end,
                        rrm_caps_ftm_range_rpt =
                            if NFrrm_caps_ftm_range_rpt =:= undefined -> PFrrm_caps_ftm_range_rpt;
                               true -> NFrrm_caps_ftm_range_rpt
                            end,
                        backoff_period =
                            if NFbackoff_period =:= undefined -> PFbackoff_period;
                               true -> NFbackoff_period
                            end,
                        assoc_ies =
                            if NFassoc_ies =:= undefined -> PFassoc_ies;
                               true -> NFassoc_ies
                            end}.

-compile({nowarn_unused_function,'merge_msg_BSClient.BSBandReport'/3}).
'merge_msg_BSClient.BSBandReport'(#'BSClient.BSBandReport'{connected = PFconnected, rejects = PFrejects, connects = PFconnects, disconnects = PFdisconnects, activity_changes = PFactivity_changes, steering_success_cnt = PFsteering_success_cnt,
                                                           steering_fail_cnt = PFsteering_fail_cnt, steering_kick_cnt = PFsteering_kick_cnt, sticky_kick_cnt = PFsticky_kick_cnt, probe_bcast_cnt = PFprobe_bcast_cnt, probe_bcast_blocked = PFprobe_bcast_blocked, probe_direct_cnt = PFprobe_direct_cnt,
                                                           probe_direct_blocked = PFprobe_direct_blocked, event_list = PFevent_list, ifname = PFifname},
                                  #'BSClient.BSBandReport'{'band' = NFband, connected = NFconnected, rejects = NFrejects, connects = NFconnects, disconnects = NFdisconnects, activity_changes = NFactivity_changes, steering_success_cnt = NFsteering_success_cnt,
                                                           steering_fail_cnt = NFsteering_fail_cnt, steering_kick_cnt = NFsteering_kick_cnt, sticky_kick_cnt = NFsticky_kick_cnt, probe_bcast_cnt = NFprobe_bcast_cnt, probe_bcast_blocked = NFprobe_bcast_blocked, probe_direct_cnt = NFprobe_direct_cnt,
                                                           probe_direct_blocked = NFprobe_direct_blocked, event_list = NFevent_list, ifname = NFifname},
                                  TrUserData) ->
    #'BSClient.BSBandReport'{'band' = NFband,
                             connected =
                                 if NFconnected =:= undefined -> PFconnected;
                                    true -> NFconnected
                                 end,
                             rejects =
                                 if NFrejects =:= undefined -> PFrejects;
                                    true -> NFrejects
                                 end,
                             connects =
                                 if NFconnects =:= undefined -> PFconnects;
                                    true -> NFconnects
                                 end,
                             disconnects =
                                 if NFdisconnects =:= undefined -> PFdisconnects;
                                    true -> NFdisconnects
                                 end,
                             activity_changes =
                                 if NFactivity_changes =:= undefined -> PFactivity_changes;
                                    true -> NFactivity_changes
                                 end,
                             steering_success_cnt =
                                 if NFsteering_success_cnt =:= undefined -> PFsteering_success_cnt;
                                    true -> NFsteering_success_cnt
                                 end,
                             steering_fail_cnt =
                                 if NFsteering_fail_cnt =:= undefined -> PFsteering_fail_cnt;
                                    true -> NFsteering_fail_cnt
                                 end,
                             steering_kick_cnt =
                                 if NFsteering_kick_cnt =:= undefined -> PFsteering_kick_cnt;
                                    true -> NFsteering_kick_cnt
                                 end,
                             sticky_kick_cnt =
                                 if NFsticky_kick_cnt =:= undefined -> PFsticky_kick_cnt;
                                    true -> NFsticky_kick_cnt
                                 end,
                             probe_bcast_cnt =
                                 if NFprobe_bcast_cnt =:= undefined -> PFprobe_bcast_cnt;
                                    true -> NFprobe_bcast_cnt
                                 end,
                             probe_bcast_blocked =
                                 if NFprobe_bcast_blocked =:= undefined -> PFprobe_bcast_blocked;
                                    true -> NFprobe_bcast_blocked
                                 end,
                             probe_direct_cnt =
                                 if NFprobe_direct_cnt =:= undefined -> PFprobe_direct_cnt;
                                    true -> NFprobe_direct_cnt
                                 end,
                             probe_direct_blocked =
                                 if NFprobe_direct_blocked =:= undefined -> PFprobe_direct_blocked;
                                    true -> NFprobe_direct_blocked
                                 end,
                             event_list =
                                 if PFevent_list /= undefined, NFevent_list /= undefined -> 'erlang_++'(PFevent_list, NFevent_list, TrUserData);
                                    PFevent_list == undefined -> NFevent_list;
                                    NFevent_list == undefined -> PFevent_list
                                 end,
                             ifname =
                                 if NFifname =:= undefined -> PFifname;
                                    true -> NFifname
                                 end}.

-compile({nowarn_unused_function,merge_msg_BSClient/3}).
merge_msg_BSClient(#'BSClient'{bs_band_report = PFbs_band_report}, #'BSClient'{mac_address = NFmac_address, bs_band_report = NFbs_band_report}, TrUserData) ->
    #'BSClient'{mac_address = NFmac_address,
                bs_band_report =
                    if PFbs_band_report /= undefined, NFbs_band_report /= undefined -> 'erlang_++'(PFbs_band_report, NFbs_band_report, TrUserData);
                       PFbs_band_report == undefined -> NFbs_band_report;
                       NFbs_band_report == undefined -> PFbs_band_report
                    end}.

-compile({nowarn_unused_function,merge_msg_BSReport/3}).
merge_msg_BSReport(#'BSReport'{clients = PFclients}, #'BSReport'{timestamp_ms = NFtimestamp_ms, clients = NFclients}, TrUserData) ->
    #'BSReport'{timestamp_ms = NFtimestamp_ms,
                clients =
                    if PFclients /= undefined, NFclients /= undefined -> 'erlang_++'(PFclients, NFclients, TrUserData);
                       PFclients == undefined -> NFclients;
                       NFclients == undefined -> PFclients
                    end}.

-compile({nowarn_unused_function,'merge_msg_RssiPeer.RssiSample'/3}).
'merge_msg_RssiPeer.RssiSample'(#'RssiPeer.RssiSample'{offset_ms = PFoffset_ms}, #'RssiPeer.RssiSample'{rssi = NFrssi, offset_ms = NFoffset_ms}, _) ->
    #'RssiPeer.RssiSample'{rssi = NFrssi,
                           offset_ms =
                               if NFoffset_ms =:= undefined -> PFoffset_ms;
                                  true -> NFoffset_ms
                               end}.

-compile({nowarn_unused_function,merge_msg_RssiPeer/3}).
merge_msg_RssiPeer(#'RssiPeer'{rssi_source = PFrssi_source, rssi_list = PFrssi_list, rssi_avg = PFrssi_avg, rx_ppdus = PFrx_ppdus, tx_ppdus = PFtx_ppdus},
                   #'RssiPeer'{mac_address = NFmac_address, rssi_source = NFrssi_source, rssi_list = NFrssi_list, rssi_avg = NFrssi_avg, rx_ppdus = NFrx_ppdus, tx_ppdus = NFtx_ppdus}, TrUserData) ->
    #'RssiPeer'{mac_address = NFmac_address,
                rssi_source =
                    if NFrssi_source =:= undefined -> PFrssi_source;
                       true -> NFrssi_source
                    end,
                rssi_list =
                    if PFrssi_list /= undefined, NFrssi_list /= undefined -> 'erlang_++'(PFrssi_list, NFrssi_list, TrUserData);
                       PFrssi_list == undefined -> NFrssi_list;
                       NFrssi_list == undefined -> PFrssi_list
                    end,
                rssi_avg =
                    if PFrssi_avg /= undefined, NFrssi_avg /= undefined -> merge_msg_AvgType(PFrssi_avg, NFrssi_avg, TrUserData);
                       PFrssi_avg == undefined -> NFrssi_avg;
                       NFrssi_avg == undefined -> PFrssi_avg
                    end,
                rx_ppdus =
                    if NFrx_ppdus =:= undefined -> PFrx_ppdus;
                       true -> NFrx_ppdus
                    end,
                tx_ppdus =
                    if NFtx_ppdus =:= undefined -> PFtx_ppdus;
                       true -> NFtx_ppdus
                    end}.

-compile({nowarn_unused_function,merge_msg_RssiReport/3}).
merge_msg_RssiReport(#'RssiReport'{timestamp_ms = PFtimestamp_ms, peer_list = PFpeer_list}, #'RssiReport'{'band' = NFband, report_type = NFreport_type, timestamp_ms = NFtimestamp_ms, peer_list = NFpeer_list}, TrUserData) ->
    #'RssiReport'{'band' = NFband, report_type = NFreport_type,
                  timestamp_ms =
                      if NFtimestamp_ms =:= undefined -> PFtimestamp_ms;
                         true -> NFtimestamp_ms
                      end,
                  peer_list =
                      if PFpeer_list /= undefined, NFpeer_list /= undefined -> 'erlang_++'(PFpeer_list, NFpeer_list, TrUserData);
                         PFpeer_list == undefined -> NFpeer_list;
                         NFpeer_list == undefined -> PFpeer_list
                      end}.

-compile({nowarn_unused_function,merge_msg_DNSProbeMetric/3}).
merge_msg_DNSProbeMetric(#'DNSProbeMetric'{serverIP = PFserverIP, state = PFstate, latency = PFlatency}, #'DNSProbeMetric'{serverIP = NFserverIP, state = NFstate, latency = NFlatency}, _) ->
    #'DNSProbeMetric'{serverIP =
                          if NFserverIP =:= undefined -> PFserverIP;
                             true -> NFserverIP
                          end,
                      state =
                          if NFstate =:= undefined -> PFstate;
                             true -> NFstate
                          end,
                      latency =
                          if NFlatency =:= undefined -> PFlatency;
                             true -> NFlatency
                          end}.

-compile({nowarn_unused_function,merge_msg_VLANMetrics/3}).
merge_msg_VLANMetrics(#'VLANMetrics'{vlanIF = PFvlanIF, dhcpState = PFdhcpState, latency = PFlatency}, #'VLANMetrics'{vlanIF = NFvlanIF, dhcpState = NFdhcpState, latency = NFlatency}, _) ->
    #'VLANMetrics'{vlanIF =
                       if NFvlanIF =:= undefined -> PFvlanIF;
                          true -> NFvlanIF
                       end,
                   dhcpState =
                       if NFdhcpState =:= undefined -> PFdhcpState;
                          true -> NFdhcpState
                       end,
                   latency =
                       if NFlatency =:= undefined -> PFlatency;
                          true -> NFlatency
                       end}.

-compile({nowarn_unused_function,merge_msg_RADIUSMetrics/3}).
merge_msg_RADIUSMetrics(#'RADIUSMetrics'{serverIP = PFserverIP, radiusState = PFradiusState, latency = PFlatency}, #'RADIUSMetrics'{serverIP = NFserverIP, radiusState = NFradiusState, latency = NFlatency}, _) ->
    #'RADIUSMetrics'{serverIP =
                         if NFserverIP =:= undefined -> PFserverIP;
                            true -> NFserverIP
                         end,
                     radiusState =
                         if NFradiusState =:= undefined -> PFradiusState;
                            true -> NFradiusState
                         end,
                     latency =
                         if NFlatency =:= undefined -> PFlatency;
                            true -> NFlatency
                         end}.

-compile({nowarn_unused_function,merge_msg_NetworkProbe/3}).
merge_msg_NetworkProbe(#'NetworkProbe'{dns_probe = PFdns_probe, vlan_probe = PFvlan_probe, radius_probe = PFradius_probe, timestamp_ms = PFtimestamp_ms},
                       #'NetworkProbe'{dns_probe = NFdns_probe, vlan_probe = NFvlan_probe, radius_probe = NFradius_probe, timestamp_ms = NFtimestamp_ms}, TrUserData) ->
    #'NetworkProbe'{dns_probe =
                        if PFdns_probe /= undefined, NFdns_probe /= undefined -> merge_msg_DNSProbeMetric(PFdns_probe, NFdns_probe, TrUserData);
                           PFdns_probe == undefined -> NFdns_probe;
                           NFdns_probe == undefined -> PFdns_probe
                        end,
                    vlan_probe =
                        if PFvlan_probe /= undefined, NFvlan_probe /= undefined -> merge_msg_VLANMetrics(PFvlan_probe, NFvlan_probe, TrUserData);
                           PFvlan_probe == undefined -> NFvlan_probe;
                           NFvlan_probe == undefined -> PFvlan_probe
                        end,
                    radius_probe =
                        if PFradius_probe /= undefined, NFradius_probe /= undefined -> 'erlang_++'(PFradius_probe, NFradius_probe, TrUserData);
                           PFradius_probe == undefined -> NFradius_probe;
                           NFradius_probe == undefined -> PFradius_probe
                        end,
                    timestamp_ms =
                        if NFtimestamp_ms =:= undefined -> PFtimestamp_ms;
                           true -> NFtimestamp_ms
                        end}.

-compile({nowarn_unused_function,merge_msg_RtpFlowStats/3}).
merge_msg_RtpFlowStats(#'RtpFlowStats'{direction = PFdirection, rtp_flow_type = PFrtp_flow_type, latency = PFlatency, jitter = PFjitter, packet_loss_percent = PFpacket_loss_percent, packet_loss_consec = PFpacket_loss_consec, codec = PFcodec,
                                       mosx_100 = PFmosx_100, block_codecs = PFblock_codecs, total_packets_sent = PFtotal_packets_sent, total_packets_lost = PFtotal_packets_lost, rtp_seq_first = PFrtp_seq_first, rtp_seq_last = PFrtp_seq_last, stats_idx = PFstats_idx},
                       #'RtpFlowStats'{direction = NFdirection, rtp_flow_type = NFrtp_flow_type, latency = NFlatency, jitter = NFjitter, packet_loss_percent = NFpacket_loss_percent, packet_loss_consec = NFpacket_loss_consec, codec = NFcodec, mosx_100 = NFmosx_100,
                                       block_codecs = NFblock_codecs, total_packets_sent = NFtotal_packets_sent, total_packets_lost = NFtotal_packets_lost, rtp_seq_first = NFrtp_seq_first, rtp_seq_last = NFrtp_seq_last, stats_idx = NFstats_idx},
                       _) ->
    #'RtpFlowStats'{direction =
                        if NFdirection =:= undefined -> PFdirection;
                           true -> NFdirection
                        end,
                    rtp_flow_type =
                        if NFrtp_flow_type =:= undefined -> PFrtp_flow_type;
                           true -> NFrtp_flow_type
                        end,
                    latency =
                        if NFlatency =:= undefined -> PFlatency;
                           true -> NFlatency
                        end,
                    jitter =
                        if NFjitter =:= undefined -> PFjitter;
                           true -> NFjitter
                        end,
                    packet_loss_percent =
                        if NFpacket_loss_percent =:= undefined -> PFpacket_loss_percent;
                           true -> NFpacket_loss_percent
                        end,
                    packet_loss_consec =
                        if NFpacket_loss_consec =:= undefined -> PFpacket_loss_consec;
                           true -> NFpacket_loss_consec
                        end,
                    codec =
                        if NFcodec =:= undefined -> PFcodec;
                           true -> NFcodec
                        end,
                    mosx_100 =
                        if NFmosx_100 =:= undefined -> PFmosx_100;
                           true -> NFmosx_100
                        end,
                    block_codecs =
                        if NFblock_codecs =:= undefined -> PFblock_codecs;
                           true -> NFblock_codecs
                        end,
                    total_packets_sent =
                        if NFtotal_packets_sent =:= undefined -> PFtotal_packets_sent;
                           true -> NFtotal_packets_sent
                        end,
                    total_packets_lost =
                        if NFtotal_packets_lost =:= undefined -> PFtotal_packets_lost;
                           true -> NFtotal_packets_lost
                        end,
                    rtp_seq_first =
                        if NFrtp_seq_first =:= undefined -> PFrtp_seq_first;
                           true -> NFrtp_seq_first
                        end,
                    rtp_seq_last =
                        if NFrtp_seq_last =:= undefined -> PFrtp_seq_last;
                           true -> NFrtp_seq_last
                        end,
                    stats_idx =
                        if NFstats_idx =:= undefined -> PFstats_idx;
                           true -> NFstats_idx
                        end}.

-compile({nowarn_unused_function,merge_msg_CallStart/3}).
merge_msg_CallStart(#'CallStart'{session_id = PFsession_id, wifi_session_id = PFwifi_session_id, client_mac = PFclient_mac, codecs = PFcodecs, provider_domain = PFprovider_domain, device_info = PFdevice_info, channel = PFchannel},
                    #'CallStart'{session_id = NFsession_id, wifi_session_id = NFwifi_session_id, client_mac = NFclient_mac, codecs = NFcodecs, provider_domain = NFprovider_domain, device_info = NFdevice_info, channel = NFchannel, 'band' = NFband}, TrUserData) ->
    #'CallStart'{session_id =
                     if NFsession_id =:= undefined -> PFsession_id;
                        true -> NFsession_id
                     end,
                 wifi_session_id =
                     if NFwifi_session_id =:= undefined -> PFwifi_session_id;
                        true -> NFwifi_session_id
                     end,
                 client_mac =
                     if NFclient_mac =:= undefined -> PFclient_mac;
                        true -> NFclient_mac
                     end,
                 codecs =
                     if PFcodecs /= undefined, NFcodecs /= undefined -> 'erlang_++'(PFcodecs, NFcodecs, TrUserData);
                        PFcodecs == undefined -> NFcodecs;
                        NFcodecs == undefined -> PFcodecs
                     end,
                 provider_domain =
                     if NFprovider_domain =:= undefined -> PFprovider_domain;
                        true -> NFprovider_domain
                     end,
                 device_info =
                     if NFdevice_info =:= undefined -> PFdevice_info;
                        true -> NFdevice_info
                     end,
                 channel =
                     if NFchannel =:= undefined -> PFchannel;
                        true -> NFchannel
                     end,
                 'band' = NFband}.

-compile({nowarn_unused_function,merge_msg_CallStop/3}).
merge_msg_CallStop(#'CallStop'{session_id = PFsession_id, wifi_session_id = PFwifi_session_id, client_mac = PFclient_mac, reason = PFreason, call_duration = PFcall_duration, stats = PFstats, channel = PFchannel, codecs = PFcodecs,
                               provider_domain = PFprovider_domain},
                   #'CallStop'{session_id = NFsession_id, wifi_session_id = NFwifi_session_id, client_mac = NFclient_mac, reason = NFreason, call_duration = NFcall_duration, stats = NFstats, channel = NFchannel, 'band' = NFband, codecs = NFcodecs,
                               provider_domain = NFprovider_domain},
                   TrUserData) ->
    #'CallStop'{session_id =
                    if NFsession_id =:= undefined -> PFsession_id;
                       true -> NFsession_id
                    end,
                wifi_session_id =
                    if NFwifi_session_id =:= undefined -> PFwifi_session_id;
                       true -> NFwifi_session_id
                    end,
                client_mac =
                    if NFclient_mac =:= undefined -> PFclient_mac;
                       true -> NFclient_mac
                    end,
                reason =
                    if NFreason =:= undefined -> PFreason;
                       true -> NFreason
                    end,
                call_duration =
                    if NFcall_duration =:= undefined -> PFcall_duration;
                       true -> NFcall_duration
                    end,
                stats =
                    if PFstats /= undefined, NFstats /= undefined -> 'erlang_++'(PFstats, NFstats, TrUserData);
                       PFstats == undefined -> NFstats;
                       NFstats == undefined -> PFstats
                    end,
                channel =
                    if NFchannel =:= undefined -> PFchannel;
                       true -> NFchannel
                    end,
                'band' = NFband,
                codecs =
                    if PFcodecs /= undefined, NFcodecs /= undefined -> 'erlang_++'(PFcodecs, NFcodecs, TrUserData);
                       PFcodecs == undefined -> NFcodecs;
                       NFcodecs == undefined -> PFcodecs
                    end,
                provider_domain =
                    if NFprovider_domain =:= undefined -> PFprovider_domain;
                       true -> NFprovider_domain
                    end}.

-compile({nowarn_unused_function,merge_msg_CallReport/3}).
merge_msg_CallReport(#'CallReport'{session_id = PFsession_id, wifi_session_id = PFwifi_session_id, client_mac = PFclient_mac, stats = PFstats, reason = PFreason, channel = PFchannel, codecs = PFcodecs, provider_domain = PFprovider_domain},
                     #'CallReport'{session_id = NFsession_id, wifi_session_id = NFwifi_session_id, client_mac = NFclient_mac, stats = NFstats, reason = NFreason, channel = NFchannel, 'band' = NFband, codecs = NFcodecs, provider_domain = NFprovider_domain}, TrUserData) ->
    #'CallReport'{session_id =
                      if NFsession_id =:= undefined -> PFsession_id;
                         true -> NFsession_id
                      end,
                  wifi_session_id =
                      if NFwifi_session_id =:= undefined -> PFwifi_session_id;
                         true -> NFwifi_session_id
                      end,
                  client_mac =
                      if NFclient_mac =:= undefined -> PFclient_mac;
                         true -> NFclient_mac
                      end,
                  stats =
                      if PFstats /= undefined, NFstats /= undefined -> 'erlang_++'(PFstats, NFstats, TrUserData);
                         PFstats == undefined -> NFstats;
                         NFstats == undefined -> PFstats
                      end,
                  reason =
                      if NFreason =:= undefined -> PFreason;
                         true -> NFreason
                      end,
                  channel =
                      if NFchannel =:= undefined -> PFchannel;
                         true -> NFchannel
                      end,
                  'band' = NFband,
                  codecs =
                      if PFcodecs /= undefined, NFcodecs /= undefined -> 'erlang_++'(PFcodecs, NFcodecs, TrUserData);
                         PFcodecs == undefined -> NFcodecs;
                         NFcodecs == undefined -> PFcodecs
                      end,
                  provider_domain =
                      if NFprovider_domain =:= undefined -> PFprovider_domain;
                         true -> NFprovider_domain
                      end}.

-compile({nowarn_unused_function,merge_msg_StreamingVideoDetectPattern/3}).
merge_msg_StreamingVideoDetectPattern(#'StreamingVideoDetectPattern'{dns_lookup_pattern = PFdns_lookup_pattern, video_type = PFvideo_type}, #'StreamingVideoDetectPattern'{dns_lookup_pattern = NFdns_lookup_pattern, video_type = NFvideo_type}, _) ->
    #'StreamingVideoDetectPattern'{dns_lookup_pattern =
                                       if NFdns_lookup_pattern =:= undefined -> PFdns_lookup_pattern;
                                          true -> NFdns_lookup_pattern
                                       end,
                                   video_type =
                                       if NFvideo_type =:= undefined -> PFvideo_type;
                                          true -> NFvideo_type
                                       end}.

-compile({nowarn_unused_function,merge_msg_StreamingVideoSessionStart/3}).
merge_msg_StreamingVideoSessionStart(#'StreamingVideoSessionStart'{video_session_id = PFvideo_session_id, session_id = PFsession_id, client_mac = PFclient_mac, server_ip = PFserver_ip, streaming_video_type = PFstreaming_video_type},
                                     #'StreamingVideoSessionStart'{video_session_id = NFvideo_session_id, session_id = NFsession_id, client_mac = NFclient_mac, server_ip = NFserver_ip, streaming_video_type = NFstreaming_video_type}, _) ->
    #'StreamingVideoSessionStart'{video_session_id =
                                      if NFvideo_session_id =:= undefined -> PFvideo_session_id;
                                         true -> NFvideo_session_id
                                      end,
                                  session_id =
                                      if NFsession_id =:= undefined -> PFsession_id;
                                         true -> NFsession_id
                                      end,
                                  client_mac =
                                      if NFclient_mac =:= undefined -> PFclient_mac;
                                         true -> NFclient_mac
                                      end,
                                  server_ip =
                                      if NFserver_ip =:= undefined -> PFserver_ip;
                                         true -> NFserver_ip
                                      end,
                                  streaming_video_type =
                                      if NFstreaming_video_type =:= undefined -> PFstreaming_video_type;
                                         true -> NFstreaming_video_type
                                      end}.

-compile({nowarn_unused_function,merge_msg_StreamingVideoServerDetected/3}).
merge_msg_StreamingVideoServerDetected(#'StreamingVideoServerDetected'{video_session_id = PFvideo_session_id, session_id = PFsession_id, client_mac = PFclient_mac, server_ip = PFserver_ip, server_dns_name = PFserver_dns_name,
                                                                       streaming_video_type = PFstreaming_video_type},
                                       #'StreamingVideoServerDetected'{video_session_id = NFvideo_session_id, session_id = NFsession_id, client_mac = NFclient_mac, server_ip = NFserver_ip, server_dns_name = NFserver_dns_name, streaming_video_type = NFstreaming_video_type}, _) ->
    #'StreamingVideoServerDetected'{video_session_id =
                                        if NFvideo_session_id =:= undefined -> PFvideo_session_id;
                                           true -> NFvideo_session_id
                                        end,
                                    session_id =
                                        if NFsession_id =:= undefined -> PFsession_id;
                                           true -> NFsession_id
                                        end,
                                    client_mac =
                                        if NFclient_mac =:= undefined -> PFclient_mac;
                                           true -> NFclient_mac
                                        end,
                                    server_ip =
                                        if NFserver_ip =:= undefined -> PFserver_ip;
                                           true -> NFserver_ip
                                        end,
                                    server_dns_name =
                                        if NFserver_dns_name =:= undefined -> PFserver_dns_name;
                                           true -> NFserver_dns_name
                                        end,
                                    streaming_video_type =
                                        if NFstreaming_video_type =:= undefined -> PFstreaming_video_type;
                                           true -> NFstreaming_video_type
                                        end}.

-compile({nowarn_unused_function,merge_msg_StreamingVideoStop/3}).
merge_msg_StreamingVideoStop(#'StreamingVideoStop'{video_session_id = PFvideo_session_id, session_id = PFsession_id, client_mac = PFclient_mac, server_ip = PFserver_ip, total_bytes = PFtotal_bytes, streaming_video_type = PFstreaming_video_type,
                                                   duration_sec = PFduration_sec},
                             #'StreamingVideoStop'{video_session_id = NFvideo_session_id, session_id = NFsession_id, client_mac = NFclient_mac, server_ip = NFserver_ip, total_bytes = NFtotal_bytes, streaming_video_type = NFstreaming_video_type, duration_sec = NFduration_sec},
                             _) ->
    #'StreamingVideoStop'{video_session_id =
                              if NFvideo_session_id =:= undefined -> PFvideo_session_id;
                                 true -> NFvideo_session_id
                              end,
                          session_id =
                              if NFsession_id =:= undefined -> PFsession_id;
                                 true -> NFsession_id
                              end,
                          client_mac =
                              if NFclient_mac =:= undefined -> PFclient_mac;
                                 true -> NFclient_mac
                              end,
                          server_ip =
                              if NFserver_ip =:= undefined -> PFserver_ip;
                                 true -> NFserver_ip
                              end,
                          total_bytes =
                              if NFtotal_bytes =:= undefined -> PFtotal_bytes;
                                 true -> NFtotal_bytes
                              end,
                          streaming_video_type =
                              if NFstreaming_video_type =:= undefined -> PFstreaming_video_type;
                                 true -> NFstreaming_video_type
                              end,
                          duration_sec =
                              if NFduration_sec =:= undefined -> PFduration_sec;
                                 true -> NFduration_sec
                              end}.

-compile({nowarn_unused_function,merge_msg_VideoVoiceReport/3}).
merge_msg_VideoVoiceReport(#'VideoVoiceReport'{call_start = PFcall_start, call_stop = PFcall_stop, call_report = PFcall_report, stream_video_stop = PFstream_video_stop, stream_video_server = PFstream_video_server,
                                               stream_video_session_start = PFstream_video_session_start, timestamp_ms = PFtimestamp_ms},
                           #'VideoVoiceReport'{call_start = NFcall_start, call_stop = NFcall_stop, call_report = NFcall_report, stream_video_stop = NFstream_video_stop, stream_video_server = NFstream_video_server, stream_video_session_start = NFstream_video_session_start,
                                               timestamp_ms = NFtimestamp_ms},
                           TrUserData) ->
    #'VideoVoiceReport'{call_start =
                            if PFcall_start /= undefined, NFcall_start /= undefined -> merge_msg_CallStart(PFcall_start, NFcall_start, TrUserData);
                               PFcall_start == undefined -> NFcall_start;
                               NFcall_start == undefined -> PFcall_start
                            end,
                        call_stop =
                            if PFcall_stop /= undefined, NFcall_stop /= undefined -> merge_msg_CallStop(PFcall_stop, NFcall_stop, TrUserData);
                               PFcall_stop == undefined -> NFcall_stop;
                               NFcall_stop == undefined -> PFcall_stop
                            end,
                        call_report =
                            if PFcall_report /= undefined, NFcall_report /= undefined -> merge_msg_CallReport(PFcall_report, NFcall_report, TrUserData);
                               PFcall_report == undefined -> NFcall_report;
                               NFcall_report == undefined -> PFcall_report
                            end,
                        stream_video_stop =
                            if PFstream_video_stop /= undefined, NFstream_video_stop /= undefined -> merge_msg_StreamingVideoStop(PFstream_video_stop, NFstream_video_stop, TrUserData);
                               PFstream_video_stop == undefined -> NFstream_video_stop;
                               NFstream_video_stop == undefined -> PFstream_video_stop
                            end,
                        stream_video_server =
                            if PFstream_video_server /= undefined, NFstream_video_server /= undefined -> merge_msg_StreamingVideoServerDetected(PFstream_video_server, NFstream_video_server, TrUserData);
                               PFstream_video_server == undefined -> NFstream_video_server;
                               NFstream_video_server == undefined -> PFstream_video_server
                            end,
                        stream_video_session_start =
                            if PFstream_video_session_start /= undefined, NFstream_video_session_start /= undefined -> merge_msg_StreamingVideoSessionStart(PFstream_video_session_start, NFstream_video_session_start, TrUserData);
                               PFstream_video_session_start == undefined -> NFstream_video_session_start;
                               NFstream_video_session_start == undefined -> PFstream_video_session_start
                            end,
                        timestamp_ms =
                            if NFtimestamp_ms =:= undefined -> PFtimestamp_ms;
                               true -> NFtimestamp_ms
                            end}.

-compile({nowarn_unused_function,'merge_msg_EventReport.ClientAssocEvent'/3}).
'merge_msg_EventReport.ClientAssocEvent'(#'EventReport.ClientAssocEvent'{sta_mac = PFsta_mac, session_id = PFsession_id, ssid = PFssid, 'band' = PFband, assoc_type = PFassoc_type, status = PFstatus, rssi = PFrssi, internal_sc = PFinternal_sc,
                                                                         using11k = PFusing11k, using11r = PFusing11r, using11v = PFusing11v},
                                         #'EventReport.ClientAssocEvent'{sta_mac = NFsta_mac, session_id = NFsession_id, ssid = NFssid, 'band' = NFband, assoc_type = NFassoc_type, status = NFstatus, rssi = NFrssi, internal_sc = NFinternal_sc, using11k = NFusing11k, using11r = NFusing11r,
                                                                         using11v = NFusing11v},
                                         _) ->
    #'EventReport.ClientAssocEvent'{sta_mac =
                                        if NFsta_mac =:= undefined -> PFsta_mac;
                                           true -> NFsta_mac
                                        end,
                                    session_id =
                                        if NFsession_id =:= undefined -> PFsession_id;
                                           true -> NFsession_id
                                        end,
                                    ssid =
                                        if NFssid =:= undefined -> PFssid;
                                           true -> NFssid
                                        end,
                                    'band' =
                                        if NFband =:= undefined -> PFband;
                                           true -> NFband
                                        end,
                                    assoc_type =
                                        if NFassoc_type =:= undefined -> PFassoc_type;
                                           true -> NFassoc_type
                                        end,
                                    status =
                                        if NFstatus =:= undefined -> PFstatus;
                                           true -> NFstatus
                                        end,
                                    rssi =
                                        if NFrssi =:= undefined -> PFrssi;
                                           true -> NFrssi
                                        end,
                                    internal_sc =
                                        if NFinternal_sc =:= undefined -> PFinternal_sc;
                                           true -> NFinternal_sc
                                        end,
                                    using11k =
                                        if NFusing11k =:= undefined -> PFusing11k;
                                           true -> NFusing11k
                                        end,
                                    using11r =
                                        if NFusing11r =:= undefined -> PFusing11r;
                                           true -> NFusing11r
                                        end,
                                    using11v =
                                        if NFusing11v =:= undefined -> PFusing11v;
                                           true -> NFusing11v
                                        end}.

-compile({nowarn_unused_function,'merge_msg_EventReport.ClientAuthEvent'/3}).
'merge_msg_EventReport.ClientAuthEvent'(#'EventReport.ClientAuthEvent'{sta_mac = PFsta_mac, session_id = PFsession_id, ssid = PFssid, 'band' = PFband, auth_status = PFauth_status},
                                        #'EventReport.ClientAuthEvent'{sta_mac = NFsta_mac, session_id = NFsession_id, ssid = NFssid, 'band' = NFband, auth_status = NFauth_status}, _) ->
    #'EventReport.ClientAuthEvent'{sta_mac =
                                       if NFsta_mac =:= undefined -> PFsta_mac;
                                          true -> NFsta_mac
                                       end,
                                   session_id =
                                       if NFsession_id =:= undefined -> PFsession_id;
                                          true -> NFsession_id
                                       end,
                                   ssid =
                                       if NFssid =:= undefined -> PFssid;
                                          true -> NFssid
                                       end,
                                   'band' =
                                       if NFband =:= undefined -> PFband;
                                          true -> NFband
                                       end,
                                   auth_status =
                                       if NFauth_status =:= undefined -> PFauth_status;
                                          true -> NFauth_status
                                       end}.

-compile({nowarn_unused_function,'merge_msg_EventReport.ClientDisconnectEvent'/3}).
'merge_msg_EventReport.ClientDisconnectEvent'(#'EventReport.ClientDisconnectEvent'{sta_mac = PFsta_mac, session_id = PFsession_id, reason = PFreason, dev_type = PFdev_type, fr_type = PFfr_type, lsent_up_ts_in_us = PFlsent_up_ts_in_us,
                                                                                   lrcv_up_ts_in_us = PFlrcv_up_ts_in_us, internal_rc = PFinternal_rc, rssi = PFrssi, ssid = PFssid, 'band' = PFband},
                                              #'EventReport.ClientDisconnectEvent'{sta_mac = NFsta_mac, session_id = NFsession_id, reason = NFreason, dev_type = NFdev_type, fr_type = NFfr_type, lsent_up_ts_in_us = NFlsent_up_ts_in_us, lrcv_up_ts_in_us = NFlrcv_up_ts_in_us,
                                                                                   internal_rc = NFinternal_rc, rssi = NFrssi, ssid = NFssid, 'band' = NFband},
                                              _) ->
    #'EventReport.ClientDisconnectEvent'{sta_mac =
                                             if NFsta_mac =:= undefined -> PFsta_mac;
                                                true -> NFsta_mac
                                             end,
                                         session_id =
                                             if NFsession_id =:= undefined -> PFsession_id;
                                                true -> NFsession_id
                                             end,
                                         reason =
                                             if NFreason =:= undefined -> PFreason;
                                                true -> NFreason
                                             end,
                                         dev_type =
                                             if NFdev_type =:= undefined -> PFdev_type;
                                                true -> NFdev_type
                                             end,
                                         fr_type =
                                             if NFfr_type =:= undefined -> PFfr_type;
                                                true -> NFfr_type
                                             end,
                                         lsent_up_ts_in_us =
                                             if NFlsent_up_ts_in_us =:= undefined -> PFlsent_up_ts_in_us;
                                                true -> NFlsent_up_ts_in_us
                                             end,
                                         lrcv_up_ts_in_us =
                                             if NFlrcv_up_ts_in_us =:= undefined -> PFlrcv_up_ts_in_us;
                                                true -> NFlrcv_up_ts_in_us
                                             end,
                                         internal_rc =
                                             if NFinternal_rc =:= undefined -> PFinternal_rc;
                                                true -> NFinternal_rc
                                             end,
                                         rssi =
                                             if NFrssi =:= undefined -> PFrssi;
                                                true -> NFrssi
                                             end,
                                         ssid =
                                             if NFssid =:= undefined -> PFssid;
                                                true -> NFssid
                                             end,
                                         'band' =
                                             if NFband =:= undefined -> PFband;
                                                true -> NFband
                                             end}.

-compile({nowarn_unused_function,'merge_msg_EventReport.ClientConnectEvent'/3}).
'merge_msg_EventReport.ClientConnectEvent'(#'EventReport.ClientConnectEvent'{sta_mac = PFsta_mac, session_id = PFsession_id, 'band' = PFband, assoc_type = PFassoc_type, ssid = PFssid, sec_type = PFsec_type, fbt_used = PFfbt_used, ip_addr = PFip_addr,
                                                                             clt_id = PFclt_id, ev_time_bootup_in_us_auth = PFev_time_bootup_in_us_auth, ev_time_bootup_in_us_assoc = PFev_time_bootup_in_us_assoc, ev_time_bootup_in_us_eapol = PFev_time_bootup_in_us_eapol,
                                                                             ev_time_bootup_in_us_port_enable = PFev_time_bootup_in_us_port_enable, ev_time_bootup_in_us_first_rx = PFev_time_bootup_in_us_first_rx, ev_time_bootup_in_us_first_tx = PFev_time_bootup_in_us_first_tx, using11k = PFusing11k,
                                                                             using11r = PFusing11r, using11v = PFusing11v, ev_time_bootup_in_us_ip = PFev_time_bootup_in_us_ip, assoc_rssi = PFassoc_rssi},
                                           #'EventReport.ClientConnectEvent'{sta_mac = NFsta_mac, session_id = NFsession_id, 'band' = NFband, assoc_type = NFassoc_type, ssid = NFssid, sec_type = NFsec_type, fbt_used = NFfbt_used, ip_addr = NFip_addr, clt_id = NFclt_id,
                                                                             ev_time_bootup_in_us_auth = NFev_time_bootup_in_us_auth, ev_time_bootup_in_us_assoc = NFev_time_bootup_in_us_assoc, ev_time_bootup_in_us_eapol = NFev_time_bootup_in_us_eapol,
                                                                             ev_time_bootup_in_us_port_enable = NFev_time_bootup_in_us_port_enable, ev_time_bootup_in_us_first_rx = NFev_time_bootup_in_us_first_rx, ev_time_bootup_in_us_first_tx = NFev_time_bootup_in_us_first_tx, using11k = NFusing11k,
                                                                             using11r = NFusing11r, using11v = NFusing11v, ev_time_bootup_in_us_ip = NFev_time_bootup_in_us_ip, assoc_rssi = NFassoc_rssi},
                                           _) ->
    #'EventReport.ClientConnectEvent'{sta_mac =
                                          if NFsta_mac =:= undefined -> PFsta_mac;
                                             true -> NFsta_mac
                                          end,
                                      session_id =
                                          if NFsession_id =:= undefined -> PFsession_id;
                                             true -> NFsession_id
                                          end,
                                      'band' =
                                          if NFband =:= undefined -> PFband;
                                             true -> NFband
                                          end,
                                      assoc_type =
                                          if NFassoc_type =:= undefined -> PFassoc_type;
                                             true -> NFassoc_type
                                          end,
                                      ssid =
                                          if NFssid =:= undefined -> PFssid;
                                             true -> NFssid
                                          end,
                                      sec_type =
                                          if NFsec_type =:= undefined -> PFsec_type;
                                             true -> NFsec_type
                                          end,
                                      fbt_used =
                                          if NFfbt_used =:= undefined -> PFfbt_used;
                                             true -> NFfbt_used
                                          end,
                                      ip_addr =
                                          if NFip_addr =:= undefined -> PFip_addr;
                                             true -> NFip_addr
                                          end,
                                      clt_id =
                                          if NFclt_id =:= undefined -> PFclt_id;
                                             true -> NFclt_id
                                          end,
                                      ev_time_bootup_in_us_auth =
                                          if NFev_time_bootup_in_us_auth =:= undefined -> PFev_time_bootup_in_us_auth;
                                             true -> NFev_time_bootup_in_us_auth
                                          end,
                                      ev_time_bootup_in_us_assoc =
                                          if NFev_time_bootup_in_us_assoc =:= undefined -> PFev_time_bootup_in_us_assoc;
                                             true -> NFev_time_bootup_in_us_assoc
                                          end,
                                      ev_time_bootup_in_us_eapol =
                                          if NFev_time_bootup_in_us_eapol =:= undefined -> PFev_time_bootup_in_us_eapol;
                                             true -> NFev_time_bootup_in_us_eapol
                                          end,
                                      ev_time_bootup_in_us_port_enable =
                                          if NFev_time_bootup_in_us_port_enable =:= undefined -> PFev_time_bootup_in_us_port_enable;
                                             true -> NFev_time_bootup_in_us_port_enable
                                          end,
                                      ev_time_bootup_in_us_first_rx =
                                          if NFev_time_bootup_in_us_first_rx =:= undefined -> PFev_time_bootup_in_us_first_rx;
                                             true -> NFev_time_bootup_in_us_first_rx
                                          end,
                                      ev_time_bootup_in_us_first_tx =
                                          if NFev_time_bootup_in_us_first_tx =:= undefined -> PFev_time_bootup_in_us_first_tx;
                                             true -> NFev_time_bootup_in_us_first_tx
                                          end,
                                      using11k =
                                          if NFusing11k =:= undefined -> PFusing11k;
                                             true -> NFusing11k
                                          end,
                                      using11r =
                                          if NFusing11r =:= undefined -> PFusing11r;
                                             true -> NFusing11r
                                          end,
                                      using11v =
                                          if NFusing11v =:= undefined -> PFusing11v;
                                             true -> NFusing11v
                                          end,
                                      ev_time_bootup_in_us_ip =
                                          if NFev_time_bootup_in_us_ip =:= undefined -> PFev_time_bootup_in_us_ip;
                                             true -> NFev_time_bootup_in_us_ip
                                          end,
                                      assoc_rssi =
                                          if NFassoc_rssi =:= undefined -> PFassoc_rssi;
                                             true -> NFassoc_rssi
                                          end}.

-compile({nowarn_unused_function,'merge_msg_EventReport.ClientFailureEvent'/3}).
'merge_msg_EventReport.ClientFailureEvent'(#'EventReport.ClientFailureEvent'{sta_mac = PFsta_mac, session_id = PFsession_id, ssid = PFssid, reason_code = PFreason_code, reason_str = PFreason_str},
                                           #'EventReport.ClientFailureEvent'{sta_mac = NFsta_mac, session_id = NFsession_id, ssid = NFssid, reason_code = NFreason_code, reason_str = NFreason_str}, _) ->
    #'EventReport.ClientFailureEvent'{sta_mac =
                                          if NFsta_mac =:= undefined -> PFsta_mac;
                                             true -> NFsta_mac
                                          end,
                                      session_id =
                                          if NFsession_id =:= undefined -> PFsession_id;
                                             true -> NFsession_id
                                          end,
                                      ssid =
                                          if NFssid =:= undefined -> PFssid;
                                             true -> NFssid
                                          end,
                                      reason_code =
                                          if NFreason_code =:= undefined -> PFreason_code;
                                             true -> NFreason_code
                                          end,
                                      reason_str =
                                          if NFreason_str =:= undefined -> PFreason_str;
                                             true -> NFreason_str
                                          end}.

-compile({nowarn_unused_function,'merge_msg_EventReport.ClientFirstDataEvent'/3}).
'merge_msg_EventReport.ClientFirstDataEvent'(#'EventReport.ClientFirstDataEvent'{sta_mac = PFsta_mac, session_id = PFsession_id, fdata_tx_up_ts_in_us = PFfdata_tx_up_ts_in_us, fdata_rx_up_ts_in_us = PFfdata_rx_up_ts_in_us},
                                             #'EventReport.ClientFirstDataEvent'{sta_mac = NFsta_mac, session_id = NFsession_id, fdata_tx_up_ts_in_us = NFfdata_tx_up_ts_in_us, fdata_rx_up_ts_in_us = NFfdata_rx_up_ts_in_us}, _) ->
    #'EventReport.ClientFirstDataEvent'{sta_mac =
                                            if NFsta_mac =:= undefined -> PFsta_mac;
                                               true -> NFsta_mac
                                            end,
                                        session_id =
                                            if NFsession_id =:= undefined -> PFsession_id;
                                               true -> NFsession_id
                                            end,
                                        fdata_tx_up_ts_in_us =
                                            if NFfdata_tx_up_ts_in_us =:= undefined -> PFfdata_tx_up_ts_in_us;
                                               true -> NFfdata_tx_up_ts_in_us
                                            end,
                                        fdata_rx_up_ts_in_us =
                                            if NFfdata_rx_up_ts_in_us =:= undefined -> PFfdata_rx_up_ts_in_us;
                                               true -> NFfdata_rx_up_ts_in_us
                                            end}.

-compile({nowarn_unused_function,'merge_msg_EventReport.ClientIdEvent'/3}).
'merge_msg_EventReport.ClientIdEvent'(#'EventReport.ClientIdEvent'{clt_mac = PFclt_mac, session_id = PFsession_id, clt_id = PFclt_id}, #'EventReport.ClientIdEvent'{clt_mac = NFclt_mac, session_id = NFsession_id, clt_id = NFclt_id}, _) ->
    #'EventReport.ClientIdEvent'{clt_mac =
                                     if NFclt_mac =:= undefined -> PFclt_mac;
                                        true -> NFclt_mac
                                     end,
                                 session_id =
                                     if NFsession_id =:= undefined -> PFsession_id;
                                        true -> NFsession_id
                                     end,
                                 clt_id =
                                     if NFclt_id =:= undefined -> PFclt_id;
                                        true -> NFclt_id
                                     end}.

-compile({nowarn_unused_function,'merge_msg_EventReport.ClientIpEvent'/3}).
'merge_msg_EventReport.ClientIpEvent'(#'EventReport.ClientIpEvent'{sta_mac = PFsta_mac, session_id = PFsession_id, ip_addr = PFip_addr}, #'EventReport.ClientIpEvent'{sta_mac = NFsta_mac, session_id = NFsession_id, ip_addr = NFip_addr}, _) ->
    #'EventReport.ClientIpEvent'{sta_mac =
                                     if NFsta_mac =:= undefined -> PFsta_mac;
                                        true -> NFsta_mac
                                     end,
                                 session_id =
                                     if NFsession_id =:= undefined -> PFsession_id;
                                        true -> NFsession_id
                                     end,
                                 ip_addr =
                                     if NFip_addr =:= undefined -> PFip_addr;
                                        true -> NFip_addr
                                     end}.

-compile({nowarn_unused_function,'merge_msg_EventReport.ClientTimeoutEvent'/3}).
'merge_msg_EventReport.ClientTimeoutEvent'(#'EventReport.ClientTimeoutEvent'{sta_mac = PFsta_mac, session_id = PFsession_id, r_code = PFr_code, last_sent_up_ts_in_us = PFlast_sent_up_ts_in_us, last_rcv_up_ts_in_us = PFlast_rcv_up_ts_in_us},
                                           #'EventReport.ClientTimeoutEvent'{sta_mac = NFsta_mac, session_id = NFsession_id, r_code = NFr_code, last_sent_up_ts_in_us = NFlast_sent_up_ts_in_us, last_rcv_up_ts_in_us = NFlast_rcv_up_ts_in_us}, _) ->
    #'EventReport.ClientTimeoutEvent'{sta_mac =
                                          if NFsta_mac =:= undefined -> PFsta_mac;
                                             true -> NFsta_mac
                                          end,
                                      session_id =
                                          if NFsession_id =:= undefined -> PFsession_id;
                                             true -> NFsession_id
                                          end,
                                      r_code =
                                          if NFr_code =:= undefined -> PFr_code;
                                             true -> NFr_code
                                          end,
                                      last_sent_up_ts_in_us =
                                          if NFlast_sent_up_ts_in_us =:= undefined -> PFlast_sent_up_ts_in_us;
                                             true -> NFlast_sent_up_ts_in_us
                                          end,
                                      last_rcv_up_ts_in_us =
                                          if NFlast_rcv_up_ts_in_us =:= undefined -> PFlast_rcv_up_ts_in_us;
                                             true -> NFlast_rcv_up_ts_in_us
                                          end}.

-compile({nowarn_unused_function,'merge_msg_EventReport.ClientSession'/3}).
'merge_msg_EventReport.ClientSession'(#'EventReport.ClientSession'{client_assoc_event = PFclient_assoc_event, client_auth_event = PFclient_auth_event, client_disconnect_event = PFclient_disconnect_event, client_failure_event = PFclient_failure_event,
                                                                   client_first_data_event = PFclient_first_data_event, client_id_event = PFclient_id_event, client_ip_event = PFclient_ip_event, client_timeout_event = PFclient_timeout_event, client_connect_event = PFclient_connect_event},
                                      #'EventReport.ClientSession'{session_id = NFsession_id, client_assoc_event = NFclient_assoc_event, client_auth_event = NFclient_auth_event, client_disconnect_event = NFclient_disconnect_event, client_failure_event = NFclient_failure_event,
                                                                   client_first_data_event = NFclient_first_data_event, client_id_event = NFclient_id_event, client_ip_event = NFclient_ip_event, client_timeout_event = NFclient_timeout_event, client_connect_event = NFclient_connect_event},
                                      TrUserData) ->
    #'EventReport.ClientSession'{session_id = NFsession_id,
                                 client_assoc_event =
                                     if PFclient_assoc_event /= undefined, NFclient_assoc_event /= undefined -> 'erlang_++'(PFclient_assoc_event, NFclient_assoc_event, TrUserData);
                                        PFclient_assoc_event == undefined -> NFclient_assoc_event;
                                        NFclient_assoc_event == undefined -> PFclient_assoc_event
                                     end,
                                 client_auth_event =
                                     if PFclient_auth_event /= undefined, NFclient_auth_event /= undefined -> 'erlang_++'(PFclient_auth_event, NFclient_auth_event, TrUserData);
                                        PFclient_auth_event == undefined -> NFclient_auth_event;
                                        NFclient_auth_event == undefined -> PFclient_auth_event
                                     end,
                                 client_disconnect_event =
                                     if PFclient_disconnect_event /= undefined, NFclient_disconnect_event /= undefined -> 'erlang_++'(PFclient_disconnect_event, NFclient_disconnect_event, TrUserData);
                                        PFclient_disconnect_event == undefined -> NFclient_disconnect_event;
                                        NFclient_disconnect_event == undefined -> PFclient_disconnect_event
                                     end,
                                 client_failure_event =
                                     if PFclient_failure_event /= undefined, NFclient_failure_event /= undefined -> 'erlang_++'(PFclient_failure_event, NFclient_failure_event, TrUserData);
                                        PFclient_failure_event == undefined -> NFclient_failure_event;
                                        NFclient_failure_event == undefined -> PFclient_failure_event
                                     end,
                                 client_first_data_event =
                                     if PFclient_first_data_event /= undefined, NFclient_first_data_event /= undefined -> 'erlang_++'(PFclient_first_data_event, NFclient_first_data_event, TrUserData);
                                        PFclient_first_data_event == undefined -> NFclient_first_data_event;
                                        NFclient_first_data_event == undefined -> PFclient_first_data_event
                                     end,
                                 client_id_event =
                                     if PFclient_id_event /= undefined, NFclient_id_event /= undefined -> 'erlang_++'(PFclient_id_event, NFclient_id_event, TrUserData);
                                        PFclient_id_event == undefined -> NFclient_id_event;
                                        NFclient_id_event == undefined -> PFclient_id_event
                                     end,
                                 client_ip_event =
                                     if PFclient_ip_event /= undefined, NFclient_ip_event /= undefined -> 'erlang_++'(PFclient_ip_event, NFclient_ip_event, TrUserData);
                                        PFclient_ip_event == undefined -> NFclient_ip_event;
                                        NFclient_ip_event == undefined -> PFclient_ip_event
                                     end,
                                 client_timeout_event =
                                     if PFclient_timeout_event /= undefined, NFclient_timeout_event /= undefined -> 'erlang_++'(PFclient_timeout_event, NFclient_timeout_event, TrUserData);
                                        PFclient_timeout_event == undefined -> NFclient_timeout_event;
                                        NFclient_timeout_event == undefined -> PFclient_timeout_event
                                     end,
                                 client_connect_event =
                                     if PFclient_connect_event /= undefined, NFclient_connect_event /= undefined -> 'erlang_++'(PFclient_connect_event, NFclient_connect_event, TrUserData);
                                        PFclient_connect_event == undefined -> NFclient_connect_event;
                                        NFclient_connect_event == undefined -> PFclient_connect_event
                                     end}.

-compile({nowarn_unused_function,merge_msg_EventReport/3}).
merge_msg_EventReport(#'EventReport'{client_session = PFclient_session}, #'EventReport'{client_session = NFclient_session}, TrUserData) ->
    #'EventReport'{client_session =
                       if PFclient_session /= undefined, NFclient_session /= undefined -> 'erlang_++'(PFclient_session, NFclient_session, TrUserData);
                          PFclient_session == undefined -> NFclient_session;
                          NFclient_session == undefined -> PFclient_session
                       end}.

-compile({nowarn_unused_function,merge_msg_Report/3}).
merge_msg_Report(#'Report'{survey = PFsurvey, capacity = PFcapacity, neighbors = PFneighbors, clients = PFclients, device = PFdevice, bs_report = PFbs_report, rssi_report = PFrssi_report, video_voice_report = PFvideo_voice_report,
                           network_probe = PFnetwork_probe, event_report = PFevent_report},
                 #'Report'{nodeID = NFnodeID, survey = NFsurvey, capacity = NFcapacity, neighbors = NFneighbors, clients = NFclients, device = NFdevice, bs_report = NFbs_report, rssi_report = NFrssi_report, video_voice_report = NFvideo_voice_report,
                           network_probe = NFnetwork_probe, event_report = NFevent_report},
                 TrUserData) ->
    #'Report'{nodeID = NFnodeID,
              survey =
                  if PFsurvey /= undefined, NFsurvey /= undefined -> 'erlang_++'(PFsurvey, NFsurvey, TrUserData);
                     PFsurvey == undefined -> NFsurvey;
                     NFsurvey == undefined -> PFsurvey
                  end,
              capacity =
                  if PFcapacity /= undefined, NFcapacity /= undefined -> 'erlang_++'(PFcapacity, NFcapacity, TrUserData);
                     PFcapacity == undefined -> NFcapacity;
                     NFcapacity == undefined -> PFcapacity
                  end,
              neighbors =
                  if PFneighbors /= undefined, NFneighbors /= undefined -> 'erlang_++'(PFneighbors, NFneighbors, TrUserData);
                     PFneighbors == undefined -> NFneighbors;
                     NFneighbors == undefined -> PFneighbors
                  end,
              clients =
                  if PFclients /= undefined, NFclients /= undefined -> 'erlang_++'(PFclients, NFclients, TrUserData);
                     PFclients == undefined -> NFclients;
                     NFclients == undefined -> PFclients
                  end,
              device =
                  if PFdevice /= undefined, NFdevice /= undefined -> 'erlang_++'(PFdevice, NFdevice, TrUserData);
                     PFdevice == undefined -> NFdevice;
                     NFdevice == undefined -> PFdevice
                  end,
              bs_report =
                  if PFbs_report /= undefined, NFbs_report /= undefined -> 'erlang_++'(PFbs_report, NFbs_report, TrUserData);
                     PFbs_report == undefined -> NFbs_report;
                     NFbs_report == undefined -> PFbs_report
                  end,
              rssi_report =
                  if PFrssi_report /= undefined, NFrssi_report /= undefined -> 'erlang_++'(PFrssi_report, NFrssi_report, TrUserData);
                     PFrssi_report == undefined -> NFrssi_report;
                     NFrssi_report == undefined -> PFrssi_report
                  end,
              video_voice_report =
                  if PFvideo_voice_report /= undefined, NFvideo_voice_report /= undefined -> 'erlang_++'(PFvideo_voice_report, NFvideo_voice_report, TrUserData);
                     PFvideo_voice_report == undefined -> NFvideo_voice_report;
                     NFvideo_voice_report == undefined -> PFvideo_voice_report
                  end,
              network_probe =
                  if PFnetwork_probe /= undefined, NFnetwork_probe /= undefined -> 'erlang_++'(PFnetwork_probe, NFnetwork_probe, TrUserData);
                     PFnetwork_probe == undefined -> NFnetwork_probe;
                     NFnetwork_probe == undefined -> PFnetwork_probe
                  end,
              event_report =
                  if PFevent_report /= undefined, NFevent_report /= undefined -> 'erlang_++'(PFevent_report, NFevent_report, TrUserData);
                     PFevent_report == undefined -> NFevent_report;
                     NFevent_report == undefined -> PFevent_report
                  end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'AvgType' -> v_msg_AvgType(Msg, [MsgName], TrUserData);
        'Neighbor.NeighborBss' -> 'v_msg_Neighbor.NeighborBss'(Msg, [MsgName], TrUserData);
        'Neighbor' -> v_msg_Neighbor(Msg, [MsgName], TrUserData);
        'Client.Stats' -> 'v_msg_Client.Stats'(Msg, [MsgName], TrUserData);
        'Client.RxStats' -> 'v_msg_Client.RxStats'(Msg, [MsgName], TrUserData);
        'Client.RxStats.ChainRSSI' -> 'v_msg_Client.RxStats.ChainRSSI'(Msg, [MsgName], TrUserData);
        'Client.TxStats' -> 'v_msg_Client.TxStats'(Msg, [MsgName], TrUserData);
        'Client.TidStats' -> 'v_msg_Client.TidStats'(Msg, [MsgName], TrUserData);
        'Client.TidStats.Sojourn' -> 'v_msg_Client.TidStats.Sojourn'(Msg, [MsgName], TrUserData);
        'Client' -> v_msg_Client(Msg, [MsgName], TrUserData);
        'ClientReport' -> v_msg_ClientReport(Msg, [MsgName], TrUserData);
        'Survey.SurveySample' -> 'v_msg_Survey.SurveySample'(Msg, [MsgName], TrUserData);
        'Survey.SurveyAvg' -> 'v_msg_Survey.SurveyAvg'(Msg, [MsgName], TrUserData);
        'Survey' -> v_msg_Survey(Msg, [MsgName], TrUserData);
        'Capacity.QueueSample' -> 'v_msg_Capacity.QueueSample'(Msg, [MsgName], TrUserData);
        'Capacity' -> v_msg_Capacity(Msg, [MsgName], TrUserData);
        'Device.LoadAvg' -> 'v_msg_Device.LoadAvg'(Msg, [MsgName], TrUserData);
        'Device.RadioTemp' -> 'v_msg_Device.RadioTemp'(Msg, [MsgName], TrUserData);
        'Device.Thermal' -> 'v_msg_Device.Thermal'(Msg, [MsgName], TrUserData);
        'Device.Thermal.RadioTxChainMask' -> 'v_msg_Device.Thermal.RadioTxChainMask'(Msg, [MsgName], TrUserData);
        'Device.MemUtil' -> 'v_msg_Device.MemUtil'(Msg, [MsgName], TrUserData);
        'Device.FsUtil' -> 'v_msg_Device.FsUtil'(Msg, [MsgName], TrUserData);
        'Device.CpuUtil' -> 'v_msg_Device.CpuUtil'(Msg, [MsgName], TrUserData);
        'Device.PerProcessUtil' -> 'v_msg_Device.PerProcessUtil'(Msg, [MsgName], TrUserData);
        'Device' -> v_msg_Device(Msg, [MsgName], TrUserData);
        'BSClient.BSEvent' -> 'v_msg_BSClient.BSEvent'(Msg, [MsgName], TrUserData);
        'BSClient.BSBandReport' -> 'v_msg_BSClient.BSBandReport'(Msg, [MsgName], TrUserData);
        'BSClient' -> v_msg_BSClient(Msg, [MsgName], TrUserData);
        'BSReport' -> v_msg_BSReport(Msg, [MsgName], TrUserData);
        'RssiPeer.RssiSample' -> 'v_msg_RssiPeer.RssiSample'(Msg, [MsgName], TrUserData);
        'RssiPeer' -> v_msg_RssiPeer(Msg, [MsgName], TrUserData);
        'RssiReport' -> v_msg_RssiReport(Msg, [MsgName], TrUserData);
        'DNSProbeMetric' -> v_msg_DNSProbeMetric(Msg, [MsgName], TrUserData);
        'VLANMetrics' -> v_msg_VLANMetrics(Msg, [MsgName], TrUserData);
        'RADIUSMetrics' -> v_msg_RADIUSMetrics(Msg, [MsgName], TrUserData);
        'NetworkProbe' -> v_msg_NetworkProbe(Msg, [MsgName], TrUserData);
        'RtpFlowStats' -> v_msg_RtpFlowStats(Msg, [MsgName], TrUserData);
        'CallStart' -> v_msg_CallStart(Msg, [MsgName], TrUserData);
        'CallStop' -> v_msg_CallStop(Msg, [MsgName], TrUserData);
        'CallReport' -> v_msg_CallReport(Msg, [MsgName], TrUserData);
        'StreamingVideoDetectPattern' -> v_msg_StreamingVideoDetectPattern(Msg, [MsgName], TrUserData);
        'StreamingVideoSessionStart' -> v_msg_StreamingVideoSessionStart(Msg, [MsgName], TrUserData);
        'StreamingVideoServerDetected' -> v_msg_StreamingVideoServerDetected(Msg, [MsgName], TrUserData);
        'StreamingVideoStop' -> v_msg_StreamingVideoStop(Msg, [MsgName], TrUserData);
        'VideoVoiceReport' -> v_msg_VideoVoiceReport(Msg, [MsgName], TrUserData);
        'EventReport.ClientAssocEvent' -> 'v_msg_EventReport.ClientAssocEvent'(Msg, [MsgName], TrUserData);
        'EventReport.ClientAuthEvent' -> 'v_msg_EventReport.ClientAuthEvent'(Msg, [MsgName], TrUserData);
        'EventReport.ClientDisconnectEvent' -> 'v_msg_EventReport.ClientDisconnectEvent'(Msg, [MsgName], TrUserData);
        'EventReport.ClientConnectEvent' -> 'v_msg_EventReport.ClientConnectEvent'(Msg, [MsgName], TrUserData);
        'EventReport.ClientFailureEvent' -> 'v_msg_EventReport.ClientFailureEvent'(Msg, [MsgName], TrUserData);
        'EventReport.ClientFirstDataEvent' -> 'v_msg_EventReport.ClientFirstDataEvent'(Msg, [MsgName], TrUserData);
        'EventReport.ClientIdEvent' -> 'v_msg_EventReport.ClientIdEvent'(Msg, [MsgName], TrUserData);
        'EventReport.ClientIpEvent' -> 'v_msg_EventReport.ClientIpEvent'(Msg, [MsgName], TrUserData);
        'EventReport.ClientTimeoutEvent' -> 'v_msg_EventReport.ClientTimeoutEvent'(Msg, [MsgName], TrUserData);
        'EventReport.ClientSession' -> 'v_msg_EventReport.ClientSession'(Msg, [MsgName], TrUserData);
        'EventReport' -> v_msg_EventReport(Msg, [MsgName], TrUserData);
        'Report' -> v_msg_Report(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_AvgType/3}).
-dialyzer({nowarn_function,v_msg_AvgType/3}).
v_msg_AvgType(#'AvgType'{avg = F1, min = F2, max = F3, num = F4}, Path, TrUserData) ->
    v_type_uint32(F1, [avg | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [min | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [max | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [num | Path], TrUserData)
    end,
    ok;
v_msg_AvgType(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'AvgType'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Neighbor.NeighborBss'/3}).
-dialyzer({nowarn_function,'v_msg_Neighbor.NeighborBss'/3}).
'v_msg_Neighbor.NeighborBss'(#'Neighbor.NeighborBss'{bssid = F1, ssid = F2, rssi = F3, tsf = F4, chan_width = F5, channel = F6, status = F7}, Path, TrUserData) ->
    v_type_string(F1, [bssid | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [ssid | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [rssi | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [tsf | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_enum_ChanWidth(F5, [chan_width | Path], TrUserData)
    end,
    v_type_uint32(F6, [channel | Path], TrUserData),
    if F7 == undefined -> ok;
       true -> v_enum_DiffType(F7, [status | Path], TrUserData)
    end,
    ok;
'v_msg_Neighbor.NeighborBss'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Neighbor.NeighborBss'}, X, Path).

-compile({nowarn_unused_function,v_msg_Neighbor/3}).
-dialyzer({nowarn_function,v_msg_Neighbor/3}).
v_msg_Neighbor(#'Neighbor'{'band' = F1, scan_type = F2, timestamp_ms = F3, bss_list = F4, report_type = F5}, Path, TrUserData) ->
    v_enum_RadioBandType(F1, ['band' | Path], TrUserData),
    v_enum_NeighborType(F2, [scan_type | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [timestamp_ms | Path], TrUserData)
    end,
    if is_list(F4) ->
           _ = ['v_msg_Neighbor.NeighborBss'(Elem, [bss_list | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Neighbor.NeighborBss'}}, F4, [bss_list | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_enum_ReportType(F5, [report_type | Path], TrUserData)
    end,
    ok;
v_msg_Neighbor(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Neighbor'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Client.Stats'/3}).
-dialyzer({nowarn_function,'v_msg_Client.Stats'/3}).
'v_msg_Client.Stats'(#'Client.Stats'{rx_bytes = F1, tx_bytes = F2, rx_frames = F3, tx_frames = F4, rx_retries = F5, tx_retries = F6, rx_errors = F7, tx_errors = F8, rx_rate = F9, tx_rate = F10, rssi = F11}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [rx_bytes | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [tx_bytes | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [rx_frames | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [tx_frames | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [rx_retries | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [tx_retries | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [rx_errors | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint64(F8, [tx_errors | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_double(F9, [rx_rate | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_double(F10, [tx_rate | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [rssi | Path], TrUserData)
    end,
    ok;
'v_msg_Client.Stats'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Client.Stats'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Client.RxStats'/3}).
-dialyzer({nowarn_function,'v_msg_Client.RxStats'/3}).
'v_msg_Client.RxStats'(#'Client.RxStats'{mcs = F1, nss = F2, bw = F3, bytes = F4, msdus = F5, mpdus = F6, ppdus = F7, retries = F8, errors = F9, rssi = F10, chain_rssi = F11}, Path, TrUserData) ->
    v_type_uint32(F1, [mcs | Path], TrUserData),
    v_type_uint32(F2, [nss | Path], TrUserData),
    v_type_uint32(F3, [bw | Path], TrUserData),
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [bytes | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [msdus | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [mpdus | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [ppdus | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint64(F8, [retries | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint64(F9, [errors | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [rssi | Path], TrUserData)
    end,
    if is_list(F11) ->
           _ = ['v_msg_Client.RxStats.ChainRSSI'(Elem, [chain_rssi | Path], TrUserData) || Elem <- F11],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Client.RxStats.ChainRSSI'}}, F11, [chain_rssi | Path])
    end,
    ok;
'v_msg_Client.RxStats'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Client.RxStats'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Client.RxStats.ChainRSSI'/3}).
-dialyzer({nowarn_function,'v_msg_Client.RxStats.ChainRSSI'/3}).
'v_msg_Client.RxStats.ChainRSSI'(#'Client.RxStats.ChainRSSI'{chain = F1, ht = F2, rssi = F3}, Path, TrUserData) ->
    v_type_uint32(F1, [chain | Path], TrUserData),
    v_type_uint32(F2, [ht | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [rssi | Path], TrUserData)
    end,
    ok;
'v_msg_Client.RxStats.ChainRSSI'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Client.RxStats.ChainRSSI'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Client.TxStats'/3}).
-dialyzer({nowarn_function,'v_msg_Client.TxStats'/3}).
'v_msg_Client.TxStats'(#'Client.TxStats'{mcs = F1, nss = F2, bw = F3, bytes = F4, msdus = F5, mpdus = F6, ppdus = F7, retries = F8, errors = F9}, Path, TrUserData) ->
    v_type_uint32(F1, [mcs | Path], TrUserData),
    v_type_uint32(F2, [nss | Path], TrUserData),
    v_type_uint32(F3, [bw | Path], TrUserData),
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [bytes | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [msdus | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [mpdus | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [ppdus | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint64(F8, [retries | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint64(F9, [errors | Path], TrUserData)
    end,
    ok;
'v_msg_Client.TxStats'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Client.TxStats'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Client.TidStats'/3}).
-dialyzer({nowarn_function,'v_msg_Client.TidStats'/3}).
'v_msg_Client.TidStats'(#'Client.TidStats'{sojourn = F1, offset_ms = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = ['v_msg_Client.TidStats.Sojourn'(Elem, [sojourn | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Client.TidStats.Sojourn'}}, F1, [sojourn | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [offset_ms | Path], TrUserData)
    end,
    ok;
'v_msg_Client.TidStats'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Client.TidStats'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Client.TidStats.Sojourn'/3}).
-dialyzer({nowarn_function,'v_msg_Client.TidStats.Sojourn'/3}).
'v_msg_Client.TidStats.Sojourn'(#'Client.TidStats.Sojourn'{ac = F1, tid = F2, ewma_time_ms = F3, sum_time_ms = F4, num_msdus = F5}, Path, TrUserData) ->
    v_enum_WmmAc(F1, [ac | Path], TrUserData),
    v_type_uint32(F2, [tid | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [ewma_time_ms | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [sum_time_ms | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [num_msdus | Path], TrUserData)
    end,
    ok;
'v_msg_Client.TidStats.Sojourn'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Client.TidStats.Sojourn'}, X, Path).

-compile({nowarn_unused_function,v_msg_Client/3}).
-dialyzer({nowarn_function,v_msg_Client/3}).
v_msg_Client(#'Client'{mac_address = F1, ssid = F2, connected = F3, connect_count = F4, disconnect_count = F5, connect_offset_ms = F6, disconnect_offset_ms = F7, duration_ms = F8, stats = F9, rx_stats = F10, tx_stats = F11, tid_stats = F12,
                       uapsd = F13},
             Path, TrUserData) ->
    v_type_string(F1, [mac_address | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [ssid | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [connected | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [connect_count | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [disconnect_count | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [connect_offset_ms | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [disconnect_offset_ms | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [duration_ms | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> 'v_msg_Client.Stats'(F9, [stats | Path], TrUserData)
    end,
    if is_list(F10) ->
           _ = ['v_msg_Client.RxStats'(Elem, [rx_stats | Path], TrUserData) || Elem <- F10],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Client.RxStats'}}, F10, [rx_stats | Path])
    end,
    if is_list(F11) ->
           _ = ['v_msg_Client.TxStats'(Elem, [tx_stats | Path], TrUserData) || Elem <- F11],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Client.TxStats'}}, F11, [tx_stats | Path])
    end,
    if is_list(F12) ->
           _ = ['v_msg_Client.TidStats'(Elem, [tid_stats | Path], TrUserData) || Elem <- F12],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Client.TidStats'}}, F12, [tid_stats | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [uapsd | Path], TrUserData)
    end,
    ok;
v_msg_Client(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Client'}, X, Path).

-compile({nowarn_unused_function,v_msg_ClientReport/3}).
-dialyzer({nowarn_function,v_msg_ClientReport/3}).
v_msg_ClientReport(#'ClientReport'{'band' = F1, timestamp_ms = F2, client_list = F3, channel = F4}, Path, TrUserData) ->
    v_enum_RadioBandType(F1, ['band' | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [timestamp_ms | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_Client(Elem, [client_list | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Client'}}, F3, [client_list | Path])
    end,
    v_type_uint32(F4, [channel | Path], TrUserData),
    ok;
v_msg_ClientReport(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ClientReport'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Survey.SurveySample'/3}).
-dialyzer({nowarn_function,'v_msg_Survey.SurveySample'/3}).
'v_msg_Survey.SurveySample'(#'Survey.SurveySample'{channel = F1, duration_ms = F2, total_count = F3, sample_count = F4, busy = F5, busy_tx = F6, busy_rx = F7, busy_self = F8, offset_ms = F9, busy_ext = F10, noise = F11}, Path, TrUserData) ->
    v_type_uint32(F1, [channel | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [duration_ms | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [total_count | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [sample_count | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [busy | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [busy_tx | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [busy_rx | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [busy_self | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [offset_ms | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [busy_ext | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [noise | Path], TrUserData)
    end,
    ok;
'v_msg_Survey.SurveySample'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Survey.SurveySample'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Survey.SurveyAvg'/3}).
-dialyzer({nowarn_function,'v_msg_Survey.SurveyAvg'/3}).
'v_msg_Survey.SurveyAvg'(#'Survey.SurveyAvg'{channel = F1, busy = F2, busy_tx = F3, busy_rx = F4, busy_self = F5, busy_ext = F6, noise = F7}, Path, TrUserData) ->
    v_type_uint32(F1, [channel | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_AvgType(F2, [busy | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_AvgType(F3, [busy_tx | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_AvgType(F4, [busy_rx | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_AvgType(F5, [busy_self | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_msg_AvgType(F6, [busy_ext | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_msg_AvgType(F7, [noise | Path], TrUserData)
    end,
    ok;
'v_msg_Survey.SurveyAvg'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Survey.SurveyAvg'}, X, Path).

-compile({nowarn_unused_function,v_msg_Survey/3}).
-dialyzer({nowarn_function,v_msg_Survey/3}).
v_msg_Survey(#'Survey'{'band' = F1, survey_type = F2, timestamp_ms = F3, survey_list = F4, survey_avg = F5, report_type = F6}, Path, TrUserData) ->
    v_enum_RadioBandType(F1, ['band' | Path], TrUserData),
    v_enum_SurveyType(F2, [survey_type | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [timestamp_ms | Path], TrUserData)
    end,
    if is_list(F4) ->
           _ = ['v_msg_Survey.SurveySample'(Elem, [survey_list | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Survey.SurveySample'}}, F4, [survey_list | Path])
    end,
    if is_list(F5) ->
           _ = ['v_msg_Survey.SurveyAvg'(Elem, [survey_avg | Path], TrUserData) || Elem <- F5],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Survey.SurveyAvg'}}, F5, [survey_avg | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_enum_ReportType(F6, [report_type | Path], TrUserData)
    end,
    ok;
v_msg_Survey(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Survey'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Capacity.QueueSample'/3}).
-dialyzer({nowarn_function,'v_msg_Capacity.QueueSample'/3}).
'v_msg_Capacity.QueueSample'(#'Capacity.QueueSample'{busy_tx = F1, bytes_tx = F2, sample_count = F3, 'Vo_count' = F4, 'Vi_count' = F5, 'Be_count' = F6, 'Bk_count' = F7, 'Bcn_count' = F8, 'Cab_count' = F9, offset_ms = F10}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [busy_tx | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [bytes_tx | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [sample_count | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, ['Vo_count' | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, ['Vi_count' | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, ['Be_count' | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, ['Bk_count' | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, ['Bcn_count' | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, ['Cab_count' | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [offset_ms | Path], TrUserData)
    end,
    ok;
'v_msg_Capacity.QueueSample'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Capacity.QueueSample'}, X, Path).

-compile({nowarn_unused_function,v_msg_Capacity/3}).
-dialyzer({nowarn_function,v_msg_Capacity/3}).
v_msg_Capacity(#'Capacity'{'band' = F1, timestamp_ms = F2, queue_list = F3}, Path, TrUserData) ->
    v_enum_RadioBandType(F1, ['band' | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [timestamp_ms | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = ['v_msg_Capacity.QueueSample'(Elem, [queue_list | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Capacity.QueueSample'}}, F3, [queue_list | Path])
    end,
    ok;
v_msg_Capacity(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Capacity'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Device.LoadAvg'/3}).
-dialyzer({nowarn_function,'v_msg_Device.LoadAvg'/3}).
'v_msg_Device.LoadAvg'(#'Device.LoadAvg'{one = F1, five = F2, fifteen = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [one | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_double(F2, [five | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_double(F3, [fifteen | Path], TrUserData)
    end,
    ok;
'v_msg_Device.LoadAvg'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Device.LoadAvg'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Device.RadioTemp'/3}).
-dialyzer({nowarn_function,'v_msg_Device.RadioTemp'/3}).
'v_msg_Device.RadioTemp'(#'Device.RadioTemp'{'band' = F1, value = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_RadioBandType(F1, ['band' | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [value | Path], TrUserData)
    end,
    ok;
'v_msg_Device.RadioTemp'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Device.RadioTemp'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Device.Thermal'/3}).
-dialyzer({nowarn_function,'v_msg_Device.Thermal'/3}).
'v_msg_Device.Thermal'(#'Device.Thermal'{txchainmask = F1, fan_rpm = F2, timestamp_ms = F3}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = ['v_msg_Device.Thermal.RadioTxChainMask'(Elem, [txchainmask | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Device.Thermal.RadioTxChainMask'}}, F1, [txchainmask | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [fan_rpm | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [timestamp_ms | Path], TrUserData)
    end,
    ok;
'v_msg_Device.Thermal'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Device.Thermal'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Device.Thermal.RadioTxChainMask'/3}).
-dialyzer({nowarn_function,'v_msg_Device.Thermal.RadioTxChainMask'/3}).
'v_msg_Device.Thermal.RadioTxChainMask'(#'Device.Thermal.RadioTxChainMask'{'band' = F1, value = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_RadioBandType(F1, ['band' | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [value | Path], TrUserData)
    end,
    ok;
'v_msg_Device.Thermal.RadioTxChainMask'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Device.Thermal.RadioTxChainMask'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Device.MemUtil'/3}).
-dialyzer({nowarn_function,'v_msg_Device.MemUtil'/3}).
'v_msg_Device.MemUtil'(#'Device.MemUtil'{mem_total = F1, mem_used = F2, swap_total = F3, swap_used = F4}, Path, TrUserData) ->
    v_type_uint32(F1, [mem_total | Path], TrUserData),
    v_type_uint32(F2, [mem_used | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [swap_total | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [swap_used | Path], TrUserData)
    end,
    ok;
'v_msg_Device.MemUtil'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Device.MemUtil'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Device.FsUtil'/3}).
-dialyzer({nowarn_function,'v_msg_Device.FsUtil'/3}).
'v_msg_Device.FsUtil'(#'Device.FsUtil'{fs_type = F1, fs_total = F2, fs_used = F3}, Path, TrUserData) ->
    v_enum_FsType(F1, [fs_type | Path], TrUserData),
    v_type_uint32(F2, [fs_total | Path], TrUserData),
    v_type_uint32(F3, [fs_used | Path], TrUserData),
    ok;
'v_msg_Device.FsUtil'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Device.FsUtil'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Device.CpuUtil'/3}).
-dialyzer({nowarn_function,'v_msg_Device.CpuUtil'/3}).
'v_msg_Device.CpuUtil'(#'Device.CpuUtil'{cpu_util = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [cpu_util | Path], TrUserData)
    end,
    ok;
'v_msg_Device.CpuUtil'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Device.CpuUtil'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Device.PerProcessUtil'/3}).
-dialyzer({nowarn_function,'v_msg_Device.PerProcessUtil'/3}).
'v_msg_Device.PerProcessUtil'(#'Device.PerProcessUtil'{pid = F1, cmd = F2, util = F3}, Path, TrUserData) ->
    v_type_uint32(F1, [pid | Path], TrUserData),
    v_type_string(F2, [cmd | Path], TrUserData),
    v_type_uint32(F3, [util | Path], TrUserData),
    ok;
'v_msg_Device.PerProcessUtil'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Device.PerProcessUtil'}, X, Path).

-compile({nowarn_unused_function,v_msg_Device/3}).
-dialyzer({nowarn_function,v_msg_Device/3}).
v_msg_Device(#'Device'{load = F1, radio_temp = F2, timestamp_ms = F3, uptime = F4, thermal_stats = F5, mem_util = F6, fs_util = F7, cpuUtil = F8, ps_cpu_util = F9, ps_mem_util = F10}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_msg_Device.LoadAvg'(F1, [load | Path], TrUserData)
    end,
    if is_list(F2) ->
           _ = ['v_msg_Device.RadioTemp'(Elem, [radio_temp | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Device.RadioTemp'}}, F2, [radio_temp | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [timestamp_ms | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [uptime | Path], TrUserData)
    end,
    if is_list(F5) ->
           _ = ['v_msg_Device.Thermal'(Elem, [thermal_stats | Path], TrUserData) || Elem <- F5],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Device.Thermal'}}, F5, [thermal_stats | Path])
    end,
    if F6 == undefined -> ok;
       true -> 'v_msg_Device.MemUtil'(F6, [mem_util | Path], TrUserData)
    end,
    if is_list(F7) ->
           _ = ['v_msg_Device.FsUtil'(Elem, [fs_util | Path], TrUserData) || Elem <- F7],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Device.FsUtil'}}, F7, [fs_util | Path])
    end,
    if F8 == undefined -> ok;
       true -> 'v_msg_Device.CpuUtil'(F8, [cpuUtil | Path], TrUserData)
    end,
    if is_list(F9) ->
           _ = ['v_msg_Device.PerProcessUtil'(Elem, [ps_cpu_util | Path], TrUserData) || Elem <- F9],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Device.PerProcessUtil'}}, F9, [ps_cpu_util | Path])
    end,
    if is_list(F10) ->
           _ = ['v_msg_Device.PerProcessUtil'(Elem, [ps_mem_util | Path], TrUserData) || Elem <- F10],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Device.PerProcessUtil'}}, F10, [ps_mem_util | Path])
    end,
    ok;
v_msg_Device(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Device'}, X, Path).

-compile({nowarn_unused_function,'v_msg_BSClient.BSEvent'/3}).
-dialyzer({nowarn_function,'v_msg_BSClient.BSEvent'/3}).
'v_msg_BSClient.BSEvent'(#'BSClient.BSEvent'{type = F1, offset_ms = F2, rssi = F3, probe_bcast = F4, probe_blocked = F5, disconnect_src = F6, disconnect_type = F7, disconnect_reason = F8, backoff_enabled = F9, active = F10, rejected = F11,
                                             is_BTM_supported = F12, is_RRM_supported = F13, max_chwidth = F14, max_streams = F15, phy_mode = F16, max_mcs = F17, max_txpower = F18, is_static_smps = F19, is_mu_mimo_supported = F20, band_cap_2G = F21, band_cap_5G = F22, rrm_caps_link_meas = F23,
                                             rrm_caps_neigh_rpt = F24, rrm_caps_bcn_rpt_passive = F25, rrm_caps_bcn_rpt_active = F26, rrm_caps_bcn_rpt_table = F27, rrm_caps_lci_meas = F28, rrm_caps_ftm_range_rpt = F29, backoff_period = F30, assoc_ies = F31},
                         Path, TrUserData) ->
    v_enum_BSEventType(F1, [type | Path], TrUserData),
    v_type_uint32(F2, [offset_ms | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [rssi | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [probe_bcast | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [probe_blocked | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_enum_DisconnectSrc(F6, [disconnect_src | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_enum_DisconnectType(F7, [disconnect_type | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [disconnect_reason | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [backoff_enabled | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_bool(F10, [active | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [rejected | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_type_bool(F12, [is_BTM_supported | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true -> v_type_bool(F13, [is_RRM_supported | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint32(F14, [max_chwidth | Path], TrUserData)
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint32(F15, [max_streams | Path], TrUserData)
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint32(F16, [phy_mode | Path], TrUserData)
    end,
    if F17 == undefined -> ok;
       true -> v_type_uint32(F17, [max_mcs | Path], TrUserData)
    end,
    if F18 == undefined -> ok;
       true -> v_type_uint32(F18, [max_txpower | Path], TrUserData)
    end,
    if F19 == undefined -> ok;
       true -> v_type_bool(F19, [is_static_smps | Path], TrUserData)
    end,
    if F20 == undefined -> ok;
       true -> v_type_bool(F20, [is_mu_mimo_supported | Path], TrUserData)
    end,
    if F21 == undefined -> ok;
       true -> v_type_bool(F21, [band_cap_2G | Path], TrUserData)
    end,
    if F22 == undefined -> ok;
       true -> v_type_bool(F22, [band_cap_5G | Path], TrUserData)
    end,
    if F23 == undefined -> ok;
       true -> v_type_bool(F23, [rrm_caps_link_meas | Path], TrUserData)
    end,
    if F24 == undefined -> ok;
       true -> v_type_bool(F24, [rrm_caps_neigh_rpt | Path], TrUserData)
    end,
    if F25 == undefined -> ok;
       true -> v_type_bool(F25, [rrm_caps_bcn_rpt_passive | Path], TrUserData)
    end,
    if F26 == undefined -> ok;
       true -> v_type_bool(F26, [rrm_caps_bcn_rpt_active | Path], TrUserData)
    end,
    if F27 == undefined -> ok;
       true -> v_type_bool(F27, [rrm_caps_bcn_rpt_table | Path], TrUserData)
    end,
    if F28 == undefined -> ok;
       true -> v_type_bool(F28, [rrm_caps_lci_meas | Path], TrUserData)
    end,
    if F29 == undefined -> ok;
       true -> v_type_bool(F29, [rrm_caps_ftm_range_rpt | Path], TrUserData)
    end,
    if F30 == undefined -> ok;
       true -> v_type_uint32(F30, [backoff_period | Path], TrUserData)
    end,
    if F31 == undefined -> ok;
       true -> v_type_bytes(F31, [assoc_ies | Path], TrUserData)
    end,
    ok;
'v_msg_BSClient.BSEvent'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BSClient.BSEvent'}, X, Path).

-compile({nowarn_unused_function,'v_msg_BSClient.BSBandReport'/3}).
-dialyzer({nowarn_function,'v_msg_BSClient.BSBandReport'/3}).
'v_msg_BSClient.BSBandReport'(#'BSClient.BSBandReport'{'band' = F1, connected = F2, rejects = F3, connects = F4, disconnects = F5, activity_changes = F6, steering_success_cnt = F7, steering_fail_cnt = F8, steering_kick_cnt = F9,
                                                       sticky_kick_cnt = F10, probe_bcast_cnt = F11, probe_bcast_blocked = F12, probe_direct_cnt = F13, probe_direct_blocked = F14, event_list = F15, ifname = F16},
                              Path, TrUserData) ->
    v_enum_RadioBandType(F1, ['band' | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [connected | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [rejects | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [connects | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [disconnects | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [activity_changes | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [steering_success_cnt | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [steering_fail_cnt | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [steering_kick_cnt | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [sticky_kick_cnt | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [probe_bcast_cnt | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [probe_bcast_blocked | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [probe_direct_cnt | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint32(F14, [probe_direct_blocked | Path], TrUserData)
    end,
    if is_list(F15) ->
           _ = ['v_msg_BSClient.BSEvent'(Elem, [event_list | Path], TrUserData) || Elem <- F15],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'BSClient.BSEvent'}}, F15, [event_list | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_string(F16, [ifname | Path], TrUserData)
    end,
    ok;
'v_msg_BSClient.BSBandReport'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BSClient.BSBandReport'}, X, Path).

-compile({nowarn_unused_function,v_msg_BSClient/3}).
-dialyzer({nowarn_function,v_msg_BSClient/3}).
v_msg_BSClient(#'BSClient'{mac_address = F1, bs_band_report = F2}, Path, TrUserData) ->
    v_type_string(F1, [mac_address | Path], TrUserData),
    if is_list(F2) ->
           _ = ['v_msg_BSClient.BSBandReport'(Elem, [bs_band_report | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'BSClient.BSBandReport'}}, F2, [bs_band_report | Path])
    end,
    ok;
v_msg_BSClient(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BSClient'}, X, Path).

-compile({nowarn_unused_function,v_msg_BSReport/3}).
-dialyzer({nowarn_function,v_msg_BSReport/3}).
v_msg_BSReport(#'BSReport'{timestamp_ms = F1, clients = F2}, Path, TrUserData) ->
    v_type_uint64(F1, [timestamp_ms | Path], TrUserData),
    if is_list(F2) ->
           _ = [v_msg_BSClient(Elem, [clients | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'BSClient'}}, F2, [clients | Path])
    end,
    ok;
v_msg_BSReport(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BSReport'}, X, Path).

-compile({nowarn_unused_function,'v_msg_RssiPeer.RssiSample'/3}).
-dialyzer({nowarn_function,'v_msg_RssiPeer.RssiSample'/3}).
'v_msg_RssiPeer.RssiSample'(#'RssiPeer.RssiSample'{rssi = F1, offset_ms = F2}, Path, TrUserData) ->
    v_type_uint32(F1, [rssi | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [offset_ms | Path], TrUserData)
    end,
    ok;
'v_msg_RssiPeer.RssiSample'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'RssiPeer.RssiSample'}, X, Path).

-compile({nowarn_unused_function,v_msg_RssiPeer/3}).
-dialyzer({nowarn_function,v_msg_RssiPeer/3}).
v_msg_RssiPeer(#'RssiPeer'{mac_address = F1, rssi_source = F2, rssi_list = F3, rssi_avg = F4, rx_ppdus = F5, tx_ppdus = F6}, Path, TrUserData) ->
    v_type_string(F1, [mac_address | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> 'v_enum_RssiPeer.RssiSource'(F2, [rssi_source | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = ['v_msg_RssiPeer.RssiSample'(Elem, [rssi_list | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'RssiPeer.RssiSample'}}, F3, [rssi_list | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_msg_AvgType(F4, [rssi_avg | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [rx_ppdus | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [tx_ppdus | Path], TrUserData)
    end,
    ok;
v_msg_RssiPeer(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'RssiPeer'}, X, Path).

-compile({nowarn_unused_function,v_msg_RssiReport/3}).
-dialyzer({nowarn_function,v_msg_RssiReport/3}).
v_msg_RssiReport(#'RssiReport'{'band' = F1, report_type = F2, timestamp_ms = F3, peer_list = F4}, Path, TrUserData) ->
    v_enum_RadioBandType(F1, ['band' | Path], TrUserData),
    v_enum_ReportType(F2, [report_type | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [timestamp_ms | Path], TrUserData)
    end,
    if is_list(F4) ->
           _ = [v_msg_RssiPeer(Elem, [peer_list | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'RssiPeer'}}, F4, [peer_list | Path])
    end,
    ok;
v_msg_RssiReport(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'RssiReport'}, X, Path).

-compile({nowarn_unused_function,v_msg_DNSProbeMetric/3}).
-dialyzer({nowarn_function,v_msg_DNSProbeMetric/3}).
v_msg_DNSProbeMetric(#'DNSProbeMetric'{serverIP = F1, state = F2, latency = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [serverIP | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_enum_StateUpDown(F2, [state | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [latency | Path], TrUserData)
    end,
    ok;
v_msg_DNSProbeMetric(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'DNSProbeMetric'}, X, Path).

-compile({nowarn_unused_function,v_msg_VLANMetrics/3}).
-dialyzer({nowarn_function,v_msg_VLANMetrics/3}).
v_msg_VLANMetrics(#'VLANMetrics'{vlanIF = F1, dhcpState = F2, latency = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [vlanIF | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_enum_StateUpDown(F2, [dhcpState | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [latency | Path], TrUserData)
    end,
    ok;
v_msg_VLANMetrics(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'VLANMetrics'}, X, Path).

-compile({nowarn_unused_function,v_msg_RADIUSMetrics/3}).
-dialyzer({nowarn_function,v_msg_RADIUSMetrics/3}).
v_msg_RADIUSMetrics(#'RADIUSMetrics'{serverIP = F1, radiusState = F2, latency = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [serverIP | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_enum_StateUpDown(F2, [radiusState | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [latency | Path], TrUserData)
    end,
    ok;
v_msg_RADIUSMetrics(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'RADIUSMetrics'}, X, Path).

-compile({nowarn_unused_function,v_msg_NetworkProbe/3}).
-dialyzer({nowarn_function,v_msg_NetworkProbe/3}).
v_msg_NetworkProbe(#'NetworkProbe'{dns_probe = F1, vlan_probe = F2, radius_probe = F3, timestamp_ms = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_DNSProbeMetric(F1, [dns_probe | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_VLANMetrics(F2, [vlan_probe | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_RADIUSMetrics(Elem, [radius_probe | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'RADIUSMetrics'}}, F3, [radius_probe | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [timestamp_ms | Path], TrUserData)
    end,
    ok;
v_msg_NetworkProbe(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'NetworkProbe'}, X, Path).

-compile({nowarn_unused_function,v_msg_RtpFlowStats/3}).
-dialyzer({nowarn_function,v_msg_RtpFlowStats/3}).
v_msg_RtpFlowStats(#'RtpFlowStats'{direction = F1, rtp_flow_type = F2, latency = F3, jitter = F4, packet_loss_percent = F5, packet_loss_consec = F6, codec = F7, mosx_100 = F8, block_codecs = F9, total_packets_sent = F10, total_packets_lost = F11,
                                   rtp_seq_first = F12, rtp_seq_last = F13, stats_idx = F14},
                   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_RtpFlowStats.RtpFlowDirection'(F1, [direction | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> 'v_enum_RtpFlowStats.RtpFlowType'(F2, [rtp_flow_type | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [latency | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [jitter | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [packet_loss_percent | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [packet_loss_consec | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [codec | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [mosx_100 | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_bytes(F9, [block_codecs | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [total_packets_sent | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [total_packets_lost | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [rtp_seq_first | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [rtp_seq_last | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint32(F14, [stats_idx | Path], TrUserData)
    end,
    ok;
v_msg_RtpFlowStats(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'RtpFlowStats'}, X, Path).

-compile({nowarn_unused_function,v_msg_CallStart/3}).
-dialyzer({nowarn_function,v_msg_CallStart/3}).
v_msg_CallStart(#'CallStart'{session_id = F1, wifi_session_id = F2, client_mac = F3, codecs = F4, provider_domain = F5, device_info = F6, channel = F7, 'band' = F8}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [session_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [wifi_session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [client_mac | Path], TrUserData)
    end,
    if is_list(F4) ->
           _ = [v_type_string(Elem, [codecs | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F4, [codecs | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [provider_domain | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [device_info | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [channel | Path], TrUserData)
    end,
    v_enum_RadioBandType(F8, ['band' | Path], TrUserData),
    ok;
v_msg_CallStart(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'CallStart'}, X, Path).

-compile({nowarn_unused_function,v_msg_CallStop/3}).
-dialyzer({nowarn_function,v_msg_CallStop/3}).
v_msg_CallStop(#'CallStop'{session_id = F1, wifi_session_id = F2, client_mac = F3, reason = F4, call_duration = F5, stats = F6, channel = F7, 'band' = F8, codecs = F9, provider_domain = F10}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [session_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [wifi_session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [client_mac | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> 'v_enum_CallStop.CallStopReason'(F4, [reason | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [call_duration | Path], TrUserData)
    end,
    if is_list(F6) ->
           _ = [v_msg_RtpFlowStats(Elem, [stats | Path], TrUserData) || Elem <- F6],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'RtpFlowStats'}}, F6, [stats | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [channel | Path], TrUserData)
    end,
    v_enum_RadioBandType(F8, ['band' | Path], TrUserData),
    if is_list(F9) ->
           _ = [v_type_string(Elem, [codecs | Path], TrUserData) || Elem <- F9],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F9, [codecs | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_string(F10, [provider_domain | Path], TrUserData)
    end,
    ok;
v_msg_CallStop(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'CallStop'}, X, Path).

-compile({nowarn_unused_function,v_msg_CallReport/3}).
-dialyzer({nowarn_function,v_msg_CallReport/3}).
v_msg_CallReport(#'CallReport'{session_id = F1, wifi_session_id = F2, client_mac = F3, stats = F4, reason = F5, channel = F6, 'band' = F7, codecs = F8, provider_domain = F9}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [session_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [wifi_session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [client_mac | Path], TrUserData)
    end,
    if is_list(F4) ->
           _ = [v_msg_RtpFlowStats(Elem, [stats | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'RtpFlowStats'}}, F4, [stats | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_enum_CallReport.CallReportReason'(F5, [reason | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [channel | Path], TrUserData)
    end,
    v_enum_RadioBandType(F7, ['band' | Path], TrUserData),
    if is_list(F8) ->
           _ = [v_type_string(Elem, [codecs | Path], TrUserData) || Elem <- F8],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F8, [codecs | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [provider_domain | Path], TrUserData)
    end,
    ok;
v_msg_CallReport(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'CallReport'}, X, Path).

-compile({nowarn_unused_function,v_msg_StreamingVideoDetectPattern/3}).
-dialyzer({nowarn_function,v_msg_StreamingVideoDetectPattern/3}).
v_msg_StreamingVideoDetectPattern(#'StreamingVideoDetectPattern'{dns_lookup_pattern = F1, video_type = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [dns_lookup_pattern | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_enum_StreamingVideoType(F2, [video_type | Path], TrUserData)
    end,
    ok;
v_msg_StreamingVideoDetectPattern(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StreamingVideoDetectPattern'}, X, Path).

-compile({nowarn_unused_function,v_msg_StreamingVideoSessionStart/3}).
-dialyzer({nowarn_function,v_msg_StreamingVideoSessionStart/3}).
v_msg_StreamingVideoSessionStart(#'StreamingVideoSessionStart'{video_session_id = F1, session_id = F2, client_mac = F3, server_ip = F4, streaming_video_type = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [video_session_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [client_mac | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [server_ip | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_enum_StreamingVideoType(F5, [streaming_video_type | Path], TrUserData)
    end,
    ok;
v_msg_StreamingVideoSessionStart(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StreamingVideoSessionStart'}, X, Path).

-compile({nowarn_unused_function,v_msg_StreamingVideoServerDetected/3}).
-dialyzer({nowarn_function,v_msg_StreamingVideoServerDetected/3}).
v_msg_StreamingVideoServerDetected(#'StreamingVideoServerDetected'{video_session_id = F1, session_id = F2, client_mac = F3, server_ip = F4, server_dns_name = F5, streaming_video_type = F6}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [video_session_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [client_mac | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [server_ip | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [server_dns_name | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_enum_StreamingVideoType(F6, [streaming_video_type | Path], TrUserData)
    end,
    ok;
v_msg_StreamingVideoServerDetected(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StreamingVideoServerDetected'}, X, Path).

-compile({nowarn_unused_function,v_msg_StreamingVideoStop/3}).
-dialyzer({nowarn_function,v_msg_StreamingVideoStop/3}).
v_msg_StreamingVideoStop(#'StreamingVideoStop'{video_session_id = F1, session_id = F2, client_mac = F3, server_ip = F4, total_bytes = F5, streaming_video_type = F6, duration_sec = F7}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [video_session_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [client_mac | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [server_ip | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [total_bytes | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_enum_StreamingVideoType(F6, [streaming_video_type | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [duration_sec | Path], TrUserData)
    end,
    ok;
v_msg_StreamingVideoStop(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StreamingVideoStop'}, X, Path).

-compile({nowarn_unused_function,v_msg_VideoVoiceReport/3}).
-dialyzer({nowarn_function,v_msg_VideoVoiceReport/3}).
v_msg_VideoVoiceReport(#'VideoVoiceReport'{call_start = F1, call_stop = F2, call_report = F3, stream_video_stop = F4, stream_video_server = F5, stream_video_session_start = F6, timestamp_ms = F7}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_CallStart(F1, [call_start | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_CallStop(F2, [call_stop | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_CallReport(F3, [call_report | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_StreamingVideoStop(F4, [stream_video_stop | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_StreamingVideoServerDetected(F5, [stream_video_server | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_msg_StreamingVideoSessionStart(F6, [stream_video_session_start | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [timestamp_ms | Path], TrUserData)
    end,
    ok;
v_msg_VideoVoiceReport(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'VideoVoiceReport'}, X, Path).

-compile({nowarn_unused_function,'v_msg_EventReport.ClientAssocEvent'/3}).
-dialyzer({nowarn_function,'v_msg_EventReport.ClientAssocEvent'/3}).
'v_msg_EventReport.ClientAssocEvent'(#'EventReport.ClientAssocEvent'{sta_mac = F1, session_id = F2, ssid = F3, 'band' = F4, assoc_type = F5, status = F6, rssi = F7, internal_sc = F8, using11k = F9, using11r = F10, using11v = F11}, Path,
                                     TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [sta_mac | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [ssid | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_enum_RadioBandType(F4, ['band' | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_enum_AssocType(F5, [assoc_type | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [status | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_int32(F7, [rssi | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [internal_sc | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [using11k | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_bool(F10, [using11r | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [using11v | Path], TrUserData)
    end,
    ok;
'v_msg_EventReport.ClientAssocEvent'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport.ClientAssocEvent'}, X, Path).

-compile({nowarn_unused_function,'v_msg_EventReport.ClientAuthEvent'/3}).
-dialyzer({nowarn_function,'v_msg_EventReport.ClientAuthEvent'/3}).
'v_msg_EventReport.ClientAuthEvent'(#'EventReport.ClientAuthEvent'{sta_mac = F1, session_id = F2, ssid = F3, 'band' = F4, auth_status = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [sta_mac | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [ssid | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_enum_RadioBandType(F4, ['band' | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [auth_status | Path], TrUserData)
    end,
    ok;
'v_msg_EventReport.ClientAuthEvent'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport.ClientAuthEvent'}, X, Path).

-compile({nowarn_unused_function,'v_msg_EventReport.ClientDisconnectEvent'/3}).
-dialyzer({nowarn_function,'v_msg_EventReport.ClientDisconnectEvent'/3}).
'v_msg_EventReport.ClientDisconnectEvent'(#'EventReport.ClientDisconnectEvent'{sta_mac = F1, session_id = F2, reason = F3, dev_type = F4, fr_type = F5, lsent_up_ts_in_us = F6, lrcv_up_ts_in_us = F7, internal_rc = F8, rssi = F9, ssid = F10,
                                                                               'band' = F11},
                                          Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [sta_mac | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [reason | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_enum_DeviceType(F4, [dev_type | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_enum_FrameType(F5, [fr_type | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [lsent_up_ts_in_us | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [lrcv_up_ts_in_us | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [internal_rc | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_int32(F9, [rssi | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_string(F10, [ssid | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_enum_RadioBandType(F11, ['band' | Path], TrUserData)
    end,
    ok;
'v_msg_EventReport.ClientDisconnectEvent'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport.ClientDisconnectEvent'}, X, Path).

-compile({nowarn_unused_function,'v_msg_EventReport.ClientConnectEvent'/3}).
-dialyzer({nowarn_function,'v_msg_EventReport.ClientConnectEvent'/3}).
'v_msg_EventReport.ClientConnectEvent'(#'EventReport.ClientConnectEvent'{sta_mac = F1, session_id = F2, 'band' = F3, assoc_type = F4, ssid = F5, sec_type = F6, fbt_used = F7, ip_addr = F8, clt_id = F9, ev_time_bootup_in_us_auth = F10,
                                                                         ev_time_bootup_in_us_assoc = F11, ev_time_bootup_in_us_eapol = F12, ev_time_bootup_in_us_port_enable = F13, ev_time_bootup_in_us_first_rx = F14, ev_time_bootup_in_us_first_tx = F15, using11k = F16, using11r = F17,
                                                                         using11v = F18, ev_time_bootup_in_us_ip = F19, assoc_rssi = F20},
                                       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [sta_mac | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_enum_RadioBandType(F3, ['band' | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_enum_AssocType(F4, [assoc_type | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [ssid | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_enum_SecurityType(F6, [sec_type | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [fbt_used | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_bytes(F8, [ip_addr | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [clt_id | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_int64(F10, [ev_time_bootup_in_us_auth | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_int64(F11, [ev_time_bootup_in_us_assoc | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_type_int64(F12, [ev_time_bootup_in_us_eapol | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true -> v_type_int64(F13, [ev_time_bootup_in_us_port_enable | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true -> v_type_int64(F14, [ev_time_bootup_in_us_first_rx | Path], TrUserData)
    end,
    if F15 == undefined -> ok;
       true -> v_type_int64(F15, [ev_time_bootup_in_us_first_tx | Path], TrUserData)
    end,
    if F16 == undefined -> ok;
       true -> v_type_bool(F16, [using11k | Path], TrUserData)
    end,
    if F17 == undefined -> ok;
       true -> v_type_bool(F17, [using11r | Path], TrUserData)
    end,
    if F18 == undefined -> ok;
       true -> v_type_bool(F18, [using11v | Path], TrUserData)
    end,
    if F19 == undefined -> ok;
       true -> v_type_int64(F19, [ev_time_bootup_in_us_ip | Path], TrUserData)
    end,
    if F20 == undefined -> ok;
       true -> v_type_int32(F20, [assoc_rssi | Path], TrUserData)
    end,
    ok;
'v_msg_EventReport.ClientConnectEvent'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport.ClientConnectEvent'}, X, Path).

-compile({nowarn_unused_function,'v_msg_EventReport.ClientFailureEvent'/3}).
-dialyzer({nowarn_function,'v_msg_EventReport.ClientFailureEvent'/3}).
'v_msg_EventReport.ClientFailureEvent'(#'EventReport.ClientFailureEvent'{sta_mac = F1, session_id = F2, ssid = F3, reason_code = F4, reason_str = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [sta_mac | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [ssid | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [reason_code | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [reason_str | Path], TrUserData)
    end,
    ok;
'v_msg_EventReport.ClientFailureEvent'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport.ClientFailureEvent'}, X, Path).

-compile({nowarn_unused_function,'v_msg_EventReport.ClientFirstDataEvent'/3}).
-dialyzer({nowarn_function,'v_msg_EventReport.ClientFirstDataEvent'/3}).
'v_msg_EventReport.ClientFirstDataEvent'(#'EventReport.ClientFirstDataEvent'{sta_mac = F1, session_id = F2, fdata_tx_up_ts_in_us = F3, fdata_rx_up_ts_in_us = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [sta_mac | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [fdata_tx_up_ts_in_us | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [fdata_rx_up_ts_in_us | Path], TrUserData)
    end,
    ok;
'v_msg_EventReport.ClientFirstDataEvent'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport.ClientFirstDataEvent'}, X, Path).

-compile({nowarn_unused_function,'v_msg_EventReport.ClientIdEvent'/3}).
-dialyzer({nowarn_function,'v_msg_EventReport.ClientIdEvent'/3}).
'v_msg_EventReport.ClientIdEvent'(#'EventReport.ClientIdEvent'{clt_mac = F1, session_id = F2, clt_id = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [clt_mac | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [clt_id | Path], TrUserData)
    end,
    ok;
'v_msg_EventReport.ClientIdEvent'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport.ClientIdEvent'}, X, Path).

-compile({nowarn_unused_function,'v_msg_EventReport.ClientIpEvent'/3}).
-dialyzer({nowarn_function,'v_msg_EventReport.ClientIpEvent'/3}).
'v_msg_EventReport.ClientIpEvent'(#'EventReport.ClientIpEvent'{sta_mac = F1, session_id = F2, ip_addr = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [sta_mac | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [ip_addr | Path], TrUserData)
    end,
    ok;
'v_msg_EventReport.ClientIpEvent'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport.ClientIpEvent'}, X, Path).

-compile({nowarn_unused_function,'v_msg_EventReport.ClientTimeoutEvent'/3}).
-dialyzer({nowarn_function,'v_msg_EventReport.ClientTimeoutEvent'/3}).
'v_msg_EventReport.ClientTimeoutEvent'(#'EventReport.ClientTimeoutEvent'{sta_mac = F1, session_id = F2, r_code = F3, last_sent_up_ts_in_us = F4, last_rcv_up_ts_in_us = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [sta_mac | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [session_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_enum_CTReasonType(F3, [r_code | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [last_sent_up_ts_in_us | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [last_rcv_up_ts_in_us | Path], TrUserData)
    end,
    ok;
'v_msg_EventReport.ClientTimeoutEvent'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport.ClientTimeoutEvent'}, X, Path).

-compile({nowarn_unused_function,'v_msg_EventReport.ClientSession'/3}).
-dialyzer({nowarn_function,'v_msg_EventReport.ClientSession'/3}).
'v_msg_EventReport.ClientSession'(#'EventReport.ClientSession'{session_id = F1, client_assoc_event = F2, client_auth_event = F3, client_disconnect_event = F4, client_failure_event = F5, client_first_data_event = F6, client_id_event = F7,
                                                               client_ip_event = F8, client_timeout_event = F9, client_connect_event = F10},
                                  Path, TrUserData) ->
    v_type_uint64(F1, [session_id | Path], TrUserData),
    if is_list(F2) ->
           _ = ['v_msg_EventReport.ClientAssocEvent'(Elem, [client_assoc_event | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport.ClientAssocEvent'}}, F2, [client_assoc_event | Path])
    end,
    if is_list(F3) ->
           _ = ['v_msg_EventReport.ClientAuthEvent'(Elem, [client_auth_event | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport.ClientAuthEvent'}}, F3, [client_auth_event | Path])
    end,
    if is_list(F4) ->
           _ = ['v_msg_EventReport.ClientDisconnectEvent'(Elem, [client_disconnect_event | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport.ClientDisconnectEvent'}}, F4, [client_disconnect_event | Path])
    end,
    if is_list(F5) ->
           _ = ['v_msg_EventReport.ClientFailureEvent'(Elem, [client_failure_event | Path], TrUserData) || Elem <- F5],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport.ClientFailureEvent'}}, F5, [client_failure_event | Path])
    end,
    if is_list(F6) ->
           _ = ['v_msg_EventReport.ClientFirstDataEvent'(Elem, [client_first_data_event | Path], TrUserData) || Elem <- F6],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport.ClientFirstDataEvent'}}, F6, [client_first_data_event | Path])
    end,
    if is_list(F7) ->
           _ = ['v_msg_EventReport.ClientIdEvent'(Elem, [client_id_event | Path], TrUserData) || Elem <- F7],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport.ClientIdEvent'}}, F7, [client_id_event | Path])
    end,
    if is_list(F8) ->
           _ = ['v_msg_EventReport.ClientIpEvent'(Elem, [client_ip_event | Path], TrUserData) || Elem <- F8],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport.ClientIpEvent'}}, F8, [client_ip_event | Path])
    end,
    if is_list(F9) ->
           _ = ['v_msg_EventReport.ClientTimeoutEvent'(Elem, [client_timeout_event | Path], TrUserData) || Elem <- F9],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport.ClientTimeoutEvent'}}, F9, [client_timeout_event | Path])
    end,
    if is_list(F10) ->
           _ = ['v_msg_EventReport.ClientConnectEvent'(Elem, [client_connect_event | Path], TrUserData) || Elem <- F10],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport.ClientConnectEvent'}}, F10, [client_connect_event | Path])
    end,
    ok;
'v_msg_EventReport.ClientSession'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport.ClientSession'}, X, Path).

-compile({nowarn_unused_function,v_msg_EventReport/3}).
-dialyzer({nowarn_function,v_msg_EventReport/3}).
v_msg_EventReport(#'EventReport'{client_session = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = ['v_msg_EventReport.ClientSession'(Elem, [client_session | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport.ClientSession'}}, F1, [client_session | Path])
    end,
    ok;
v_msg_EventReport(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'EventReport'}, X, Path).

-compile({nowarn_unused_function,v_msg_Report/3}).
-dialyzer({nowarn_function,v_msg_Report/3}).
v_msg_Report(#'Report'{nodeID = F1, survey = F2, capacity = F3, neighbors = F4, clients = F5, device = F6, bs_report = F7, rssi_report = F8, video_voice_report = F9, network_probe = F10, event_report = F11}, Path, TrUserData) ->
    v_type_string(F1, [nodeID | Path], TrUserData),
    if is_list(F2) ->
           _ = [v_msg_Survey(Elem, [survey | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Survey'}}, F2, [survey | Path])
    end,
    if is_list(F3) ->
           _ = [v_msg_Capacity(Elem, [capacity | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Capacity'}}, F3, [capacity | Path])
    end,
    if is_list(F4) ->
           _ = [v_msg_Neighbor(Elem, [neighbors | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Neighbor'}}, F4, [neighbors | Path])
    end,
    if is_list(F5) ->
           _ = [v_msg_ClientReport(Elem, [clients | Path], TrUserData) || Elem <- F5],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'ClientReport'}}, F5, [clients | Path])
    end,
    if is_list(F6) ->
           _ = [v_msg_Device(Elem, [device | Path], TrUserData) || Elem <- F6],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Device'}}, F6, [device | Path])
    end,
    if is_list(F7) ->
           _ = [v_msg_BSReport(Elem, [bs_report | Path], TrUserData) || Elem <- F7],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'BSReport'}}, F7, [bs_report | Path])
    end,
    if is_list(F8) ->
           _ = [v_msg_RssiReport(Elem, [rssi_report | Path], TrUserData) || Elem <- F8],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'RssiReport'}}, F8, [rssi_report | Path])
    end,
    if is_list(F9) ->
           _ = [v_msg_VideoVoiceReport(Elem, [video_voice_report | Path], TrUserData) || Elem <- F9],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'VideoVoiceReport'}}, F9, [video_voice_report | Path])
    end,
    if is_list(F10) ->
           _ = [v_msg_NetworkProbe(Elem, [network_probe | Path], TrUserData) || Elem <- F10],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'NetworkProbe'}}, F10, [network_probe | Path])
    end,
    if is_list(F11) ->
           _ = [v_msg_EventReport(Elem, [event_report | Path], TrUserData) || Elem <- F11],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'EventReport'}}, F11, [event_report | Path])
    end,
    ok;
v_msg_Report(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Report'}, X, Path).

-compile({nowarn_unused_function,v_enum_RadioBandType/3}).
-dialyzer({nowarn_function,v_enum_RadioBandType/3}).
v_enum_RadioBandType('BAND2G', _Path, _TrUserData) -> ok;
v_enum_RadioBandType('BAND5G', _Path, _TrUserData) -> ok;
v_enum_RadioBandType('BAND5GL', _Path, _TrUserData) -> ok;
v_enum_RadioBandType('BAND5GU', _Path, _TrUserData) -> ok;
v_enum_RadioBandType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_RadioBandType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'RadioBandType'}, X, Path).

-compile({nowarn_unused_function,v_enum_SurveyType/3}).
-dialyzer({nowarn_function,v_enum_SurveyType/3}).
v_enum_SurveyType('ON_CHANNEL', _Path, _TrUserData) -> ok;
v_enum_SurveyType('OFF_CHANNEL', _Path, _TrUserData) -> ok;
v_enum_SurveyType('FULL', _Path, _TrUserData) -> ok;
v_enum_SurveyType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_SurveyType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'SurveyType'}, X, Path).

-compile({nowarn_unused_function,v_enum_NeighborType/3}).
-dialyzer({nowarn_function,v_enum_NeighborType/3}).
v_enum_NeighborType('ONCHAN_SCAN', _Path, _TrUserData) -> ok;
v_enum_NeighborType('OFFCHAN_SCAN', _Path, _TrUserData) -> ok;
v_enum_NeighborType('FULL_SCAN', _Path, _TrUserData) -> ok;
v_enum_NeighborType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_NeighborType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'NeighborType'}, X, Path).

-compile({nowarn_unused_function,v_enum_ChanWidth/3}).
-dialyzer({nowarn_function,v_enum_ChanWidth/3}).
v_enum_ChanWidth('CHAN_WIDTH_UNKNOWN', _Path, _TrUserData) -> ok;
v_enum_ChanWidth('CHAN_WIDTH_20MHZ', _Path, _TrUserData) -> ok;
v_enum_ChanWidth('CHAN_WIDTH_40MHZ', _Path, _TrUserData) -> ok;
v_enum_ChanWidth('CHAN_WIDTH_40MHZ_ABOVE', _Path, _TrUserData) -> ok;
v_enum_ChanWidth('CHAN_WIDTH_40MHZ_BELOW', _Path, _TrUserData) -> ok;
v_enum_ChanWidth('CHAN_WIDTH_80MHZ', _Path, _TrUserData) -> ok;
v_enum_ChanWidth('CHAN_WIDTH_160MHZ', _Path, _TrUserData) -> ok;
v_enum_ChanWidth('CHAN_WIDTH_80_PLUS_80MHZ', _Path, _TrUserData) -> ok;
v_enum_ChanWidth(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_ChanWidth(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'ChanWidth'}, X, Path).

-compile({nowarn_unused_function,v_enum_WmmAc/3}).
-dialyzer({nowarn_function,v_enum_WmmAc/3}).
v_enum_WmmAc('WMM_AC_VO', _Path, _TrUserData) -> ok;
v_enum_WmmAc('WMM_AC_VI', _Path, _TrUserData) -> ok;
v_enum_WmmAc('WMM_AC_BE', _Path, _TrUserData) -> ok;
v_enum_WmmAc('WMM_AC_BK', _Path, _TrUserData) -> ok;
v_enum_WmmAc(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_WmmAc(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'WmmAc'}, X, Path).

-compile({nowarn_unused_function,v_enum_BSEventType/3}).
-dialyzer({nowarn_function,v_enum_BSEventType/3}).
v_enum_BSEventType('PROBE', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CONNECT', _Path, _TrUserData) -> ok;
v_enum_BSEventType('DISCONNECT', _Path, _TrUserData) -> ok;
v_enum_BSEventType('BACKOFF', _Path, _TrUserData) -> ok;
v_enum_BSEventType('ACTIVITY', _Path, _TrUserData) -> ok;
v_enum_BSEventType('OVERRUN', _Path, _TrUserData) -> ok;
v_enum_BSEventType('BAND_STEERING_ATTEMPT', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_STEERING_ATTEMPT', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_STEERING_STARTED', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_STEERING_DISABLED', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_STEERING_EXPIRED', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_STEERING_FAILED', _Path, _TrUserData) -> ok;
v_enum_BSEventType('AUTH_BLOCK', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_KICKED', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_BS_BTM', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_STICKY_BTM', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_BTM', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_CAPABILITIES', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_BS_BTM_RETRY', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_STICKY_BTM_RETRY', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_BTM_RETRY', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_RRM_BCN_RPT', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_BS_KICK', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_STICKY_KICK', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_SPECULATIVE_KICK', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_DIRECTED_KICK', _Path, _TrUserData) -> ok;
v_enum_BSEventType('CLIENT_GHOST_DEVICE_KICK', _Path, _TrUserData) -> ok;
v_enum_BSEventType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_BSEventType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'BSEventType'}, X, Path).

-compile({nowarn_unused_function,v_enum_DeviceType/3}).
-dialyzer({nowarn_function,v_enum_DeviceType/3}).
v_enum_DeviceType('DEV_AP', _Path, _TrUserData) -> ok;
v_enum_DeviceType('DEV_STA', _Path, _TrUserData) -> ok;
v_enum_DeviceType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_DeviceType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'DeviceType'}, X, Path).

-compile({nowarn_unused_function,v_enum_FrameType/3}).
-dialyzer({nowarn_function,v_enum_FrameType/3}).
v_enum_FrameType('FT_DEAUTH', _Path, _TrUserData) -> ok;
v_enum_FrameType('FT_DISASSOC', _Path, _TrUserData) -> ok;
v_enum_FrameType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_FrameType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'FrameType'}, X, Path).

-compile({nowarn_unused_function,v_enum_DisconnectSrc/3}).
-dialyzer({nowarn_function,v_enum_DisconnectSrc/3}).
v_enum_DisconnectSrc('LOCAL', _Path, _TrUserData) -> ok;
v_enum_DisconnectSrc('REMOTE', _Path, _TrUserData) -> ok;
v_enum_DisconnectSrc(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_DisconnectSrc(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'DisconnectSrc'}, X, Path).

-compile({nowarn_unused_function,v_enum_AssocType/3}).
-dialyzer({nowarn_function,v_enum_AssocType/3}).
v_enum_AssocType('ASSOC', _Path, _TrUserData) -> ok;
v_enum_AssocType('REASSOC', _Path, _TrUserData) -> ok;
v_enum_AssocType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_AssocType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'AssocType'}, X, Path).

-compile({nowarn_unused_function,v_enum_DisconnectType/3}).
-dialyzer({nowarn_function,v_enum_DisconnectType/3}).
v_enum_DisconnectType('DISASSOC', _Path, _TrUserData) -> ok;
v_enum_DisconnectType('DEAUTH', _Path, _TrUserData) -> ok;
v_enum_DisconnectType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_DisconnectType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'DisconnectType'}, X, Path).

-compile({nowarn_unused_function,v_enum_SecurityType/3}).
-dialyzer({nowarn_function,v_enum_SecurityType/3}).
v_enum_SecurityType('SEC_OPEN', _Path, _TrUserData) -> ok;
v_enum_SecurityType('SEC_RADIUS', _Path, _TrUserData) -> ok;
v_enum_SecurityType('SEC_PSK', _Path, _TrUserData) -> ok;
v_enum_SecurityType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_SecurityType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'SecurityType'}, X, Path).

-compile({nowarn_unused_function,v_enum_ReportType/3}).
-dialyzer({nowarn_function,v_enum_ReportType/3}).
v_enum_ReportType('RAW', _Path, _TrUserData) -> ok;
v_enum_ReportType('AVERAGE', _Path, _TrUserData) -> ok;
v_enum_ReportType('HISTOGRAM', _Path, _TrUserData) -> ok;
v_enum_ReportType('PERCENTILE', _Path, _TrUserData) -> ok;
v_enum_ReportType('DIFF', _Path, _TrUserData) -> ok;
v_enum_ReportType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_ReportType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'ReportType'}, X, Path).

-compile({nowarn_unused_function,v_enum_FsType/3}).
-dialyzer({nowarn_function,v_enum_FsType/3}).
v_enum_FsType('FS_TYPE_ROOTFS', _Path, _TrUserData) -> ok;
v_enum_FsType('FS_TYPE_TMPFS', _Path, _TrUserData) -> ok;
v_enum_FsType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_FsType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'FsType'}, X, Path).

-compile({nowarn_unused_function,v_enum_CTReasonType/3}).
-dialyzer({nowarn_function,v_enum_CTReasonType/3}).
v_enum_CTReasonType('CTR_IDLE_TOO_LONG', _Path, _TrUserData) -> ok;
v_enum_CTReasonType('CTR_PROBE_FAIL', _Path, _TrUserData) -> ok;
v_enum_CTReasonType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_CTReasonType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'CTReasonType'}, X, Path).

-compile({nowarn_unused_function,v_enum_DiffType/3}).
-dialyzer({nowarn_function,v_enum_DiffType/3}).
v_enum_DiffType('ADDED', _Path, _TrUserData) -> ok;
v_enum_DiffType('REMOVED', _Path, _TrUserData) -> ok;
v_enum_DiffType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_DiffType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'DiffType'}, X, Path).

-compile({nowarn_unused_function,v_enum_StreamingVideoType/3}).
-dialyzer({nowarn_function,v_enum_StreamingVideoType/3}).
v_enum_StreamingVideoType('UNKNOWN', _Path, _TrUserData) -> ok;
v_enum_StreamingVideoType('NETFLIX', _Path, _TrUserData) -> ok;
v_enum_StreamingVideoType('YOUTUBE', _Path, _TrUserData) -> ok;
v_enum_StreamingVideoType('PLEX', _Path, _TrUserData) -> ok;
v_enum_StreamingVideoType(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_StreamingVideoType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'StreamingVideoType'}, X, Path).

-compile({nowarn_unused_function,'v_enum_RssiPeer.RssiSource'/3}).
-dialyzer({nowarn_function,'v_enum_RssiPeer.RssiSource'/3}).
'v_enum_RssiPeer.RssiSource'('CLIENT', _Path, _TrUserData) -> ok;
'v_enum_RssiPeer.RssiSource'('PROBE', _Path, _TrUserData) -> ok;
'v_enum_RssiPeer.RssiSource'('NEIGHBOR', _Path, _TrUserData) -> ok;
'v_enum_RssiPeer.RssiSource'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_RssiPeer.RssiSource'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'RssiPeer.RssiSource'}, X, Path).

-compile({nowarn_unused_function,v_enum_StateUpDown/3}).
-dialyzer({nowarn_function,v_enum_StateUpDown/3}).
v_enum_StateUpDown('SUD_down', _Path, _TrUserData) -> ok;
v_enum_StateUpDown('SUD_up', _Path, _TrUserData) -> ok;
v_enum_StateUpDown('SUD_error', _Path, _TrUserData) -> ok;
v_enum_StateUpDown(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
v_enum_StateUpDown(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'StateUpDown'}, X, Path).

-compile({nowarn_unused_function,'v_enum_RtpFlowStats.RtpFlowDirection'/3}).
-dialyzer({nowarn_function,'v_enum_RtpFlowStats.RtpFlowDirection'/3}).
'v_enum_RtpFlowStats.RtpFlowDirection'('RTP_UPSTREAM', _Path, _TrUserData) -> ok;
'v_enum_RtpFlowStats.RtpFlowDirection'('RTP_DOWNSTREAM', _Path, _TrUserData) -> ok;
'v_enum_RtpFlowStats.RtpFlowDirection'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_RtpFlowStats.RtpFlowDirection'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'RtpFlowStats.RtpFlowDirection'}, X, Path).

-compile({nowarn_unused_function,'v_enum_RtpFlowStats.RtpFlowType'/3}).
-dialyzer({nowarn_function,'v_enum_RtpFlowStats.RtpFlowType'/3}).
'v_enum_RtpFlowStats.RtpFlowType'('RTP_VOICE', _Path, _TrUserData) -> ok;
'v_enum_RtpFlowStats.RtpFlowType'('RTP_VIDEO', _Path, _TrUserData) -> ok;
'v_enum_RtpFlowStats.RtpFlowType'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_RtpFlowStats.RtpFlowType'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'RtpFlowStats.RtpFlowType'}, X, Path).

-compile({nowarn_unused_function,'v_enum_CallStop.CallStopReason'/3}).
-dialyzer({nowarn_function,'v_enum_CallStop.CallStopReason'/3}).
'v_enum_CallStop.CallStopReason'('BYE_OK', _Path, _TrUserData) -> ok;
'v_enum_CallStop.CallStopReason'('CALL_DROPPED', _Path, _TrUserData) -> ok;
'v_enum_CallStop.CallStopReason'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_CallStop.CallStopReason'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'CallStop.CallStopReason'}, X, Path).

-compile({nowarn_unused_function,'v_enum_CallReport.CallReportReason'/3}).
-dialyzer({nowarn_function,'v_enum_CallReport.CallReportReason'/3}).
'v_enum_CallReport.CallReportReason'('ROAMED_FROM', _Path, _TrUserData) -> ok;
'v_enum_CallReport.CallReportReason'('ROAMED_TO', _Path, _TrUserData) -> ok;
'v_enum_CallReport.CallReportReason'('GOT_PUBLISH', _Path, _TrUserData) -> ok;
'v_enum_CallReport.CallReportReason'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_CallReport.CallReportReason'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'CallReport.CallReportReason'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sint32, signed, 32}, N, Path);
v_type_sint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sint32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_double(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) -> mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'RadioBandType'}, [{'BAND2G', 0}, {'BAND5G', 1}, {'BAND5GL', 2}, {'BAND5GU', 3}]},
     {{enum, 'SurveyType'}, [{'ON_CHANNEL', 0}, {'OFF_CHANNEL', 1}, {'FULL', 2}]},
     {{enum, 'NeighborType'}, [{'ONCHAN_SCAN', 0}, {'OFFCHAN_SCAN', 1}, {'FULL_SCAN', 2}]},
     {{enum, 'ChanWidth'}, [{'CHAN_WIDTH_UNKNOWN', 0}, {'CHAN_WIDTH_20MHZ', 1}, {'CHAN_WIDTH_40MHZ', 2}, {'CHAN_WIDTH_40MHZ_ABOVE', 3}, {'CHAN_WIDTH_40MHZ_BELOW', 4}, {'CHAN_WIDTH_80MHZ', 5}, {'CHAN_WIDTH_160MHZ', 6}, {'CHAN_WIDTH_80_PLUS_80MHZ', 7}]},
     {{enum, 'WmmAc'}, [{'WMM_AC_VO', 1}, {'WMM_AC_VI', 2}, {'WMM_AC_BE', 3}, {'WMM_AC_BK', 4}]},
     {{enum, 'BSEventType'},
      [{'PROBE', 0},
       {'CONNECT', 1},
       {'DISCONNECT', 2},
       {'BACKOFF', 3},
       {'ACTIVITY', 4},
       {'OVERRUN', 5},
       {'BAND_STEERING_ATTEMPT', 6},
       {'CLIENT_STEERING_ATTEMPT', 7},
       {'CLIENT_STEERING_STARTED', 8},
       {'CLIENT_STEERING_DISABLED', 9},
       {'CLIENT_STEERING_EXPIRED', 10},
       {'CLIENT_STEERING_FAILED', 11},
       {'AUTH_BLOCK', 12},
       {'CLIENT_KICKED', 13},
       {'CLIENT_BS_BTM', 14},
       {'CLIENT_STICKY_BTM', 15},
       {'CLIENT_BTM', 16},
       {'CLIENT_CAPABILITIES', 17},
       {'CLIENT_BS_BTM_RETRY', 18},
       {'CLIENT_STICKY_BTM_RETRY', 19},
       {'CLIENT_BTM_RETRY', 20},
       {'CLIENT_RRM_BCN_RPT', 21},
       {'CLIENT_BS_KICK', 22},
       {'CLIENT_STICKY_KICK', 23},
       {'CLIENT_SPECULATIVE_KICK', 24},
       {'CLIENT_DIRECTED_KICK', 25},
       {'CLIENT_GHOST_DEVICE_KICK', 26}]},
     {{enum, 'EventType'}, [{'CLIENT_ASSOC', 0}, {'CLIENT_AUTH', 1}, {'CLIENT_DISCONNECT', 2}, {'CLIENT_FAILURE', 3}, {'CLIENT_FIRST_DATA', 4}, {'CLIEND_ID', 5}, {'CLIENT_IP', 6}, {'CLIENT_TIMEOUT', 7}]},
     {{enum, 'DeviceType'}, [{'DEV_AP', 0}, {'DEV_STA', 1}]},
     {{enum, 'FrameType'}, [{'FT_DEAUTH', 0}, {'FT_DISASSOC', 1}]},
     {{enum, 'DisconnectSrc'}, [{'LOCAL', 0}, {'REMOTE', 1}]},
     {{enum, 'AssocType'}, [{'ASSOC', 0}, {'REASSOC', 1}]},
     {{enum, 'DisconnectType'}, [{'DISASSOC', 0}, {'DEAUTH', 1}]},
     {{enum, 'SecurityType'}, [{'SEC_OPEN', 0}, {'SEC_RADIUS', 1}, {'SEC_PSK', 2}]},
     {{enum, 'ReportType'}, [{'RAW', 0}, {'AVERAGE', 1}, {'HISTOGRAM', 2}, {'PERCENTILE', 3}, {'DIFF', 4}]},
     {{enum, 'FsType'}, [{'FS_TYPE_ROOTFS', 0}, {'FS_TYPE_TMPFS', 1}]},
     {{enum, 'CTReasonType'}, [{'CTR_IDLE_TOO_LONG', 0}, {'CTR_PROBE_FAIL', 1}]},
     {{enum, 'DiffType'}, [{'ADDED', 0}, {'REMOVED', 1}]},
     {{enum, 'StreamingVideoType'}, [{'UNKNOWN', 0}, {'NETFLIX', 1}, {'YOUTUBE', 2}, {'PLEX', 3}]},
     {{enum, 'RssiPeer.RssiSource'}, [{'CLIENT', 0}, {'PROBE', 1}, {'NEIGHBOR', 2}]},
     {{enum, 'StateUpDown'}, [{'SUD_down', 0}, {'SUD_up', 1}, {'SUD_error', 2}]},
     {{enum, 'RtpFlowStats.RtpFlowDirection'}, [{'RTP_UPSTREAM', 0}, {'RTP_DOWNSTREAM', 1}]},
     {{enum, 'RtpFlowStats.RtpFlowType'}, [{'RTP_VOICE', 0}, {'RTP_VIDEO', 1}]},
     {{enum, 'CallStop.CallStopReason'}, [{'BYE_OK', 0}, {'CALL_DROPPED', 1}]},
     {{enum, 'CallReport.CallReportReason'}, [{'ROAMED_FROM', 0}, {'ROAMED_TO', 1}, {'GOT_PUBLISH', 2}]},
     {{msg, 'AvgType'},
      [#field{name = avg, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = min, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = max, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = num, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Neighbor.NeighborBss'},
      [#field{name = bssid, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = ssid, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = rssi, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = tsf, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []},
       #field{name = chan_width, fnum = 5, rnum = 6, type = {enum, 'ChanWidth'}, occurrence = optional, opts = []},
       #field{name = channel, fnum = 6, rnum = 7, type = uint32, occurrence = required, opts = []},
       #field{name = status, fnum = 7, rnum = 8, type = {enum, 'DiffType'}, occurrence = optional, opts = []}]},
     {{msg, 'Neighbor'},
      [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
       #field{name = scan_type, fnum = 2, rnum = 3, type = {enum, 'NeighborType'}, occurrence = required, opts = []},
       #field{name = timestamp_ms, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
       #field{name = bss_list, fnum = 4, rnum = 5, type = {msg, 'Neighbor.NeighborBss'}, occurrence = repeated, opts = []},
       #field{name = report_type, fnum = 5, rnum = 6, type = {enum, 'ReportType'}, occurrence = optional, opts = []}]},
     {{msg, 'Client.Stats'},
      [#field{name = rx_bytes, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
       #field{name = tx_bytes, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = rx_frames, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
       #field{name = tx_frames, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []},
       #field{name = rx_retries, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []},
       #field{name = tx_retries, fnum = 6, rnum = 7, type = uint64, occurrence = optional, opts = []},
       #field{name = rx_errors, fnum = 7, rnum = 8, type = uint64, occurrence = optional, opts = []},
       #field{name = tx_errors, fnum = 8, rnum = 9, type = uint64, occurrence = optional, opts = []},
       #field{name = rx_rate, fnum = 9, rnum = 10, type = double, occurrence = optional, opts = []},
       #field{name = tx_rate, fnum = 10, rnum = 11, type = double, occurrence = optional, opts = []},
       #field{name = rssi, fnum = 11, rnum = 12, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Client.RxStats'},
      [#field{name = mcs, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = nss, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
       #field{name = bw, fnum = 3, rnum = 4, type = uint32, occurrence = required, opts = []},
       #field{name = bytes, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []},
       #field{name = msdus, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []},
       #field{name = mpdus, fnum = 6, rnum = 7, type = uint64, occurrence = optional, opts = []},
       #field{name = ppdus, fnum = 7, rnum = 8, type = uint64, occurrence = optional, opts = []},
       #field{name = retries, fnum = 8, rnum = 9, type = uint64, occurrence = optional, opts = []},
       #field{name = errors, fnum = 9, rnum = 10, type = uint64, occurrence = optional, opts = []},
       #field{name = rssi, fnum = 10, rnum = 11, type = uint32, occurrence = optional, opts = []},
       #field{name = chain_rssi, fnum = 11, rnum = 12, type = {msg, 'Client.RxStats.ChainRSSI'}, occurrence = repeated, opts = []}]},
     {{msg, 'Client.RxStats.ChainRSSI'},
      [#field{name = chain, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = ht, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
       #field{name = rssi, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Client.TxStats'},
      [#field{name = mcs, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = nss, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
       #field{name = bw, fnum = 3, rnum = 4, type = uint32, occurrence = required, opts = []},
       #field{name = bytes, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []},
       #field{name = msdus, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []},
       #field{name = mpdus, fnum = 6, rnum = 7, type = uint64, occurrence = optional, opts = []},
       #field{name = ppdus, fnum = 7, rnum = 8, type = uint64, occurrence = optional, opts = []},
       #field{name = retries, fnum = 8, rnum = 9, type = uint64, occurrence = optional, opts = []},
       #field{name = errors, fnum = 9, rnum = 10, type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'Client.TidStats'}, [#field{name = sojourn, fnum = 4, rnum = 2, type = {msg, 'Client.TidStats.Sojourn'}, occurrence = repeated, opts = []}, #field{name = offset_ms, fnum = 5, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Client.TidStats.Sojourn'},
      [#field{name = ac, fnum = 1, rnum = 2, type = {enum, 'WmmAc'}, occurrence = required, opts = []},
       #field{name = tid, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
       #field{name = ewma_time_ms, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = sum_time_ms, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = num_msdus, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Client'},
      [#field{name = mac_address, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = ssid, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = connected, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = []},
       #field{name = connect_count, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = disconnect_count, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
       #field{name = connect_offset_ms, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = disconnect_offset_ms, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
       #field{name = duration_ms, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
       #field{name = stats, fnum = 9, rnum = 10, type = {msg, 'Client.Stats'}, occurrence = optional, opts = []},
       #field{name = rx_stats, fnum = 10, rnum = 11, type = {msg, 'Client.RxStats'}, occurrence = repeated, opts = []},
       #field{name = tx_stats, fnum = 11, rnum = 12, type = {msg, 'Client.TxStats'}, occurrence = repeated, opts = []},
       #field{name = tid_stats, fnum = 12, rnum = 13, type = {msg, 'Client.TidStats'}, occurrence = repeated, opts = []},
       #field{name = uapsd, fnum = 13, rnum = 14, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'ClientReport'},
      [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
       #field{name = timestamp_ms, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = client_list, fnum = 3, rnum = 4, type = {msg, 'Client'}, occurrence = repeated, opts = []},
       #field{name = channel, fnum = 4, rnum = 5, type = uint32, occurrence = required, opts = []}]},
     {{msg, 'Survey.SurveySample'},
      [#field{name = channel, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = duration_ms, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = total_count, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = sample_count, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = busy, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
       #field{name = busy_tx, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = busy_rx, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
       #field{name = busy_self, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
       #field{name = offset_ms, fnum = 9, rnum = 10, type = uint32, occurrence = optional, opts = []},
       #field{name = busy_ext, fnum = 10, rnum = 11, type = uint32, occurrence = optional, opts = []},
       #field{name = noise, fnum = 11, rnum = 12, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Survey.SurveyAvg'},
      [#field{name = channel, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = busy, fnum = 2, rnum = 3, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
       #field{name = busy_tx, fnum = 3, rnum = 4, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
       #field{name = busy_rx, fnum = 4, rnum = 5, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
       #field{name = busy_self, fnum = 5, rnum = 6, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
       #field{name = busy_ext, fnum = 6, rnum = 7, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
       #field{name = noise, fnum = 7, rnum = 8, type = {msg, 'AvgType'}, occurrence = optional, opts = []}]},
     {{msg, 'Survey'},
      [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
       #field{name = survey_type, fnum = 2, rnum = 3, type = {enum, 'SurveyType'}, occurrence = required, opts = []},
       #field{name = timestamp_ms, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
       #field{name = survey_list, fnum = 4, rnum = 5, type = {msg, 'Survey.SurveySample'}, occurrence = repeated, opts = []},
       #field{name = survey_avg, fnum = 5, rnum = 6, type = {msg, 'Survey.SurveyAvg'}, occurrence = repeated, opts = []},
       #field{name = report_type, fnum = 6, rnum = 7, type = {enum, 'ReportType'}, occurrence = optional, opts = []}]},
     {{msg, 'Capacity.QueueSample'},
      [#field{name = busy_tx, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = bytes_tx, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = sample_count, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = 'Vo_count', fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = 'Vi_count', fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
       #field{name = 'Be_count', fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = 'Bk_count', fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
       #field{name = 'Bcn_count', fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
       #field{name = 'Cab_count', fnum = 9, rnum = 10, type = uint32, occurrence = optional, opts = []},
       #field{name = offset_ms, fnum = 10, rnum = 11, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Capacity'},
      [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
       #field{name = timestamp_ms, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = queue_list, fnum = 3, rnum = 4, type = {msg, 'Capacity.QueueSample'}, occurrence = repeated, opts = []}]},
     {{msg, 'Device.LoadAvg'},
      [#field{name = one, fnum = 1, rnum = 2, type = double, occurrence = optional, opts = []},
       #field{name = five, fnum = 2, rnum = 3, type = double, occurrence = optional, opts = []},
       #field{name = fifteen, fnum = 3, rnum = 4, type = double, occurrence = optional, opts = []}]},
     {{msg, 'Device.RadioTemp'}, [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}]},
     {{msg, 'Device.Thermal'},
      [#field{name = txchainmask, fnum = 1, rnum = 2, type = {msg, 'Device.Thermal.RadioTxChainMask'}, occurrence = repeated, opts = []},
       #field{name = fan_rpm, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = timestamp_ms, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'Device.Thermal.RadioTxChainMask'}, [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Device.MemUtil'},
      [#field{name = mem_total, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = mem_used, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
       #field{name = swap_total, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = swap_used, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Device.FsUtil'},
      [#field{name = fs_type, fnum = 1, rnum = 2, type = {enum, 'FsType'}, occurrence = required, opts = []},
       #field{name = fs_total, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
       #field{name = fs_used, fnum = 3, rnum = 4, type = uint32, occurrence = required, opts = []}]},
     {{msg, 'Device.CpuUtil'}, [#field{name = cpu_util, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Device.PerProcessUtil'},
      [#field{name = pid, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = cmd, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []},
       #field{name = util, fnum = 3, rnum = 4, type = uint32, occurrence = required, opts = []}]},
     {{msg, 'Device'},
      [#field{name = load, fnum = 1, rnum = 2, type = {msg, 'Device.LoadAvg'}, occurrence = optional, opts = []},
       #field{name = radio_temp, fnum = 2, rnum = 3, type = {msg, 'Device.RadioTemp'}, occurrence = repeated, opts = []},
       #field{name = timestamp_ms, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
       #field{name = uptime, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = thermal_stats, fnum = 5, rnum = 6, type = {msg, 'Device.Thermal'}, occurrence = repeated, opts = []},
       #field{name = mem_util, fnum = 6, rnum = 7, type = {msg, 'Device.MemUtil'}, occurrence = optional, opts = []},
       #field{name = fs_util, fnum = 7, rnum = 8, type = {msg, 'Device.FsUtil'}, occurrence = repeated, opts = []},
       #field{name = cpuUtil, fnum = 8, rnum = 9, type = {msg, 'Device.CpuUtil'}, occurrence = optional, opts = []},
       #field{name = ps_cpu_util, fnum = 9, rnum = 10, type = {msg, 'Device.PerProcessUtil'}, occurrence = repeated, opts = []},
       #field{name = ps_mem_util, fnum = 10, rnum = 11, type = {msg, 'Device.PerProcessUtil'}, occurrence = repeated, opts = []}]},
     {{msg, 'BSClient.BSEvent'},
      [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'BSEventType'}, occurrence = required, opts = []},
       #field{name = offset_ms, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
       #field{name = rssi, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = probe_bcast, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []},
       #field{name = probe_blocked, fnum = 5, rnum = 6, type = bool, occurrence = optional, opts = []},
       #field{name = disconnect_src, fnum = 6, rnum = 7, type = {enum, 'DisconnectSrc'}, occurrence = optional, opts = []},
       #field{name = disconnect_type, fnum = 7, rnum = 8, type = {enum, 'DisconnectType'}, occurrence = optional, opts = []},
       #field{name = disconnect_reason, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
       #field{name = backoff_enabled, fnum = 9, rnum = 10, type = bool, occurrence = optional, opts = []},
       #field{name = active, fnum = 10, rnum = 11, type = bool, occurrence = optional, opts = []},
       #field{name = rejected, fnum = 11, rnum = 12, type = bool, occurrence = optional, opts = []},
       #field{name = is_BTM_supported, fnum = 12, rnum = 13, type = bool, occurrence = optional, opts = []},
       #field{name = is_RRM_supported, fnum = 13, rnum = 14, type = bool, occurrence = optional, opts = []},
       #field{name = max_chwidth, fnum = 14, rnum = 15, type = uint32, occurrence = optional, opts = []},
       #field{name = max_streams, fnum = 15, rnum = 16, type = uint32, occurrence = optional, opts = []},
       #field{name = phy_mode, fnum = 16, rnum = 17, type = uint32, occurrence = optional, opts = []},
       #field{name = max_mcs, fnum = 17, rnum = 18, type = uint32, occurrence = optional, opts = []},
       #field{name = max_txpower, fnum = 18, rnum = 19, type = uint32, occurrence = optional, opts = []},
       #field{name = is_static_smps, fnum = 19, rnum = 20, type = bool, occurrence = optional, opts = []},
       #field{name = is_mu_mimo_supported, fnum = 20, rnum = 21, type = bool, occurrence = optional, opts = []},
       #field{name = band_cap_2G, fnum = 21, rnum = 22, type = bool, occurrence = optional, opts = []},
       #field{name = band_cap_5G, fnum = 22, rnum = 23, type = bool, occurrence = optional, opts = []},
       #field{name = rrm_caps_link_meas, fnum = 23, rnum = 24, type = bool, occurrence = optional, opts = []},
       #field{name = rrm_caps_neigh_rpt, fnum = 24, rnum = 25, type = bool, occurrence = optional, opts = []},
       #field{name = rrm_caps_bcn_rpt_passive, fnum = 25, rnum = 26, type = bool, occurrence = optional, opts = []},
       #field{name = rrm_caps_bcn_rpt_active, fnum = 26, rnum = 27, type = bool, occurrence = optional, opts = []},
       #field{name = rrm_caps_bcn_rpt_table, fnum = 27, rnum = 28, type = bool, occurrence = optional, opts = []},
       #field{name = rrm_caps_lci_meas, fnum = 28, rnum = 29, type = bool, occurrence = optional, opts = []},
       #field{name = rrm_caps_ftm_range_rpt, fnum = 29, rnum = 30, type = bool, occurrence = optional, opts = []},
       #field{name = backoff_period, fnum = 30, rnum = 31, type = uint32, occurrence = optional, opts = []},
       #field{name = assoc_ies, fnum = 31, rnum = 32, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'BSClient.BSBandReport'},
      [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
       #field{name = connected, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = []},
       #field{name = rejects, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = connects, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = disconnects, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
       #field{name = activity_changes, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = steering_success_cnt, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
       #field{name = steering_fail_cnt, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
       #field{name = steering_kick_cnt, fnum = 9, rnum = 10, type = uint32, occurrence = optional, opts = []},
       #field{name = sticky_kick_cnt, fnum = 10, rnum = 11, type = uint32, occurrence = optional, opts = []},
       #field{name = probe_bcast_cnt, fnum = 11, rnum = 12, type = uint32, occurrence = optional, opts = []},
       #field{name = probe_bcast_blocked, fnum = 12, rnum = 13, type = uint32, occurrence = optional, opts = []},
       #field{name = probe_direct_cnt, fnum = 13, rnum = 14, type = uint32, occurrence = optional, opts = []},
       #field{name = probe_direct_blocked, fnum = 14, rnum = 15, type = uint32, occurrence = optional, opts = []},
       #field{name = event_list, fnum = 15, rnum = 16, type = {msg, 'BSClient.BSEvent'}, occurrence = repeated, opts = []},
       #field{name = ifname, fnum = 16, rnum = 17, type = string, occurrence = optional, opts = []}]},
     {{msg, 'BSClient'}, [#field{name = mac_address, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = bs_band_report, fnum = 2, rnum = 3, type = {msg, 'BSClient.BSBandReport'}, occurrence = repeated, opts = []}]},
     {{msg, 'BSReport'}, [#field{name = timestamp_ms, fnum = 1, rnum = 2, type = uint64, occurrence = required, opts = []}, #field{name = clients, fnum = 2, rnum = 3, type = {msg, 'BSClient'}, occurrence = repeated, opts = []}]},
     {{msg, 'RssiPeer.RssiSample'}, [#field{name = rssi, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []}, #field{name = offset_ms, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'RssiPeer'},
      [#field{name = mac_address, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = rssi_source, fnum = 2, rnum = 3, type = {enum, 'RssiPeer.RssiSource'}, occurrence = optional, opts = []},
       #field{name = rssi_list, fnum = 3, rnum = 4, type = {msg, 'RssiPeer.RssiSample'}, occurrence = repeated, opts = []},
       #field{name = rssi_avg, fnum = 4, rnum = 5, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
       #field{name = rx_ppdus, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []},
       #field{name = tx_ppdus, fnum = 6, rnum = 7, type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'RssiReport'},
      [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
       #field{name = report_type, fnum = 2, rnum = 3, type = {enum, 'ReportType'}, occurrence = required, opts = []},
       #field{name = timestamp_ms, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
       #field{name = peer_list, fnum = 4, rnum = 5, type = {msg, 'RssiPeer'}, occurrence = repeated, opts = []}]},
     {{msg, 'DNSProbeMetric'},
      [#field{name = serverIP, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = state, fnum = 2, rnum = 3, type = {enum, 'StateUpDown'}, occurrence = optional, opts = []},
       #field{name = latency, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'VLANMetrics'},
      [#field{name = vlanIF, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = dhcpState, fnum = 2, rnum = 3, type = {enum, 'StateUpDown'}, occurrence = optional, opts = []},
       #field{name = latency, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'RADIUSMetrics'},
      [#field{name = serverIP, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = radiusState, fnum = 2, rnum = 3, type = {enum, 'StateUpDown'}, occurrence = optional, opts = []},
       #field{name = latency, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'NetworkProbe'},
      [#field{name = dns_probe, fnum = 1, rnum = 2, type = {msg, 'DNSProbeMetric'}, occurrence = optional, opts = []},
       #field{name = vlan_probe, fnum = 2, rnum = 3, type = {msg, 'VLANMetrics'}, occurrence = optional, opts = []},
       #field{name = radius_probe, fnum = 3, rnum = 4, type = {msg, 'RADIUSMetrics'}, occurrence = repeated, opts = []},
       #field{name = timestamp_ms, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'RtpFlowStats'},
      [#field{name = direction, fnum = 1, rnum = 2, type = {enum, 'RtpFlowStats.RtpFlowDirection'}, occurrence = optional, opts = []},
       #field{name = rtp_flow_type, fnum = 2, rnum = 3, type = {enum, 'RtpFlowStats.RtpFlowType'}, occurrence = optional, opts = []},
       #field{name = latency, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = jitter, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = packet_loss_percent, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
       #field{name = packet_loss_consec, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = codec, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
       #field{name = mosx_100, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
       #field{name = block_codecs, fnum = 9, rnum = 10, type = bytes, occurrence = optional, opts = []},
       #field{name = total_packets_sent, fnum = 10, rnum = 11, type = uint32, occurrence = optional, opts = []},
       #field{name = total_packets_lost, fnum = 11, rnum = 12, type = uint32, occurrence = optional, opts = []},
       #field{name = rtp_seq_first, fnum = 12, rnum = 13, type = uint32, occurrence = optional, opts = []},
       #field{name = rtp_seq_last, fnum = 13, rnum = 14, type = uint32, occurrence = optional, opts = []},
       #field{name = stats_idx, fnum = 14, rnum = 15, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'CallStart'},
      [#field{name = session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
       #field{name = wifi_session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
       #field{name = codecs, fnum = 4, rnum = 5, type = string, occurrence = repeated, opts = []},
       #field{name = provider_domain, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
       #field{name = device_info, fnum = 6, rnum = 7, type = string, occurrence = optional, opts = []},
       #field{name = channel, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
       #field{name = 'band', fnum = 8, rnum = 9, type = {enum, 'RadioBandType'}, occurrence = required, opts = []}]},
     {{msg, 'CallStop'},
      [#field{name = session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
       #field{name = wifi_session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
       #field{name = reason, fnum = 4, rnum = 5, type = {enum, 'CallStop.CallStopReason'}, occurrence = optional, opts = []},
       #field{name = call_duration, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
       #field{name = stats, fnum = 6, rnum = 7, type = {msg, 'RtpFlowStats'}, occurrence = repeated, opts = []},
       #field{name = channel, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
       #field{name = 'band', fnum = 8, rnum = 9, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
       #field{name = codecs, fnum = 9, rnum = 10, type = string, occurrence = repeated, opts = []},
       #field{name = provider_domain, fnum = 10, rnum = 11, type = string, occurrence = optional, opts = []}]},
     {{msg, 'CallReport'},
      [#field{name = session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
       #field{name = wifi_session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
       #field{name = stats, fnum = 4, rnum = 5, type = {msg, 'RtpFlowStats'}, occurrence = repeated, opts = []},
       #field{name = reason, fnum = 5, rnum = 6, type = {enum, 'CallReport.CallReportReason'}, occurrence = optional, opts = []},
       #field{name = channel, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = 'band', fnum = 7, rnum = 8, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
       #field{name = codecs, fnum = 8, rnum = 9, type = string, occurrence = repeated, opts = []},
       #field{name = provider_domain, fnum = 9, rnum = 10, type = string, occurrence = optional, opts = []}]},
     {{msg, 'StreamingVideoDetectPattern'},
      [#field{name = dns_lookup_pattern, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = video_type, fnum = 2, rnum = 3, type = {enum, 'StreamingVideoType'}, occurrence = optional, opts = []}]},
     {{msg, 'StreamingVideoSessionStart'},
      [#field{name = video_session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
       #field{name = server_ip, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
       #field{name = streaming_video_type, fnum = 5, rnum = 6, type = {enum, 'StreamingVideoType'}, occurrence = optional, opts = []}]},
     {{msg, 'StreamingVideoServerDetected'},
      [#field{name = video_session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
       #field{name = server_ip, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
       #field{name = server_dns_name, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
       #field{name = streaming_video_type, fnum = 6, rnum = 7, type = {enum, 'StreamingVideoType'}, occurrence = optional, opts = []}]},
     {{msg, 'StreamingVideoStop'},
      [#field{name = video_session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
       #field{name = server_ip, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
       #field{name = total_bytes, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []},
       #field{name = streaming_video_type, fnum = 6, rnum = 7, type = {enum, 'StreamingVideoType'}, occurrence = optional, opts = []},
       #field{name = duration_sec, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'VideoVoiceReport'},
      [#field{name = call_start, fnum = 1, rnum = 2, type = {msg, 'CallStart'}, occurrence = optional, opts = []},
       #field{name = call_stop, fnum = 2, rnum = 3, type = {msg, 'CallStop'}, occurrence = optional, opts = []},
       #field{name = call_report, fnum = 3, rnum = 4, type = {msg, 'CallReport'}, occurrence = optional, opts = []},
       #field{name = stream_video_stop, fnum = 4, rnum = 5, type = {msg, 'StreamingVideoStop'}, occurrence = optional, opts = []},
       #field{name = stream_video_server, fnum = 5, rnum = 6, type = {msg, 'StreamingVideoServerDetected'}, occurrence = optional, opts = []},
       #field{name = stream_video_session_start, fnum = 6, rnum = 7, type = {msg, 'StreamingVideoSessionStart'}, occurrence = optional, opts = []},
       #field{name = timestamp_ms, fnum = 7, rnum = 8, type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'EventReport.ClientAssocEvent'},
      [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = ssid, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = 'band', fnum = 4, rnum = 5, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []},
       #field{name = assoc_type, fnum = 5, rnum = 6, type = {enum, 'AssocType'}, occurrence = optional, opts = []},
       #field{name = status, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = rssi, fnum = 7, rnum = 8, type = int32, occurrence = optional, opts = []},
       #field{name = internal_sc, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
       #field{name = using11k, fnum = 9, rnum = 10, type = bool, occurrence = optional, opts = []},
       #field{name = using11r, fnum = 10, rnum = 11, type = bool, occurrence = optional, opts = []},
       #field{name = using11v, fnum = 11, rnum = 12, type = bool, occurrence = optional, opts = []}]},
     {{msg, 'EventReport.ClientAuthEvent'},
      [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = ssid, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = 'band', fnum = 4, rnum = 5, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []},
       #field{name = auth_status, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'EventReport.ClientDisconnectEvent'},
      [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = reason, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = dev_type, fnum = 4, rnum = 5, type = {enum, 'DeviceType'}, occurrence = optional, opts = []},
       #field{name = fr_type, fnum = 5, rnum = 6, type = {enum, 'FrameType'}, occurrence = optional, opts = []},
       #field{name = lsent_up_ts_in_us, fnum = 6, rnum = 7, type = uint64, occurrence = optional, opts = []},
       #field{name = lrcv_up_ts_in_us, fnum = 7, rnum = 8, type = uint64, occurrence = optional, opts = []},
       #field{name = internal_rc, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
       #field{name = rssi, fnum = 9, rnum = 10, type = int32, occurrence = optional, opts = []},
       #field{name = ssid, fnum = 10, rnum = 11, type = string, occurrence = optional, opts = []},
       #field{name = 'band', fnum = 11, rnum = 12, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []}]},
     {{msg, 'EventReport.ClientConnectEvent'},
      [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = 'band', fnum = 3, rnum = 4, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []},
       #field{name = assoc_type, fnum = 4, rnum = 5, type = {enum, 'AssocType'}, occurrence = optional, opts = []},
       #field{name = ssid, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
       #field{name = sec_type, fnum = 6, rnum = 7, type = {enum, 'SecurityType'}, occurrence = optional, opts = []},
       #field{name = fbt_used, fnum = 7, rnum = 8, type = bool, occurrence = optional, opts = []},
       #field{name = ip_addr, fnum = 8, rnum = 9, type = bytes, occurrence = optional, opts = []},
       #field{name = clt_id, fnum = 9, rnum = 10, type = string, occurrence = optional, opts = []},
       #field{name = ev_time_bootup_in_us_auth, fnum = 10, rnum = 11, type = int64, occurrence = optional, opts = []},
       #field{name = ev_time_bootup_in_us_assoc, fnum = 11, rnum = 12, type = int64, occurrence = optional, opts = []},
       #field{name = ev_time_bootup_in_us_eapol, fnum = 12, rnum = 13, type = int64, occurrence = optional, opts = []},
       #field{name = ev_time_bootup_in_us_port_enable, fnum = 13, rnum = 14, type = int64, occurrence = optional, opts = []},
       #field{name = ev_time_bootup_in_us_first_rx, fnum = 14, rnum = 15, type = int64, occurrence = optional, opts = []},
       #field{name = ev_time_bootup_in_us_first_tx, fnum = 15, rnum = 16, type = int64, occurrence = optional, opts = []},
       #field{name = using11k, fnum = 16, rnum = 17, type = bool, occurrence = optional, opts = []},
       #field{name = using11r, fnum = 17, rnum = 18, type = bool, occurrence = optional, opts = []},
       #field{name = using11v, fnum = 18, rnum = 19, type = bool, occurrence = optional, opts = []},
       #field{name = ev_time_bootup_in_us_ip, fnum = 19, rnum = 20, type = int64, occurrence = optional, opts = []},
       #field{name = assoc_rssi, fnum = 20, rnum = 21, type = int32, occurrence = optional, opts = []}]},
     {{msg, 'EventReport.ClientFailureEvent'},
      [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = ssid, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = reason_code, fnum = 4, rnum = 5, type = int32, occurrence = optional, opts = []},
       #field{name = reason_str, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}]},
     {{msg, 'EventReport.ClientFirstDataEvent'},
      [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = fdata_tx_up_ts_in_us, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
       #field{name = fdata_rx_up_ts_in_us, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'EventReport.ClientIdEvent'},
      [#field{name = clt_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = clt_id, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}]},
     {{msg, 'EventReport.ClientIpEvent'},
      [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = ip_addr, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'EventReport.ClientTimeoutEvent'},
      [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = r_code, fnum = 3, rnum = 4, type = {enum, 'CTReasonType'}, occurrence = optional, opts = []},
       #field{name = last_sent_up_ts_in_us, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []},
       #field{name = last_rcv_up_ts_in_us, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'EventReport.ClientSession'},
      [#field{name = session_id, fnum = 1, rnum = 2, type = uint64, occurrence = required, opts = []},
       #field{name = client_assoc_event, fnum = 2, rnum = 3, type = {msg, 'EventReport.ClientAssocEvent'}, occurrence = repeated, opts = []},
       #field{name = client_auth_event, fnum = 3, rnum = 4, type = {msg, 'EventReport.ClientAuthEvent'}, occurrence = repeated, opts = []},
       #field{name = client_disconnect_event, fnum = 4, rnum = 5, type = {msg, 'EventReport.ClientDisconnectEvent'}, occurrence = repeated, opts = []},
       #field{name = client_failure_event, fnum = 5, rnum = 6, type = {msg, 'EventReport.ClientFailureEvent'}, occurrence = repeated, opts = []},
       #field{name = client_first_data_event, fnum = 6, rnum = 7, type = {msg, 'EventReport.ClientFirstDataEvent'}, occurrence = repeated, opts = []},
       #field{name = client_id_event, fnum = 7, rnum = 8, type = {msg, 'EventReport.ClientIdEvent'}, occurrence = repeated, opts = []},
       #field{name = client_ip_event, fnum = 8, rnum = 9, type = {msg, 'EventReport.ClientIpEvent'}, occurrence = repeated, opts = []},
       #field{name = client_timeout_event, fnum = 9, rnum = 10, type = {msg, 'EventReport.ClientTimeoutEvent'}, occurrence = repeated, opts = []},
       #field{name = client_connect_event, fnum = 10, rnum = 11, type = {msg, 'EventReport.ClientConnectEvent'}, occurrence = repeated, opts = []}]},
     {{msg, 'EventReport'}, [#field{name = client_session, fnum = 1, rnum = 2, type = {msg, 'EventReport.ClientSession'}, occurrence = repeated, opts = []}]},
     {{msg, 'Report'},
      [#field{name = nodeID, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = survey, fnum = 2, rnum = 3, type = {msg, 'Survey'}, occurrence = repeated, opts = []},
       #field{name = capacity, fnum = 3, rnum = 4, type = {msg, 'Capacity'}, occurrence = repeated, opts = []},
       #field{name = neighbors, fnum = 4, rnum = 5, type = {msg, 'Neighbor'}, occurrence = repeated, opts = []},
       #field{name = clients, fnum = 5, rnum = 6, type = {msg, 'ClientReport'}, occurrence = repeated, opts = []},
       #field{name = device, fnum = 6, rnum = 7, type = {msg, 'Device'}, occurrence = repeated, opts = []},
       #field{name = bs_report, fnum = 7, rnum = 8, type = {msg, 'BSReport'}, occurrence = repeated, opts = []},
       #field{name = rssi_report, fnum = 8, rnum = 9, type = {msg, 'RssiReport'}, occurrence = repeated, opts = []},
       #field{name = video_voice_report, fnum = 9, rnum = 10, type = {msg, 'VideoVoiceReport'}, occurrence = repeated, opts = []},
       #field{name = network_probe, fnum = 101, rnum = 11, type = {msg, 'NetworkProbe'}, occurrence = repeated, opts = []},
       #field{name = event_report, fnum = 102, rnum = 12, type = {msg, 'EventReport'}, occurrence = repeated, opts = []}]}].


get_msg_names() ->
    ['AvgType',
     'Neighbor.NeighborBss',
     'Neighbor',
     'Client.Stats',
     'Client.RxStats',
     'Client.RxStats.ChainRSSI',
     'Client.TxStats',
     'Client.TidStats',
     'Client.TidStats.Sojourn',
     'Client',
     'ClientReport',
     'Survey.SurveySample',
     'Survey.SurveyAvg',
     'Survey',
     'Capacity.QueueSample',
     'Capacity',
     'Device.LoadAvg',
     'Device.RadioTemp',
     'Device.Thermal',
     'Device.Thermal.RadioTxChainMask',
     'Device.MemUtil',
     'Device.FsUtil',
     'Device.CpuUtil',
     'Device.PerProcessUtil',
     'Device',
     'BSClient.BSEvent',
     'BSClient.BSBandReport',
     'BSClient',
     'BSReport',
     'RssiPeer.RssiSample',
     'RssiPeer',
     'RssiReport',
     'DNSProbeMetric',
     'VLANMetrics',
     'RADIUSMetrics',
     'NetworkProbe',
     'RtpFlowStats',
     'CallStart',
     'CallStop',
     'CallReport',
     'StreamingVideoDetectPattern',
     'StreamingVideoSessionStart',
     'StreamingVideoServerDetected',
     'StreamingVideoStop',
     'VideoVoiceReport',
     'EventReport.ClientAssocEvent',
     'EventReport.ClientAuthEvent',
     'EventReport.ClientDisconnectEvent',
     'EventReport.ClientConnectEvent',
     'EventReport.ClientFailureEvent',
     'EventReport.ClientFirstDataEvent',
     'EventReport.ClientIdEvent',
     'EventReport.ClientIpEvent',
     'EventReport.ClientTimeoutEvent',
     'EventReport.ClientSession',
     'EventReport',
     'Report'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['AvgType',
     'Neighbor.NeighborBss',
     'Neighbor',
     'Client.Stats',
     'Client.RxStats',
     'Client.RxStats.ChainRSSI',
     'Client.TxStats',
     'Client.TidStats',
     'Client.TidStats.Sojourn',
     'Client',
     'ClientReport',
     'Survey.SurveySample',
     'Survey.SurveyAvg',
     'Survey',
     'Capacity.QueueSample',
     'Capacity',
     'Device.LoadAvg',
     'Device.RadioTemp',
     'Device.Thermal',
     'Device.Thermal.RadioTxChainMask',
     'Device.MemUtil',
     'Device.FsUtil',
     'Device.CpuUtil',
     'Device.PerProcessUtil',
     'Device',
     'BSClient.BSEvent',
     'BSClient.BSBandReport',
     'BSClient',
     'BSReport',
     'RssiPeer.RssiSample',
     'RssiPeer',
     'RssiReport',
     'DNSProbeMetric',
     'VLANMetrics',
     'RADIUSMetrics',
     'NetworkProbe',
     'RtpFlowStats',
     'CallStart',
     'CallStop',
     'CallReport',
     'StreamingVideoDetectPattern',
     'StreamingVideoSessionStart',
     'StreamingVideoServerDetected',
     'StreamingVideoStop',
     'VideoVoiceReport',
     'EventReport.ClientAssocEvent',
     'EventReport.ClientAuthEvent',
     'EventReport.ClientDisconnectEvent',
     'EventReport.ClientConnectEvent',
     'EventReport.ClientFailureEvent',
     'EventReport.ClientFirstDataEvent',
     'EventReport.ClientIdEvent',
     'EventReport.ClientIpEvent',
     'EventReport.ClientTimeoutEvent',
     'EventReport.ClientSession',
     'EventReport',
     'Report'].


get_enum_names() ->
    ['RadioBandType',
     'SurveyType',
     'NeighborType',
     'ChanWidth',
     'WmmAc',
     'BSEventType',
     'EventType',
     'DeviceType',
     'FrameType',
     'DisconnectSrc',
     'AssocType',
     'DisconnectType',
     'SecurityType',
     'ReportType',
     'FsType',
     'CTReasonType',
     'DiffType',
     'StreamingVideoType',
     'RssiPeer.RssiSource',
     'StateUpDown',
     'RtpFlowStats.RtpFlowDirection',
     'RtpFlowStats.RtpFlowType',
     'CallStop.CallStopReason',
     'CallReport.CallReportReason'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('AvgType') ->
    [#field{name = avg, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = min, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = max, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = num, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}];
find_msg_def('Neighbor.NeighborBss') ->
    [#field{name = bssid, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = ssid, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = rssi, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = tsf, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []},
     #field{name = chan_width, fnum = 5, rnum = 6, type = {enum, 'ChanWidth'}, occurrence = optional, opts = []},
     #field{name = channel, fnum = 6, rnum = 7, type = uint32, occurrence = required, opts = []},
     #field{name = status, fnum = 7, rnum = 8, type = {enum, 'DiffType'}, occurrence = optional, opts = []}];
find_msg_def('Neighbor') ->
    [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
     #field{name = scan_type, fnum = 2, rnum = 3, type = {enum, 'NeighborType'}, occurrence = required, opts = []},
     #field{name = timestamp_ms, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
     #field{name = bss_list, fnum = 4, rnum = 5, type = {msg, 'Neighbor.NeighborBss'}, occurrence = repeated, opts = []},
     #field{name = report_type, fnum = 5, rnum = 6, type = {enum, 'ReportType'}, occurrence = optional, opts = []}];
find_msg_def('Client.Stats') ->
    [#field{name = rx_bytes, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
     #field{name = tx_bytes, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = rx_frames, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
     #field{name = tx_frames, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []},
     #field{name = rx_retries, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []},
     #field{name = tx_retries, fnum = 6, rnum = 7, type = uint64, occurrence = optional, opts = []},
     #field{name = rx_errors, fnum = 7, rnum = 8, type = uint64, occurrence = optional, opts = []},
     #field{name = tx_errors, fnum = 8, rnum = 9, type = uint64, occurrence = optional, opts = []},
     #field{name = rx_rate, fnum = 9, rnum = 10, type = double, occurrence = optional, opts = []},
     #field{name = tx_rate, fnum = 10, rnum = 11, type = double, occurrence = optional, opts = []},
     #field{name = rssi, fnum = 11, rnum = 12, type = uint32, occurrence = optional, opts = []}];
find_msg_def('Client.RxStats') ->
    [#field{name = mcs, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = nss, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
     #field{name = bw, fnum = 3, rnum = 4, type = uint32, occurrence = required, opts = []},
     #field{name = bytes, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []},
     #field{name = msdus, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []},
     #field{name = mpdus, fnum = 6, rnum = 7, type = uint64, occurrence = optional, opts = []},
     #field{name = ppdus, fnum = 7, rnum = 8, type = uint64, occurrence = optional, opts = []},
     #field{name = retries, fnum = 8, rnum = 9, type = uint64, occurrence = optional, opts = []},
     #field{name = errors, fnum = 9, rnum = 10, type = uint64, occurrence = optional, opts = []},
     #field{name = rssi, fnum = 10, rnum = 11, type = uint32, occurrence = optional, opts = []},
     #field{name = chain_rssi, fnum = 11, rnum = 12, type = {msg, 'Client.RxStats.ChainRSSI'}, occurrence = repeated, opts = []}];
find_msg_def('Client.RxStats.ChainRSSI') ->
    [#field{name = chain, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = ht, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
     #field{name = rssi, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []}];
find_msg_def('Client.TxStats') ->
    [#field{name = mcs, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = nss, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
     #field{name = bw, fnum = 3, rnum = 4, type = uint32, occurrence = required, opts = []},
     #field{name = bytes, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []},
     #field{name = msdus, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []},
     #field{name = mpdus, fnum = 6, rnum = 7, type = uint64, occurrence = optional, opts = []},
     #field{name = ppdus, fnum = 7, rnum = 8, type = uint64, occurrence = optional, opts = []},
     #field{name = retries, fnum = 8, rnum = 9, type = uint64, occurrence = optional, opts = []},
     #field{name = errors, fnum = 9, rnum = 10, type = uint64, occurrence = optional, opts = []}];
find_msg_def('Client.TidStats') -> [#field{name = sojourn, fnum = 4, rnum = 2, type = {msg, 'Client.TidStats.Sojourn'}, occurrence = repeated, opts = []}, #field{name = offset_ms, fnum = 5, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def('Client.TidStats.Sojourn') ->
    [#field{name = ac, fnum = 1, rnum = 2, type = {enum, 'WmmAc'}, occurrence = required, opts = []},
     #field{name = tid, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
     #field{name = ewma_time_ms, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = sum_time_ms, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = num_msdus, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []}];
find_msg_def('Client') ->
    [#field{name = mac_address, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = ssid, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = connected, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = []},
     #field{name = connect_count, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = disconnect_count, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
     #field{name = connect_offset_ms, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = disconnect_offset_ms, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
     #field{name = duration_ms, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
     #field{name = stats, fnum = 9, rnum = 10, type = {msg, 'Client.Stats'}, occurrence = optional, opts = []},
     #field{name = rx_stats, fnum = 10, rnum = 11, type = {msg, 'Client.RxStats'}, occurrence = repeated, opts = []},
     #field{name = tx_stats, fnum = 11, rnum = 12, type = {msg, 'Client.TxStats'}, occurrence = repeated, opts = []},
     #field{name = tid_stats, fnum = 12, rnum = 13, type = {msg, 'Client.TidStats'}, occurrence = repeated, opts = []},
     #field{name = uapsd, fnum = 13, rnum = 14, type = uint32, occurrence = optional, opts = []}];
find_msg_def('ClientReport') ->
    [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
     #field{name = timestamp_ms, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = client_list, fnum = 3, rnum = 4, type = {msg, 'Client'}, occurrence = repeated, opts = []},
     #field{name = channel, fnum = 4, rnum = 5, type = uint32, occurrence = required, opts = []}];
find_msg_def('Survey.SurveySample') ->
    [#field{name = channel, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = duration_ms, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = total_count, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = sample_count, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = busy, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
     #field{name = busy_tx, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = busy_rx, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
     #field{name = busy_self, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
     #field{name = offset_ms, fnum = 9, rnum = 10, type = uint32, occurrence = optional, opts = []},
     #field{name = busy_ext, fnum = 10, rnum = 11, type = uint32, occurrence = optional, opts = []},
     #field{name = noise, fnum = 11, rnum = 12, type = uint32, occurrence = optional, opts = []}];
find_msg_def('Survey.SurveyAvg') ->
    [#field{name = channel, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = busy, fnum = 2, rnum = 3, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
     #field{name = busy_tx, fnum = 3, rnum = 4, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
     #field{name = busy_rx, fnum = 4, rnum = 5, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
     #field{name = busy_self, fnum = 5, rnum = 6, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
     #field{name = busy_ext, fnum = 6, rnum = 7, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
     #field{name = noise, fnum = 7, rnum = 8, type = {msg, 'AvgType'}, occurrence = optional, opts = []}];
find_msg_def('Survey') ->
    [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
     #field{name = survey_type, fnum = 2, rnum = 3, type = {enum, 'SurveyType'}, occurrence = required, opts = []},
     #field{name = timestamp_ms, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
     #field{name = survey_list, fnum = 4, rnum = 5, type = {msg, 'Survey.SurveySample'}, occurrence = repeated, opts = []},
     #field{name = survey_avg, fnum = 5, rnum = 6, type = {msg, 'Survey.SurveyAvg'}, occurrence = repeated, opts = []},
     #field{name = report_type, fnum = 6, rnum = 7, type = {enum, 'ReportType'}, occurrence = optional, opts = []}];
find_msg_def('Capacity.QueueSample') ->
    [#field{name = busy_tx, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = bytes_tx, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = sample_count, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = 'Vo_count', fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = 'Vi_count', fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
     #field{name = 'Be_count', fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = 'Bk_count', fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
     #field{name = 'Bcn_count', fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
     #field{name = 'Cab_count', fnum = 9, rnum = 10, type = uint32, occurrence = optional, opts = []},
     #field{name = offset_ms, fnum = 10, rnum = 11, type = uint32, occurrence = optional, opts = []}];
find_msg_def('Capacity') ->
    [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
     #field{name = timestamp_ms, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = queue_list, fnum = 3, rnum = 4, type = {msg, 'Capacity.QueueSample'}, occurrence = repeated, opts = []}];
find_msg_def('Device.LoadAvg') ->
    [#field{name = one, fnum = 1, rnum = 2, type = double, occurrence = optional, opts = []},
     #field{name = five, fnum = 2, rnum = 3, type = double, occurrence = optional, opts = []},
     #field{name = fifteen, fnum = 3, rnum = 4, type = double, occurrence = optional, opts = []}];
find_msg_def('Device.RadioTemp') -> [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}];
find_msg_def('Device.Thermal') ->
    [#field{name = txchainmask, fnum = 1, rnum = 2, type = {msg, 'Device.Thermal.RadioTxChainMask'}, occurrence = repeated, opts = []},
     #field{name = fan_rpm, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = timestamp_ms, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []}];
find_msg_def('Device.Thermal.RadioTxChainMask') ->
    [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def('Device.MemUtil') ->
    [#field{name = mem_total, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = mem_used, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
     #field{name = swap_total, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = swap_used, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}];
find_msg_def('Device.FsUtil') ->
    [#field{name = fs_type, fnum = 1, rnum = 2, type = {enum, 'FsType'}, occurrence = required, opts = []},
     #field{name = fs_total, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
     #field{name = fs_used, fnum = 3, rnum = 4, type = uint32, occurrence = required, opts = []}];
find_msg_def('Device.CpuUtil') -> [#field{name = cpu_util, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def('Device.PerProcessUtil') ->
    [#field{name = pid, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = cmd, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []},
     #field{name = util, fnum = 3, rnum = 4, type = uint32, occurrence = required, opts = []}];
find_msg_def('Device') ->
    [#field{name = load, fnum = 1, rnum = 2, type = {msg, 'Device.LoadAvg'}, occurrence = optional, opts = []},
     #field{name = radio_temp, fnum = 2, rnum = 3, type = {msg, 'Device.RadioTemp'}, occurrence = repeated, opts = []},
     #field{name = timestamp_ms, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
     #field{name = uptime, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = thermal_stats, fnum = 5, rnum = 6, type = {msg, 'Device.Thermal'}, occurrence = repeated, opts = []},
     #field{name = mem_util, fnum = 6, rnum = 7, type = {msg, 'Device.MemUtil'}, occurrence = optional, opts = []},
     #field{name = fs_util, fnum = 7, rnum = 8, type = {msg, 'Device.FsUtil'}, occurrence = repeated, opts = []},
     #field{name = cpuUtil, fnum = 8, rnum = 9, type = {msg, 'Device.CpuUtil'}, occurrence = optional, opts = []},
     #field{name = ps_cpu_util, fnum = 9, rnum = 10, type = {msg, 'Device.PerProcessUtil'}, occurrence = repeated, opts = []},
     #field{name = ps_mem_util, fnum = 10, rnum = 11, type = {msg, 'Device.PerProcessUtil'}, occurrence = repeated, opts = []}];
find_msg_def('BSClient.BSEvent') ->
    [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'BSEventType'}, occurrence = required, opts = []},
     #field{name = offset_ms, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
     #field{name = rssi, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = probe_bcast, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []},
     #field{name = probe_blocked, fnum = 5, rnum = 6, type = bool, occurrence = optional, opts = []},
     #field{name = disconnect_src, fnum = 6, rnum = 7, type = {enum, 'DisconnectSrc'}, occurrence = optional, opts = []},
     #field{name = disconnect_type, fnum = 7, rnum = 8, type = {enum, 'DisconnectType'}, occurrence = optional, opts = []},
     #field{name = disconnect_reason, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
     #field{name = backoff_enabled, fnum = 9, rnum = 10, type = bool, occurrence = optional, opts = []},
     #field{name = active, fnum = 10, rnum = 11, type = bool, occurrence = optional, opts = []},
     #field{name = rejected, fnum = 11, rnum = 12, type = bool, occurrence = optional, opts = []},
     #field{name = is_BTM_supported, fnum = 12, rnum = 13, type = bool, occurrence = optional, opts = []},
     #field{name = is_RRM_supported, fnum = 13, rnum = 14, type = bool, occurrence = optional, opts = []},
     #field{name = max_chwidth, fnum = 14, rnum = 15, type = uint32, occurrence = optional, opts = []},
     #field{name = max_streams, fnum = 15, rnum = 16, type = uint32, occurrence = optional, opts = []},
     #field{name = phy_mode, fnum = 16, rnum = 17, type = uint32, occurrence = optional, opts = []},
     #field{name = max_mcs, fnum = 17, rnum = 18, type = uint32, occurrence = optional, opts = []},
     #field{name = max_txpower, fnum = 18, rnum = 19, type = uint32, occurrence = optional, opts = []},
     #field{name = is_static_smps, fnum = 19, rnum = 20, type = bool, occurrence = optional, opts = []},
     #field{name = is_mu_mimo_supported, fnum = 20, rnum = 21, type = bool, occurrence = optional, opts = []},
     #field{name = band_cap_2G, fnum = 21, rnum = 22, type = bool, occurrence = optional, opts = []},
     #field{name = band_cap_5G, fnum = 22, rnum = 23, type = bool, occurrence = optional, opts = []},
     #field{name = rrm_caps_link_meas, fnum = 23, rnum = 24, type = bool, occurrence = optional, opts = []},
     #field{name = rrm_caps_neigh_rpt, fnum = 24, rnum = 25, type = bool, occurrence = optional, opts = []},
     #field{name = rrm_caps_bcn_rpt_passive, fnum = 25, rnum = 26, type = bool, occurrence = optional, opts = []},
     #field{name = rrm_caps_bcn_rpt_active, fnum = 26, rnum = 27, type = bool, occurrence = optional, opts = []},
     #field{name = rrm_caps_bcn_rpt_table, fnum = 27, rnum = 28, type = bool, occurrence = optional, opts = []},
     #field{name = rrm_caps_lci_meas, fnum = 28, rnum = 29, type = bool, occurrence = optional, opts = []},
     #field{name = rrm_caps_ftm_range_rpt, fnum = 29, rnum = 30, type = bool, occurrence = optional, opts = []},
     #field{name = backoff_period, fnum = 30, rnum = 31, type = uint32, occurrence = optional, opts = []},
     #field{name = assoc_ies, fnum = 31, rnum = 32, type = bytes, occurrence = optional, opts = []}];
find_msg_def('BSClient.BSBandReport') ->
    [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
     #field{name = connected, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = []},
     #field{name = rejects, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = connects, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = disconnects, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
     #field{name = activity_changes, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = steering_success_cnt, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
     #field{name = steering_fail_cnt, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
     #field{name = steering_kick_cnt, fnum = 9, rnum = 10, type = uint32, occurrence = optional, opts = []},
     #field{name = sticky_kick_cnt, fnum = 10, rnum = 11, type = uint32, occurrence = optional, opts = []},
     #field{name = probe_bcast_cnt, fnum = 11, rnum = 12, type = uint32, occurrence = optional, opts = []},
     #field{name = probe_bcast_blocked, fnum = 12, rnum = 13, type = uint32, occurrence = optional, opts = []},
     #field{name = probe_direct_cnt, fnum = 13, rnum = 14, type = uint32, occurrence = optional, opts = []},
     #field{name = probe_direct_blocked, fnum = 14, rnum = 15, type = uint32, occurrence = optional, opts = []},
     #field{name = event_list, fnum = 15, rnum = 16, type = {msg, 'BSClient.BSEvent'}, occurrence = repeated, opts = []},
     #field{name = ifname, fnum = 16, rnum = 17, type = string, occurrence = optional, opts = []}];
find_msg_def('BSClient') -> [#field{name = mac_address, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = bs_band_report, fnum = 2, rnum = 3, type = {msg, 'BSClient.BSBandReport'}, occurrence = repeated, opts = []}];
find_msg_def('BSReport') -> [#field{name = timestamp_ms, fnum = 1, rnum = 2, type = uint64, occurrence = required, opts = []}, #field{name = clients, fnum = 2, rnum = 3, type = {msg, 'BSClient'}, occurrence = repeated, opts = []}];
find_msg_def('RssiPeer.RssiSample') -> [#field{name = rssi, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []}, #field{name = offset_ms, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def('RssiPeer') ->
    [#field{name = mac_address, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = rssi_source, fnum = 2, rnum = 3, type = {enum, 'RssiPeer.RssiSource'}, occurrence = optional, opts = []},
     #field{name = rssi_list, fnum = 3, rnum = 4, type = {msg, 'RssiPeer.RssiSample'}, occurrence = repeated, opts = []},
     #field{name = rssi_avg, fnum = 4, rnum = 5, type = {msg, 'AvgType'}, occurrence = optional, opts = []},
     #field{name = rx_ppdus, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []},
     #field{name = tx_ppdus, fnum = 6, rnum = 7, type = uint64, occurrence = optional, opts = []}];
find_msg_def('RssiReport') ->
    [#field{name = 'band', fnum = 1, rnum = 2, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
     #field{name = report_type, fnum = 2, rnum = 3, type = {enum, 'ReportType'}, occurrence = required, opts = []},
     #field{name = timestamp_ms, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
     #field{name = peer_list, fnum = 4, rnum = 5, type = {msg, 'RssiPeer'}, occurrence = repeated, opts = []}];
find_msg_def('DNSProbeMetric') ->
    [#field{name = serverIP, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = state, fnum = 2, rnum = 3, type = {enum, 'StateUpDown'}, occurrence = optional, opts = []},
     #field{name = latency, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []}];
find_msg_def('VLANMetrics') ->
    [#field{name = vlanIF, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = dhcpState, fnum = 2, rnum = 3, type = {enum, 'StateUpDown'}, occurrence = optional, opts = []},
     #field{name = latency, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []}];
find_msg_def('RADIUSMetrics') ->
    [#field{name = serverIP, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = radiusState, fnum = 2, rnum = 3, type = {enum, 'StateUpDown'}, occurrence = optional, opts = []},
     #field{name = latency, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []}];
find_msg_def('NetworkProbe') ->
    [#field{name = dns_probe, fnum = 1, rnum = 2, type = {msg, 'DNSProbeMetric'}, occurrence = optional, opts = []},
     #field{name = vlan_probe, fnum = 2, rnum = 3, type = {msg, 'VLANMetrics'}, occurrence = optional, opts = []},
     #field{name = radius_probe, fnum = 3, rnum = 4, type = {msg, 'RADIUSMetrics'}, occurrence = repeated, opts = []},
     #field{name = timestamp_ms, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []}];
find_msg_def('RtpFlowStats') ->
    [#field{name = direction, fnum = 1, rnum = 2, type = {enum, 'RtpFlowStats.RtpFlowDirection'}, occurrence = optional, opts = []},
     #field{name = rtp_flow_type, fnum = 2, rnum = 3, type = {enum, 'RtpFlowStats.RtpFlowType'}, occurrence = optional, opts = []},
     #field{name = latency, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = jitter, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = packet_loss_percent, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
     #field{name = packet_loss_consec, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = codec, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
     #field{name = mosx_100, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
     #field{name = block_codecs, fnum = 9, rnum = 10, type = bytes, occurrence = optional, opts = []},
     #field{name = total_packets_sent, fnum = 10, rnum = 11, type = uint32, occurrence = optional, opts = []},
     #field{name = total_packets_lost, fnum = 11, rnum = 12, type = uint32, occurrence = optional, opts = []},
     #field{name = rtp_seq_first, fnum = 12, rnum = 13, type = uint32, occurrence = optional, opts = []},
     #field{name = rtp_seq_last, fnum = 13, rnum = 14, type = uint32, occurrence = optional, opts = []},
     #field{name = stats_idx, fnum = 14, rnum = 15, type = uint32, occurrence = optional, opts = []}];
find_msg_def('CallStart') ->
    [#field{name = session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
     #field{name = wifi_session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
     #field{name = codecs, fnum = 4, rnum = 5, type = string, occurrence = repeated, opts = []},
     #field{name = provider_domain, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
     #field{name = device_info, fnum = 6, rnum = 7, type = string, occurrence = optional, opts = []},
     #field{name = channel, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
     #field{name = 'band', fnum = 8, rnum = 9, type = {enum, 'RadioBandType'}, occurrence = required, opts = []}];
find_msg_def('CallStop') ->
    [#field{name = session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
     #field{name = wifi_session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
     #field{name = reason, fnum = 4, rnum = 5, type = {enum, 'CallStop.CallStopReason'}, occurrence = optional, opts = []},
     #field{name = call_duration, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
     #field{name = stats, fnum = 6, rnum = 7, type = {msg, 'RtpFlowStats'}, occurrence = repeated, opts = []},
     #field{name = channel, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
     #field{name = 'band', fnum = 8, rnum = 9, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
     #field{name = codecs, fnum = 9, rnum = 10, type = string, occurrence = repeated, opts = []},
     #field{name = provider_domain, fnum = 10, rnum = 11, type = string, occurrence = optional, opts = []}];
find_msg_def('CallReport') ->
    [#field{name = session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
     #field{name = wifi_session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
     #field{name = stats, fnum = 4, rnum = 5, type = {msg, 'RtpFlowStats'}, occurrence = repeated, opts = []},
     #field{name = reason, fnum = 5, rnum = 6, type = {enum, 'CallReport.CallReportReason'}, occurrence = optional, opts = []},
     #field{name = channel, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = 'band', fnum = 7, rnum = 8, type = {enum, 'RadioBandType'}, occurrence = required, opts = []},
     #field{name = codecs, fnum = 8, rnum = 9, type = string, occurrence = repeated, opts = []},
     #field{name = provider_domain, fnum = 9, rnum = 10, type = string, occurrence = optional, opts = []}];
find_msg_def('StreamingVideoDetectPattern') ->
    [#field{name = dns_lookup_pattern, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = video_type, fnum = 2, rnum = 3, type = {enum, 'StreamingVideoType'}, occurrence = optional, opts = []}];
find_msg_def('StreamingVideoSessionStart') ->
    [#field{name = video_session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
     #field{name = server_ip, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
     #field{name = streaming_video_type, fnum = 5, rnum = 6, type = {enum, 'StreamingVideoType'}, occurrence = optional, opts = []}];
find_msg_def('StreamingVideoServerDetected') ->
    [#field{name = video_session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
     #field{name = server_ip, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
     #field{name = server_dns_name, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
     #field{name = streaming_video_type, fnum = 6, rnum = 7, type = {enum, 'StreamingVideoType'}, occurrence = optional, opts = []}];
find_msg_def('StreamingVideoStop') ->
    [#field{name = video_session_id, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = client_mac, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
     #field{name = server_ip, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
     #field{name = total_bytes, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []},
     #field{name = streaming_video_type, fnum = 6, rnum = 7, type = {enum, 'StreamingVideoType'}, occurrence = optional, opts = []},
     #field{name = duration_sec, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []}];
find_msg_def('VideoVoiceReport') ->
    [#field{name = call_start, fnum = 1, rnum = 2, type = {msg, 'CallStart'}, occurrence = optional, opts = []},
     #field{name = call_stop, fnum = 2, rnum = 3, type = {msg, 'CallStop'}, occurrence = optional, opts = []},
     #field{name = call_report, fnum = 3, rnum = 4, type = {msg, 'CallReport'}, occurrence = optional, opts = []},
     #field{name = stream_video_stop, fnum = 4, rnum = 5, type = {msg, 'StreamingVideoStop'}, occurrence = optional, opts = []},
     #field{name = stream_video_server, fnum = 5, rnum = 6, type = {msg, 'StreamingVideoServerDetected'}, occurrence = optional, opts = []},
     #field{name = stream_video_session_start, fnum = 6, rnum = 7, type = {msg, 'StreamingVideoSessionStart'}, occurrence = optional, opts = []},
     #field{name = timestamp_ms, fnum = 7, rnum = 8, type = uint64, occurrence = optional, opts = []}];
find_msg_def('EventReport.ClientAssocEvent') ->
    [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = ssid, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = 'band', fnum = 4, rnum = 5, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []},
     #field{name = assoc_type, fnum = 5, rnum = 6, type = {enum, 'AssocType'}, occurrence = optional, opts = []},
     #field{name = status, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = rssi, fnum = 7, rnum = 8, type = int32, occurrence = optional, opts = []},
     #field{name = internal_sc, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
     #field{name = using11k, fnum = 9, rnum = 10, type = bool, occurrence = optional, opts = []},
     #field{name = using11r, fnum = 10, rnum = 11, type = bool, occurrence = optional, opts = []},
     #field{name = using11v, fnum = 11, rnum = 12, type = bool, occurrence = optional, opts = []}];
find_msg_def('EventReport.ClientAuthEvent') ->
    [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = ssid, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = 'band', fnum = 4, rnum = 5, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []},
     #field{name = auth_status, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []}];
find_msg_def('EventReport.ClientDisconnectEvent') ->
    [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = reason, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = dev_type, fnum = 4, rnum = 5, type = {enum, 'DeviceType'}, occurrence = optional, opts = []},
     #field{name = fr_type, fnum = 5, rnum = 6, type = {enum, 'FrameType'}, occurrence = optional, opts = []},
     #field{name = lsent_up_ts_in_us, fnum = 6, rnum = 7, type = uint64, occurrence = optional, opts = []},
     #field{name = lrcv_up_ts_in_us, fnum = 7, rnum = 8, type = uint64, occurrence = optional, opts = []},
     #field{name = internal_rc, fnum = 8, rnum = 9, type = uint32, occurrence = optional, opts = []},
     #field{name = rssi, fnum = 9, rnum = 10, type = int32, occurrence = optional, opts = []},
     #field{name = ssid, fnum = 10, rnum = 11, type = string, occurrence = optional, opts = []},
     #field{name = 'band', fnum = 11, rnum = 12, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []}];
find_msg_def('EventReport.ClientConnectEvent') ->
    [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = 'band', fnum = 3, rnum = 4, type = {enum, 'RadioBandType'}, occurrence = optional, opts = []},
     #field{name = assoc_type, fnum = 4, rnum = 5, type = {enum, 'AssocType'}, occurrence = optional, opts = []},
     #field{name = ssid, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
     #field{name = sec_type, fnum = 6, rnum = 7, type = {enum, 'SecurityType'}, occurrence = optional, opts = []},
     #field{name = fbt_used, fnum = 7, rnum = 8, type = bool, occurrence = optional, opts = []},
     #field{name = ip_addr, fnum = 8, rnum = 9, type = bytes, occurrence = optional, opts = []},
     #field{name = clt_id, fnum = 9, rnum = 10, type = string, occurrence = optional, opts = []},
     #field{name = ev_time_bootup_in_us_auth, fnum = 10, rnum = 11, type = int64, occurrence = optional, opts = []},
     #field{name = ev_time_bootup_in_us_assoc, fnum = 11, rnum = 12, type = int64, occurrence = optional, opts = []},
     #field{name = ev_time_bootup_in_us_eapol, fnum = 12, rnum = 13, type = int64, occurrence = optional, opts = []},
     #field{name = ev_time_bootup_in_us_port_enable, fnum = 13, rnum = 14, type = int64, occurrence = optional, opts = []},
     #field{name = ev_time_bootup_in_us_first_rx, fnum = 14, rnum = 15, type = int64, occurrence = optional, opts = []},
     #field{name = ev_time_bootup_in_us_first_tx, fnum = 15, rnum = 16, type = int64, occurrence = optional, opts = []},
     #field{name = using11k, fnum = 16, rnum = 17, type = bool, occurrence = optional, opts = []},
     #field{name = using11r, fnum = 17, rnum = 18, type = bool, occurrence = optional, opts = []},
     #field{name = using11v, fnum = 18, rnum = 19, type = bool, occurrence = optional, opts = []},
     #field{name = ev_time_bootup_in_us_ip, fnum = 19, rnum = 20, type = int64, occurrence = optional, opts = []},
     #field{name = assoc_rssi, fnum = 20, rnum = 21, type = int32, occurrence = optional, opts = []}];
find_msg_def('EventReport.ClientFailureEvent') ->
    [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = ssid, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = reason_code, fnum = 4, rnum = 5, type = int32, occurrence = optional, opts = []},
     #field{name = reason_str, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}];
find_msg_def('EventReport.ClientFirstDataEvent') ->
    [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = fdata_tx_up_ts_in_us, fnum = 3, rnum = 4, type = uint64, occurrence = optional, opts = []},
     #field{name = fdata_rx_up_ts_in_us, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []}];
find_msg_def('EventReport.ClientIdEvent') ->
    [#field{name = clt_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = clt_id, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}];
find_msg_def('EventReport.ClientIpEvent') ->
    [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = ip_addr, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}];
find_msg_def('EventReport.ClientTimeoutEvent') ->
    [#field{name = sta_mac, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = session_id, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = r_code, fnum = 3, rnum = 4, type = {enum, 'CTReasonType'}, occurrence = optional, opts = []},
     #field{name = last_sent_up_ts_in_us, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []},
     #field{name = last_rcv_up_ts_in_us, fnum = 5, rnum = 6, type = uint64, occurrence = optional, opts = []}];
find_msg_def('EventReport.ClientSession') ->
    [#field{name = session_id, fnum = 1, rnum = 2, type = uint64, occurrence = required, opts = []},
     #field{name = client_assoc_event, fnum = 2, rnum = 3, type = {msg, 'EventReport.ClientAssocEvent'}, occurrence = repeated, opts = []},
     #field{name = client_auth_event, fnum = 3, rnum = 4, type = {msg, 'EventReport.ClientAuthEvent'}, occurrence = repeated, opts = []},
     #field{name = client_disconnect_event, fnum = 4, rnum = 5, type = {msg, 'EventReport.ClientDisconnectEvent'}, occurrence = repeated, opts = []},
     #field{name = client_failure_event, fnum = 5, rnum = 6, type = {msg, 'EventReport.ClientFailureEvent'}, occurrence = repeated, opts = []},
     #field{name = client_first_data_event, fnum = 6, rnum = 7, type = {msg, 'EventReport.ClientFirstDataEvent'}, occurrence = repeated, opts = []},
     #field{name = client_id_event, fnum = 7, rnum = 8, type = {msg, 'EventReport.ClientIdEvent'}, occurrence = repeated, opts = []},
     #field{name = client_ip_event, fnum = 8, rnum = 9, type = {msg, 'EventReport.ClientIpEvent'}, occurrence = repeated, opts = []},
     #field{name = client_timeout_event, fnum = 9, rnum = 10, type = {msg, 'EventReport.ClientTimeoutEvent'}, occurrence = repeated, opts = []},
     #field{name = client_connect_event, fnum = 10, rnum = 11, type = {msg, 'EventReport.ClientConnectEvent'}, occurrence = repeated, opts = []}];
find_msg_def('EventReport') -> [#field{name = client_session, fnum = 1, rnum = 2, type = {msg, 'EventReport.ClientSession'}, occurrence = repeated, opts = []}];
find_msg_def('Report') ->
    [#field{name = nodeID, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = survey, fnum = 2, rnum = 3, type = {msg, 'Survey'}, occurrence = repeated, opts = []},
     #field{name = capacity, fnum = 3, rnum = 4, type = {msg, 'Capacity'}, occurrence = repeated, opts = []},
     #field{name = neighbors, fnum = 4, rnum = 5, type = {msg, 'Neighbor'}, occurrence = repeated, opts = []},
     #field{name = clients, fnum = 5, rnum = 6, type = {msg, 'ClientReport'}, occurrence = repeated, opts = []},
     #field{name = device, fnum = 6, rnum = 7, type = {msg, 'Device'}, occurrence = repeated, opts = []},
     #field{name = bs_report, fnum = 7, rnum = 8, type = {msg, 'BSReport'}, occurrence = repeated, opts = []},
     #field{name = rssi_report, fnum = 8, rnum = 9, type = {msg, 'RssiReport'}, occurrence = repeated, opts = []},
     #field{name = video_voice_report, fnum = 9, rnum = 10, type = {msg, 'VideoVoiceReport'}, occurrence = repeated, opts = []},
     #field{name = network_probe, fnum = 101, rnum = 11, type = {msg, 'NetworkProbe'}, occurrence = repeated, opts = []},
     #field{name = event_report, fnum = 102, rnum = 12, type = {msg, 'EventReport'}, occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('RadioBandType') -> [{'BAND2G', 0}, {'BAND5G', 1}, {'BAND5GL', 2}, {'BAND5GU', 3}];
find_enum_def('SurveyType') -> [{'ON_CHANNEL', 0}, {'OFF_CHANNEL', 1}, {'FULL', 2}];
find_enum_def('NeighborType') -> [{'ONCHAN_SCAN', 0}, {'OFFCHAN_SCAN', 1}, {'FULL_SCAN', 2}];
find_enum_def('ChanWidth') ->
    [{'CHAN_WIDTH_UNKNOWN', 0}, {'CHAN_WIDTH_20MHZ', 1}, {'CHAN_WIDTH_40MHZ', 2}, {'CHAN_WIDTH_40MHZ_ABOVE', 3}, {'CHAN_WIDTH_40MHZ_BELOW', 4}, {'CHAN_WIDTH_80MHZ', 5}, {'CHAN_WIDTH_160MHZ', 6}, {'CHAN_WIDTH_80_PLUS_80MHZ', 7}];
find_enum_def('WmmAc') -> [{'WMM_AC_VO', 1}, {'WMM_AC_VI', 2}, {'WMM_AC_BE', 3}, {'WMM_AC_BK', 4}];
find_enum_def('BSEventType') ->
    [{'PROBE', 0},
     {'CONNECT', 1},
     {'DISCONNECT', 2},
     {'BACKOFF', 3},
     {'ACTIVITY', 4},
     {'OVERRUN', 5},
     {'BAND_STEERING_ATTEMPT', 6},
     {'CLIENT_STEERING_ATTEMPT', 7},
     {'CLIENT_STEERING_STARTED', 8},
     {'CLIENT_STEERING_DISABLED', 9},
     {'CLIENT_STEERING_EXPIRED', 10},
     {'CLIENT_STEERING_FAILED', 11},
     {'AUTH_BLOCK', 12},
     {'CLIENT_KICKED', 13},
     {'CLIENT_BS_BTM', 14},
     {'CLIENT_STICKY_BTM', 15},
     {'CLIENT_BTM', 16},
     {'CLIENT_CAPABILITIES', 17},
     {'CLIENT_BS_BTM_RETRY', 18},
     {'CLIENT_STICKY_BTM_RETRY', 19},
     {'CLIENT_BTM_RETRY', 20},
     {'CLIENT_RRM_BCN_RPT', 21},
     {'CLIENT_BS_KICK', 22},
     {'CLIENT_STICKY_KICK', 23},
     {'CLIENT_SPECULATIVE_KICK', 24},
     {'CLIENT_DIRECTED_KICK', 25},
     {'CLIENT_GHOST_DEVICE_KICK', 26}];
find_enum_def('EventType') -> [{'CLIENT_ASSOC', 0}, {'CLIENT_AUTH', 1}, {'CLIENT_DISCONNECT', 2}, {'CLIENT_FAILURE', 3}, {'CLIENT_FIRST_DATA', 4}, {'CLIEND_ID', 5}, {'CLIENT_IP', 6}, {'CLIENT_TIMEOUT', 7}];
find_enum_def('DeviceType') -> [{'DEV_AP', 0}, {'DEV_STA', 1}];
find_enum_def('FrameType') -> [{'FT_DEAUTH', 0}, {'FT_DISASSOC', 1}];
find_enum_def('DisconnectSrc') -> [{'LOCAL', 0}, {'REMOTE', 1}];
find_enum_def('AssocType') -> [{'ASSOC', 0}, {'REASSOC', 1}];
find_enum_def('DisconnectType') -> [{'DISASSOC', 0}, {'DEAUTH', 1}];
find_enum_def('SecurityType') -> [{'SEC_OPEN', 0}, {'SEC_RADIUS', 1}, {'SEC_PSK', 2}];
find_enum_def('ReportType') -> [{'RAW', 0}, {'AVERAGE', 1}, {'HISTOGRAM', 2}, {'PERCENTILE', 3}, {'DIFF', 4}];
find_enum_def('FsType') -> [{'FS_TYPE_ROOTFS', 0}, {'FS_TYPE_TMPFS', 1}];
find_enum_def('CTReasonType') -> [{'CTR_IDLE_TOO_LONG', 0}, {'CTR_PROBE_FAIL', 1}];
find_enum_def('DiffType') -> [{'ADDED', 0}, {'REMOVED', 1}];
find_enum_def('StreamingVideoType') -> [{'UNKNOWN', 0}, {'NETFLIX', 1}, {'YOUTUBE', 2}, {'PLEX', 3}];
find_enum_def('RssiPeer.RssiSource') -> [{'CLIENT', 0}, {'PROBE', 1}, {'NEIGHBOR', 2}];
find_enum_def('StateUpDown') -> [{'SUD_down', 0}, {'SUD_up', 1}, {'SUD_error', 2}];
find_enum_def('RtpFlowStats.RtpFlowDirection') -> [{'RTP_UPSTREAM', 0}, {'RTP_DOWNSTREAM', 1}];
find_enum_def('RtpFlowStats.RtpFlowType') -> [{'RTP_VOICE', 0}, {'RTP_VIDEO', 1}];
find_enum_def('CallStop.CallStopReason') -> [{'BYE_OK', 0}, {'CALL_DROPPED', 1}];
find_enum_def('CallReport.CallReportReason') -> [{'ROAMED_FROM', 0}, {'ROAMED_TO', 1}, {'GOT_PUBLISH', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('RadioBandType', Value) -> enum_symbol_by_value_RadioBandType(Value);
enum_symbol_by_value('SurveyType', Value) -> enum_symbol_by_value_SurveyType(Value);
enum_symbol_by_value('NeighborType', Value) -> enum_symbol_by_value_NeighborType(Value);
enum_symbol_by_value('ChanWidth', Value) -> enum_symbol_by_value_ChanWidth(Value);
enum_symbol_by_value('WmmAc', Value) -> enum_symbol_by_value_WmmAc(Value);
enum_symbol_by_value('BSEventType', Value) -> enum_symbol_by_value_BSEventType(Value);
enum_symbol_by_value('EventType', Value) -> enum_symbol_by_value_EventType(Value);
enum_symbol_by_value('DeviceType', Value) -> enum_symbol_by_value_DeviceType(Value);
enum_symbol_by_value('FrameType', Value) -> enum_symbol_by_value_FrameType(Value);
enum_symbol_by_value('DisconnectSrc', Value) -> enum_symbol_by_value_DisconnectSrc(Value);
enum_symbol_by_value('AssocType', Value) -> enum_symbol_by_value_AssocType(Value);
enum_symbol_by_value('DisconnectType', Value) -> enum_symbol_by_value_DisconnectType(Value);
enum_symbol_by_value('SecurityType', Value) -> enum_symbol_by_value_SecurityType(Value);
enum_symbol_by_value('ReportType', Value) -> enum_symbol_by_value_ReportType(Value);
enum_symbol_by_value('FsType', Value) -> enum_symbol_by_value_FsType(Value);
enum_symbol_by_value('CTReasonType', Value) -> enum_symbol_by_value_CTReasonType(Value);
enum_symbol_by_value('DiffType', Value) -> enum_symbol_by_value_DiffType(Value);
enum_symbol_by_value('StreamingVideoType', Value) -> enum_symbol_by_value_StreamingVideoType(Value);
enum_symbol_by_value('RssiPeer.RssiSource', Value) -> 'enum_symbol_by_value_RssiPeer.RssiSource'(Value);
enum_symbol_by_value('StateUpDown', Value) -> enum_symbol_by_value_StateUpDown(Value);
enum_symbol_by_value('RtpFlowStats.RtpFlowDirection', Value) -> 'enum_symbol_by_value_RtpFlowStats.RtpFlowDirection'(Value);
enum_symbol_by_value('RtpFlowStats.RtpFlowType', Value) -> 'enum_symbol_by_value_RtpFlowStats.RtpFlowType'(Value);
enum_symbol_by_value('CallStop.CallStopReason', Value) -> 'enum_symbol_by_value_CallStop.CallStopReason'(Value);
enum_symbol_by_value('CallReport.CallReportReason', Value) -> 'enum_symbol_by_value_CallReport.CallReportReason'(Value).


enum_value_by_symbol('RadioBandType', Sym) -> enum_value_by_symbol_RadioBandType(Sym);
enum_value_by_symbol('SurveyType', Sym) -> enum_value_by_symbol_SurveyType(Sym);
enum_value_by_symbol('NeighborType', Sym) -> enum_value_by_symbol_NeighborType(Sym);
enum_value_by_symbol('ChanWidth', Sym) -> enum_value_by_symbol_ChanWidth(Sym);
enum_value_by_symbol('WmmAc', Sym) -> enum_value_by_symbol_WmmAc(Sym);
enum_value_by_symbol('BSEventType', Sym) -> enum_value_by_symbol_BSEventType(Sym);
enum_value_by_symbol('EventType', Sym) -> enum_value_by_symbol_EventType(Sym);
enum_value_by_symbol('DeviceType', Sym) -> enum_value_by_symbol_DeviceType(Sym);
enum_value_by_symbol('FrameType', Sym) -> enum_value_by_symbol_FrameType(Sym);
enum_value_by_symbol('DisconnectSrc', Sym) -> enum_value_by_symbol_DisconnectSrc(Sym);
enum_value_by_symbol('AssocType', Sym) -> enum_value_by_symbol_AssocType(Sym);
enum_value_by_symbol('DisconnectType', Sym) -> enum_value_by_symbol_DisconnectType(Sym);
enum_value_by_symbol('SecurityType', Sym) -> enum_value_by_symbol_SecurityType(Sym);
enum_value_by_symbol('ReportType', Sym) -> enum_value_by_symbol_ReportType(Sym);
enum_value_by_symbol('FsType', Sym) -> enum_value_by_symbol_FsType(Sym);
enum_value_by_symbol('CTReasonType', Sym) -> enum_value_by_symbol_CTReasonType(Sym);
enum_value_by_symbol('DiffType', Sym) -> enum_value_by_symbol_DiffType(Sym);
enum_value_by_symbol('StreamingVideoType', Sym) -> enum_value_by_symbol_StreamingVideoType(Sym);
enum_value_by_symbol('RssiPeer.RssiSource', Sym) -> 'enum_value_by_symbol_RssiPeer.RssiSource'(Sym);
enum_value_by_symbol('StateUpDown', Sym) -> enum_value_by_symbol_StateUpDown(Sym);
enum_value_by_symbol('RtpFlowStats.RtpFlowDirection', Sym) -> 'enum_value_by_symbol_RtpFlowStats.RtpFlowDirection'(Sym);
enum_value_by_symbol('RtpFlowStats.RtpFlowType', Sym) -> 'enum_value_by_symbol_RtpFlowStats.RtpFlowType'(Sym);
enum_value_by_symbol('CallStop.CallStopReason', Sym) -> 'enum_value_by_symbol_CallStop.CallStopReason'(Sym);
enum_value_by_symbol('CallReport.CallReportReason', Sym) -> 'enum_value_by_symbol_CallReport.CallReportReason'(Sym).


enum_symbol_by_value_RadioBandType(0) -> 'BAND2G';
enum_symbol_by_value_RadioBandType(1) -> 'BAND5G';
enum_symbol_by_value_RadioBandType(2) -> 'BAND5GL';
enum_symbol_by_value_RadioBandType(3) -> 'BAND5GU'.


enum_value_by_symbol_RadioBandType('BAND2G') -> 0;
enum_value_by_symbol_RadioBandType('BAND5G') -> 1;
enum_value_by_symbol_RadioBandType('BAND5GL') -> 2;
enum_value_by_symbol_RadioBandType('BAND5GU') -> 3.

enum_symbol_by_value_SurveyType(0) -> 'ON_CHANNEL';
enum_symbol_by_value_SurveyType(1) -> 'OFF_CHANNEL';
enum_symbol_by_value_SurveyType(2) -> 'FULL'.


enum_value_by_symbol_SurveyType('ON_CHANNEL') -> 0;
enum_value_by_symbol_SurveyType('OFF_CHANNEL') -> 1;
enum_value_by_symbol_SurveyType('FULL') -> 2.

enum_symbol_by_value_NeighborType(0) -> 'ONCHAN_SCAN';
enum_symbol_by_value_NeighborType(1) -> 'OFFCHAN_SCAN';
enum_symbol_by_value_NeighborType(2) -> 'FULL_SCAN'.


enum_value_by_symbol_NeighborType('ONCHAN_SCAN') -> 0;
enum_value_by_symbol_NeighborType('OFFCHAN_SCAN') -> 1;
enum_value_by_symbol_NeighborType('FULL_SCAN') -> 2.

enum_symbol_by_value_ChanWidth(0) -> 'CHAN_WIDTH_UNKNOWN';
enum_symbol_by_value_ChanWidth(1) -> 'CHAN_WIDTH_20MHZ';
enum_symbol_by_value_ChanWidth(2) -> 'CHAN_WIDTH_40MHZ';
enum_symbol_by_value_ChanWidth(3) -> 'CHAN_WIDTH_40MHZ_ABOVE';
enum_symbol_by_value_ChanWidth(4) -> 'CHAN_WIDTH_40MHZ_BELOW';
enum_symbol_by_value_ChanWidth(5) -> 'CHAN_WIDTH_80MHZ';
enum_symbol_by_value_ChanWidth(6) -> 'CHAN_WIDTH_160MHZ';
enum_symbol_by_value_ChanWidth(7) -> 'CHAN_WIDTH_80_PLUS_80MHZ'.


enum_value_by_symbol_ChanWidth('CHAN_WIDTH_UNKNOWN') -> 0;
enum_value_by_symbol_ChanWidth('CHAN_WIDTH_20MHZ') -> 1;
enum_value_by_symbol_ChanWidth('CHAN_WIDTH_40MHZ') -> 2;
enum_value_by_symbol_ChanWidth('CHAN_WIDTH_40MHZ_ABOVE') -> 3;
enum_value_by_symbol_ChanWidth('CHAN_WIDTH_40MHZ_BELOW') -> 4;
enum_value_by_symbol_ChanWidth('CHAN_WIDTH_80MHZ') -> 5;
enum_value_by_symbol_ChanWidth('CHAN_WIDTH_160MHZ') -> 6;
enum_value_by_symbol_ChanWidth('CHAN_WIDTH_80_PLUS_80MHZ') -> 7.

enum_symbol_by_value_WmmAc(1) -> 'WMM_AC_VO';
enum_symbol_by_value_WmmAc(2) -> 'WMM_AC_VI';
enum_symbol_by_value_WmmAc(3) -> 'WMM_AC_BE';
enum_symbol_by_value_WmmAc(4) -> 'WMM_AC_BK'.


enum_value_by_symbol_WmmAc('WMM_AC_VO') -> 1;
enum_value_by_symbol_WmmAc('WMM_AC_VI') -> 2;
enum_value_by_symbol_WmmAc('WMM_AC_BE') -> 3;
enum_value_by_symbol_WmmAc('WMM_AC_BK') -> 4.

enum_symbol_by_value_BSEventType(0) -> 'PROBE';
enum_symbol_by_value_BSEventType(1) -> 'CONNECT';
enum_symbol_by_value_BSEventType(2) -> 'DISCONNECT';
enum_symbol_by_value_BSEventType(3) -> 'BACKOFF';
enum_symbol_by_value_BSEventType(4) -> 'ACTIVITY';
enum_symbol_by_value_BSEventType(5) -> 'OVERRUN';
enum_symbol_by_value_BSEventType(6) -> 'BAND_STEERING_ATTEMPT';
enum_symbol_by_value_BSEventType(7) -> 'CLIENT_STEERING_ATTEMPT';
enum_symbol_by_value_BSEventType(8) -> 'CLIENT_STEERING_STARTED';
enum_symbol_by_value_BSEventType(9) -> 'CLIENT_STEERING_DISABLED';
enum_symbol_by_value_BSEventType(10) -> 'CLIENT_STEERING_EXPIRED';
enum_symbol_by_value_BSEventType(11) -> 'CLIENT_STEERING_FAILED';
enum_symbol_by_value_BSEventType(12) -> 'AUTH_BLOCK';
enum_symbol_by_value_BSEventType(13) -> 'CLIENT_KICKED';
enum_symbol_by_value_BSEventType(14) -> 'CLIENT_BS_BTM';
enum_symbol_by_value_BSEventType(15) -> 'CLIENT_STICKY_BTM';
enum_symbol_by_value_BSEventType(16) -> 'CLIENT_BTM';
enum_symbol_by_value_BSEventType(17) -> 'CLIENT_CAPABILITIES';
enum_symbol_by_value_BSEventType(18) -> 'CLIENT_BS_BTM_RETRY';
enum_symbol_by_value_BSEventType(19) -> 'CLIENT_STICKY_BTM_RETRY';
enum_symbol_by_value_BSEventType(20) -> 'CLIENT_BTM_RETRY';
enum_symbol_by_value_BSEventType(21) -> 'CLIENT_RRM_BCN_RPT';
enum_symbol_by_value_BSEventType(22) -> 'CLIENT_BS_KICK';
enum_symbol_by_value_BSEventType(23) -> 'CLIENT_STICKY_KICK';
enum_symbol_by_value_BSEventType(24) -> 'CLIENT_SPECULATIVE_KICK';
enum_symbol_by_value_BSEventType(25) -> 'CLIENT_DIRECTED_KICK';
enum_symbol_by_value_BSEventType(26) -> 'CLIENT_GHOST_DEVICE_KICK'.


enum_value_by_symbol_BSEventType('PROBE') -> 0;
enum_value_by_symbol_BSEventType('CONNECT') -> 1;
enum_value_by_symbol_BSEventType('DISCONNECT') -> 2;
enum_value_by_symbol_BSEventType('BACKOFF') -> 3;
enum_value_by_symbol_BSEventType('ACTIVITY') -> 4;
enum_value_by_symbol_BSEventType('OVERRUN') -> 5;
enum_value_by_symbol_BSEventType('BAND_STEERING_ATTEMPT') -> 6;
enum_value_by_symbol_BSEventType('CLIENT_STEERING_ATTEMPT') -> 7;
enum_value_by_symbol_BSEventType('CLIENT_STEERING_STARTED') -> 8;
enum_value_by_symbol_BSEventType('CLIENT_STEERING_DISABLED') -> 9;
enum_value_by_symbol_BSEventType('CLIENT_STEERING_EXPIRED') -> 10;
enum_value_by_symbol_BSEventType('CLIENT_STEERING_FAILED') -> 11;
enum_value_by_symbol_BSEventType('AUTH_BLOCK') -> 12;
enum_value_by_symbol_BSEventType('CLIENT_KICKED') -> 13;
enum_value_by_symbol_BSEventType('CLIENT_BS_BTM') -> 14;
enum_value_by_symbol_BSEventType('CLIENT_STICKY_BTM') -> 15;
enum_value_by_symbol_BSEventType('CLIENT_BTM') -> 16;
enum_value_by_symbol_BSEventType('CLIENT_CAPABILITIES') -> 17;
enum_value_by_symbol_BSEventType('CLIENT_BS_BTM_RETRY') -> 18;
enum_value_by_symbol_BSEventType('CLIENT_STICKY_BTM_RETRY') -> 19;
enum_value_by_symbol_BSEventType('CLIENT_BTM_RETRY') -> 20;
enum_value_by_symbol_BSEventType('CLIENT_RRM_BCN_RPT') -> 21;
enum_value_by_symbol_BSEventType('CLIENT_BS_KICK') -> 22;
enum_value_by_symbol_BSEventType('CLIENT_STICKY_KICK') -> 23;
enum_value_by_symbol_BSEventType('CLIENT_SPECULATIVE_KICK') -> 24;
enum_value_by_symbol_BSEventType('CLIENT_DIRECTED_KICK') -> 25;
enum_value_by_symbol_BSEventType('CLIENT_GHOST_DEVICE_KICK') -> 26.

enum_symbol_by_value_EventType(0) -> 'CLIENT_ASSOC';
enum_symbol_by_value_EventType(1) -> 'CLIENT_AUTH';
enum_symbol_by_value_EventType(2) -> 'CLIENT_DISCONNECT';
enum_symbol_by_value_EventType(3) -> 'CLIENT_FAILURE';
enum_symbol_by_value_EventType(4) -> 'CLIENT_FIRST_DATA';
enum_symbol_by_value_EventType(5) -> 'CLIEND_ID';
enum_symbol_by_value_EventType(6) -> 'CLIENT_IP';
enum_symbol_by_value_EventType(7) -> 'CLIENT_TIMEOUT'.


enum_value_by_symbol_EventType('CLIENT_ASSOC') -> 0;
enum_value_by_symbol_EventType('CLIENT_AUTH') -> 1;
enum_value_by_symbol_EventType('CLIENT_DISCONNECT') -> 2;
enum_value_by_symbol_EventType('CLIENT_FAILURE') -> 3;
enum_value_by_symbol_EventType('CLIENT_FIRST_DATA') -> 4;
enum_value_by_symbol_EventType('CLIEND_ID') -> 5;
enum_value_by_symbol_EventType('CLIENT_IP') -> 6;
enum_value_by_symbol_EventType('CLIENT_TIMEOUT') -> 7.

enum_symbol_by_value_DeviceType(0) -> 'DEV_AP';
enum_symbol_by_value_DeviceType(1) -> 'DEV_STA'.


enum_value_by_symbol_DeviceType('DEV_AP') -> 0;
enum_value_by_symbol_DeviceType('DEV_STA') -> 1.

enum_symbol_by_value_FrameType(0) -> 'FT_DEAUTH';
enum_symbol_by_value_FrameType(1) -> 'FT_DISASSOC'.


enum_value_by_symbol_FrameType('FT_DEAUTH') -> 0;
enum_value_by_symbol_FrameType('FT_DISASSOC') -> 1.

enum_symbol_by_value_DisconnectSrc(0) -> 'LOCAL';
enum_symbol_by_value_DisconnectSrc(1) -> 'REMOTE'.


enum_value_by_symbol_DisconnectSrc('LOCAL') -> 0;
enum_value_by_symbol_DisconnectSrc('REMOTE') -> 1.

enum_symbol_by_value_AssocType(0) -> 'ASSOC';
enum_symbol_by_value_AssocType(1) -> 'REASSOC'.


enum_value_by_symbol_AssocType('ASSOC') -> 0;
enum_value_by_symbol_AssocType('REASSOC') -> 1.

enum_symbol_by_value_DisconnectType(0) -> 'DISASSOC';
enum_symbol_by_value_DisconnectType(1) -> 'DEAUTH'.


enum_value_by_symbol_DisconnectType('DISASSOC') -> 0;
enum_value_by_symbol_DisconnectType('DEAUTH') -> 1.

enum_symbol_by_value_SecurityType(0) -> 'SEC_OPEN';
enum_symbol_by_value_SecurityType(1) -> 'SEC_RADIUS';
enum_symbol_by_value_SecurityType(2) -> 'SEC_PSK'.


enum_value_by_symbol_SecurityType('SEC_OPEN') -> 0;
enum_value_by_symbol_SecurityType('SEC_RADIUS') -> 1;
enum_value_by_symbol_SecurityType('SEC_PSK') -> 2.

enum_symbol_by_value_ReportType(0) -> 'RAW';
enum_symbol_by_value_ReportType(1) -> 'AVERAGE';
enum_symbol_by_value_ReportType(2) -> 'HISTOGRAM';
enum_symbol_by_value_ReportType(3) -> 'PERCENTILE';
enum_symbol_by_value_ReportType(4) -> 'DIFF'.


enum_value_by_symbol_ReportType('RAW') -> 0;
enum_value_by_symbol_ReportType('AVERAGE') -> 1;
enum_value_by_symbol_ReportType('HISTOGRAM') -> 2;
enum_value_by_symbol_ReportType('PERCENTILE') -> 3;
enum_value_by_symbol_ReportType('DIFF') -> 4.

enum_symbol_by_value_FsType(0) -> 'FS_TYPE_ROOTFS';
enum_symbol_by_value_FsType(1) -> 'FS_TYPE_TMPFS'.


enum_value_by_symbol_FsType('FS_TYPE_ROOTFS') -> 0;
enum_value_by_symbol_FsType('FS_TYPE_TMPFS') -> 1.

enum_symbol_by_value_CTReasonType(0) -> 'CTR_IDLE_TOO_LONG';
enum_symbol_by_value_CTReasonType(1) -> 'CTR_PROBE_FAIL'.


enum_value_by_symbol_CTReasonType('CTR_IDLE_TOO_LONG') -> 0;
enum_value_by_symbol_CTReasonType('CTR_PROBE_FAIL') -> 1.

enum_symbol_by_value_DiffType(0) -> 'ADDED';
enum_symbol_by_value_DiffType(1) -> 'REMOVED'.


enum_value_by_symbol_DiffType('ADDED') -> 0;
enum_value_by_symbol_DiffType('REMOVED') -> 1.

enum_symbol_by_value_StreamingVideoType(0) -> 'UNKNOWN';
enum_symbol_by_value_StreamingVideoType(1) -> 'NETFLIX';
enum_symbol_by_value_StreamingVideoType(2) -> 'YOUTUBE';
enum_symbol_by_value_StreamingVideoType(3) -> 'PLEX'.


enum_value_by_symbol_StreamingVideoType('UNKNOWN') -> 0;
enum_value_by_symbol_StreamingVideoType('NETFLIX') -> 1;
enum_value_by_symbol_StreamingVideoType('YOUTUBE') -> 2;
enum_value_by_symbol_StreamingVideoType('PLEX') -> 3.

'enum_symbol_by_value_RssiPeer.RssiSource'(0) -> 'CLIENT';
'enum_symbol_by_value_RssiPeer.RssiSource'(1) -> 'PROBE';
'enum_symbol_by_value_RssiPeer.RssiSource'(2) -> 'NEIGHBOR'.


'enum_value_by_symbol_RssiPeer.RssiSource'('CLIENT') -> 0;
'enum_value_by_symbol_RssiPeer.RssiSource'('PROBE') -> 1;
'enum_value_by_symbol_RssiPeer.RssiSource'('NEIGHBOR') -> 2.

enum_symbol_by_value_StateUpDown(0) -> 'SUD_down';
enum_symbol_by_value_StateUpDown(1) -> 'SUD_up';
enum_symbol_by_value_StateUpDown(2) -> 'SUD_error'.


enum_value_by_symbol_StateUpDown('SUD_down') -> 0;
enum_value_by_symbol_StateUpDown('SUD_up') -> 1;
enum_value_by_symbol_StateUpDown('SUD_error') -> 2.

'enum_symbol_by_value_RtpFlowStats.RtpFlowDirection'(0) -> 'RTP_UPSTREAM';
'enum_symbol_by_value_RtpFlowStats.RtpFlowDirection'(1) -> 'RTP_DOWNSTREAM'.


'enum_value_by_symbol_RtpFlowStats.RtpFlowDirection'('RTP_UPSTREAM') -> 0;
'enum_value_by_symbol_RtpFlowStats.RtpFlowDirection'('RTP_DOWNSTREAM') -> 1.

'enum_symbol_by_value_RtpFlowStats.RtpFlowType'(0) -> 'RTP_VOICE';
'enum_symbol_by_value_RtpFlowStats.RtpFlowType'(1) -> 'RTP_VIDEO'.


'enum_value_by_symbol_RtpFlowStats.RtpFlowType'('RTP_VOICE') -> 0;
'enum_value_by_symbol_RtpFlowStats.RtpFlowType'('RTP_VIDEO') -> 1.

'enum_symbol_by_value_CallStop.CallStopReason'(0) -> 'BYE_OK';
'enum_symbol_by_value_CallStop.CallStopReason'(1) -> 'CALL_DROPPED'.


'enum_value_by_symbol_CallStop.CallStopReason'('BYE_OK') -> 0;
'enum_value_by_symbol_CallStop.CallStopReason'('CALL_DROPPED') -> 1.

'enum_symbol_by_value_CallReport.CallReportReason'(0) -> 'ROAMED_FROM';
'enum_symbol_by_value_CallReport.CallReportReason'(1) -> 'ROAMED_TO';
'enum_symbol_by_value_CallReport.CallReportReason'(2) -> 'GOT_PUBLISH'.


'enum_value_by_symbol_CallReport.CallReportReason'('ROAMED_FROM') -> 0;
'enum_value_by_symbol_CallReport.CallReportReason'('ROAMED_TO') -> 1;
'enum_value_by_symbol_CallReport.CallReportReason'('GOT_PUBLISH') -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"sts.AvgType">>) -> 'AvgType';
fqbin_to_msg_name(<<"sts.Neighbor.NeighborBss">>) -> 'Neighbor.NeighborBss';
fqbin_to_msg_name(<<"sts.Neighbor">>) -> 'Neighbor';
fqbin_to_msg_name(<<"sts.Client.Stats">>) -> 'Client.Stats';
fqbin_to_msg_name(<<"sts.Client.RxStats">>) -> 'Client.RxStats';
fqbin_to_msg_name(<<"sts.Client.RxStats.ChainRSSI">>) -> 'Client.RxStats.ChainRSSI';
fqbin_to_msg_name(<<"sts.Client.TxStats">>) -> 'Client.TxStats';
fqbin_to_msg_name(<<"sts.Client.TidStats">>) -> 'Client.TidStats';
fqbin_to_msg_name(<<"sts.Client.TidStats.Sojourn">>) -> 'Client.TidStats.Sojourn';
fqbin_to_msg_name(<<"sts.Client">>) -> 'Client';
fqbin_to_msg_name(<<"sts.ClientReport">>) -> 'ClientReport';
fqbin_to_msg_name(<<"sts.Survey.SurveySample">>) -> 'Survey.SurveySample';
fqbin_to_msg_name(<<"sts.Survey.SurveyAvg">>) -> 'Survey.SurveyAvg';
fqbin_to_msg_name(<<"sts.Survey">>) -> 'Survey';
fqbin_to_msg_name(<<"sts.Capacity.QueueSample">>) -> 'Capacity.QueueSample';
fqbin_to_msg_name(<<"sts.Capacity">>) -> 'Capacity';
fqbin_to_msg_name(<<"sts.Device.LoadAvg">>) -> 'Device.LoadAvg';
fqbin_to_msg_name(<<"sts.Device.RadioTemp">>) -> 'Device.RadioTemp';
fqbin_to_msg_name(<<"sts.Device.Thermal">>) -> 'Device.Thermal';
fqbin_to_msg_name(<<"sts.Device.Thermal.RadioTxChainMask">>) -> 'Device.Thermal.RadioTxChainMask';
fqbin_to_msg_name(<<"sts.Device.MemUtil">>) -> 'Device.MemUtil';
fqbin_to_msg_name(<<"sts.Device.FsUtil">>) -> 'Device.FsUtil';
fqbin_to_msg_name(<<"sts.Device.CpuUtil">>) -> 'Device.CpuUtil';
fqbin_to_msg_name(<<"sts.Device.PerProcessUtil">>) -> 'Device.PerProcessUtil';
fqbin_to_msg_name(<<"sts.Device">>) -> 'Device';
fqbin_to_msg_name(<<"sts.BSClient.BSEvent">>) -> 'BSClient.BSEvent';
fqbin_to_msg_name(<<"sts.BSClient.BSBandReport">>) -> 'BSClient.BSBandReport';
fqbin_to_msg_name(<<"sts.BSClient">>) -> 'BSClient';
fqbin_to_msg_name(<<"sts.BSReport">>) -> 'BSReport';
fqbin_to_msg_name(<<"sts.RssiPeer.RssiSample">>) -> 'RssiPeer.RssiSample';
fqbin_to_msg_name(<<"sts.RssiPeer">>) -> 'RssiPeer';
fqbin_to_msg_name(<<"sts.RssiReport">>) -> 'RssiReport';
fqbin_to_msg_name(<<"sts.DNSProbeMetric">>) -> 'DNSProbeMetric';
fqbin_to_msg_name(<<"sts.VLANMetrics">>) -> 'VLANMetrics';
fqbin_to_msg_name(<<"sts.RADIUSMetrics">>) -> 'RADIUSMetrics';
fqbin_to_msg_name(<<"sts.NetworkProbe">>) -> 'NetworkProbe';
fqbin_to_msg_name(<<"sts.RtpFlowStats">>) -> 'RtpFlowStats';
fqbin_to_msg_name(<<"sts.CallStart">>) -> 'CallStart';
fqbin_to_msg_name(<<"sts.CallStop">>) -> 'CallStop';
fqbin_to_msg_name(<<"sts.CallReport">>) -> 'CallReport';
fqbin_to_msg_name(<<"sts.StreamingVideoDetectPattern">>) -> 'StreamingVideoDetectPattern';
fqbin_to_msg_name(<<"sts.StreamingVideoSessionStart">>) -> 'StreamingVideoSessionStart';
fqbin_to_msg_name(<<"sts.StreamingVideoServerDetected">>) -> 'StreamingVideoServerDetected';
fqbin_to_msg_name(<<"sts.StreamingVideoStop">>) -> 'StreamingVideoStop';
fqbin_to_msg_name(<<"sts.VideoVoiceReport">>) -> 'VideoVoiceReport';
fqbin_to_msg_name(<<"sts.EventReport.ClientAssocEvent">>) -> 'EventReport.ClientAssocEvent';
fqbin_to_msg_name(<<"sts.EventReport.ClientAuthEvent">>) -> 'EventReport.ClientAuthEvent';
fqbin_to_msg_name(<<"sts.EventReport.ClientDisconnectEvent">>) -> 'EventReport.ClientDisconnectEvent';
fqbin_to_msg_name(<<"sts.EventReport.ClientConnectEvent">>) -> 'EventReport.ClientConnectEvent';
fqbin_to_msg_name(<<"sts.EventReport.ClientFailureEvent">>) -> 'EventReport.ClientFailureEvent';
fqbin_to_msg_name(<<"sts.EventReport.ClientFirstDataEvent">>) -> 'EventReport.ClientFirstDataEvent';
fqbin_to_msg_name(<<"sts.EventReport.ClientIdEvent">>) -> 'EventReport.ClientIdEvent';
fqbin_to_msg_name(<<"sts.EventReport.ClientIpEvent">>) -> 'EventReport.ClientIpEvent';
fqbin_to_msg_name(<<"sts.EventReport.ClientTimeoutEvent">>) -> 'EventReport.ClientTimeoutEvent';
fqbin_to_msg_name(<<"sts.EventReport.ClientSession">>) -> 'EventReport.ClientSession';
fqbin_to_msg_name(<<"sts.EventReport">>) -> 'EventReport';
fqbin_to_msg_name(<<"sts.Report">>) -> 'Report';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('AvgType') -> <<"sts.AvgType">>;
msg_name_to_fqbin('Neighbor.NeighborBss') -> <<"sts.Neighbor.NeighborBss">>;
msg_name_to_fqbin('Neighbor') -> <<"sts.Neighbor">>;
msg_name_to_fqbin('Client.Stats') -> <<"sts.Client.Stats">>;
msg_name_to_fqbin('Client.RxStats') -> <<"sts.Client.RxStats">>;
msg_name_to_fqbin('Client.RxStats.ChainRSSI') -> <<"sts.Client.RxStats.ChainRSSI">>;
msg_name_to_fqbin('Client.TxStats') -> <<"sts.Client.TxStats">>;
msg_name_to_fqbin('Client.TidStats') -> <<"sts.Client.TidStats">>;
msg_name_to_fqbin('Client.TidStats.Sojourn') -> <<"sts.Client.TidStats.Sojourn">>;
msg_name_to_fqbin('Client') -> <<"sts.Client">>;
msg_name_to_fqbin('ClientReport') -> <<"sts.ClientReport">>;
msg_name_to_fqbin('Survey.SurveySample') -> <<"sts.Survey.SurveySample">>;
msg_name_to_fqbin('Survey.SurveyAvg') -> <<"sts.Survey.SurveyAvg">>;
msg_name_to_fqbin('Survey') -> <<"sts.Survey">>;
msg_name_to_fqbin('Capacity.QueueSample') -> <<"sts.Capacity.QueueSample">>;
msg_name_to_fqbin('Capacity') -> <<"sts.Capacity">>;
msg_name_to_fqbin('Device.LoadAvg') -> <<"sts.Device.LoadAvg">>;
msg_name_to_fqbin('Device.RadioTemp') -> <<"sts.Device.RadioTemp">>;
msg_name_to_fqbin('Device.Thermal') -> <<"sts.Device.Thermal">>;
msg_name_to_fqbin('Device.Thermal.RadioTxChainMask') -> <<"sts.Device.Thermal.RadioTxChainMask">>;
msg_name_to_fqbin('Device.MemUtil') -> <<"sts.Device.MemUtil">>;
msg_name_to_fqbin('Device.FsUtil') -> <<"sts.Device.FsUtil">>;
msg_name_to_fqbin('Device.CpuUtil') -> <<"sts.Device.CpuUtil">>;
msg_name_to_fqbin('Device.PerProcessUtil') -> <<"sts.Device.PerProcessUtil">>;
msg_name_to_fqbin('Device') -> <<"sts.Device">>;
msg_name_to_fqbin('BSClient.BSEvent') -> <<"sts.BSClient.BSEvent">>;
msg_name_to_fqbin('BSClient.BSBandReport') -> <<"sts.BSClient.BSBandReport">>;
msg_name_to_fqbin('BSClient') -> <<"sts.BSClient">>;
msg_name_to_fqbin('BSReport') -> <<"sts.BSReport">>;
msg_name_to_fqbin('RssiPeer.RssiSample') -> <<"sts.RssiPeer.RssiSample">>;
msg_name_to_fqbin('RssiPeer') -> <<"sts.RssiPeer">>;
msg_name_to_fqbin('RssiReport') -> <<"sts.RssiReport">>;
msg_name_to_fqbin('DNSProbeMetric') -> <<"sts.DNSProbeMetric">>;
msg_name_to_fqbin('VLANMetrics') -> <<"sts.VLANMetrics">>;
msg_name_to_fqbin('RADIUSMetrics') -> <<"sts.RADIUSMetrics">>;
msg_name_to_fqbin('NetworkProbe') -> <<"sts.NetworkProbe">>;
msg_name_to_fqbin('RtpFlowStats') -> <<"sts.RtpFlowStats">>;
msg_name_to_fqbin('CallStart') -> <<"sts.CallStart">>;
msg_name_to_fqbin('CallStop') -> <<"sts.CallStop">>;
msg_name_to_fqbin('CallReport') -> <<"sts.CallReport">>;
msg_name_to_fqbin('StreamingVideoDetectPattern') -> <<"sts.StreamingVideoDetectPattern">>;
msg_name_to_fqbin('StreamingVideoSessionStart') -> <<"sts.StreamingVideoSessionStart">>;
msg_name_to_fqbin('StreamingVideoServerDetected') -> <<"sts.StreamingVideoServerDetected">>;
msg_name_to_fqbin('StreamingVideoStop') -> <<"sts.StreamingVideoStop">>;
msg_name_to_fqbin('VideoVoiceReport') -> <<"sts.VideoVoiceReport">>;
msg_name_to_fqbin('EventReport.ClientAssocEvent') -> <<"sts.EventReport.ClientAssocEvent">>;
msg_name_to_fqbin('EventReport.ClientAuthEvent') -> <<"sts.EventReport.ClientAuthEvent">>;
msg_name_to_fqbin('EventReport.ClientDisconnectEvent') -> <<"sts.EventReport.ClientDisconnectEvent">>;
msg_name_to_fqbin('EventReport.ClientConnectEvent') -> <<"sts.EventReport.ClientConnectEvent">>;
msg_name_to_fqbin('EventReport.ClientFailureEvent') -> <<"sts.EventReport.ClientFailureEvent">>;
msg_name_to_fqbin('EventReport.ClientFirstDataEvent') -> <<"sts.EventReport.ClientFirstDataEvent">>;
msg_name_to_fqbin('EventReport.ClientIdEvent') -> <<"sts.EventReport.ClientIdEvent">>;
msg_name_to_fqbin('EventReport.ClientIpEvent') -> <<"sts.EventReport.ClientIpEvent">>;
msg_name_to_fqbin('EventReport.ClientTimeoutEvent') -> <<"sts.EventReport.ClientTimeoutEvent">>;
msg_name_to_fqbin('EventReport.ClientSession') -> <<"sts.EventReport.ClientSession">>;
msg_name_to_fqbin('EventReport') -> <<"sts.EventReport">>;
msg_name_to_fqbin('Report') -> <<"sts.Report">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"sts.RadioBandType">>) -> 'RadioBandType';
fqbin_to_enum_name(<<"sts.SurveyType">>) -> 'SurveyType';
fqbin_to_enum_name(<<"sts.NeighborType">>) -> 'NeighborType';
fqbin_to_enum_name(<<"sts.ChanWidth">>) -> 'ChanWidth';
fqbin_to_enum_name(<<"sts.WmmAc">>) -> 'WmmAc';
fqbin_to_enum_name(<<"sts.BSEventType">>) -> 'BSEventType';
fqbin_to_enum_name(<<"sts.EventType">>) -> 'EventType';
fqbin_to_enum_name(<<"sts.DeviceType">>) -> 'DeviceType';
fqbin_to_enum_name(<<"sts.FrameType">>) -> 'FrameType';
fqbin_to_enum_name(<<"sts.DisconnectSrc">>) -> 'DisconnectSrc';
fqbin_to_enum_name(<<"sts.AssocType">>) -> 'AssocType';
fqbin_to_enum_name(<<"sts.DisconnectType">>) -> 'DisconnectType';
fqbin_to_enum_name(<<"sts.SecurityType">>) -> 'SecurityType';
fqbin_to_enum_name(<<"sts.ReportType">>) -> 'ReportType';
fqbin_to_enum_name(<<"sts.FsType">>) -> 'FsType';
fqbin_to_enum_name(<<"sts.CTReasonType">>) -> 'CTReasonType';
fqbin_to_enum_name(<<"sts.DiffType">>) -> 'DiffType';
fqbin_to_enum_name(<<"sts.StreamingVideoType">>) -> 'StreamingVideoType';
fqbin_to_enum_name(<<"sts.RssiPeer.RssiSource">>) -> 'RssiPeer.RssiSource';
fqbin_to_enum_name(<<"sts.StateUpDown">>) -> 'StateUpDown';
fqbin_to_enum_name(<<"sts.RtpFlowStats.RtpFlowDirection">>) -> 'RtpFlowStats.RtpFlowDirection';
fqbin_to_enum_name(<<"sts.RtpFlowStats.RtpFlowType">>) -> 'RtpFlowStats.RtpFlowType';
fqbin_to_enum_name(<<"sts.CallStop.CallStopReason">>) -> 'CallStop.CallStopReason';
fqbin_to_enum_name(<<"sts.CallReport.CallReportReason">>) -> 'CallReport.CallReportReason';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('RadioBandType') -> <<"sts.RadioBandType">>;
enum_name_to_fqbin('SurveyType') -> <<"sts.SurveyType">>;
enum_name_to_fqbin('NeighborType') -> <<"sts.NeighborType">>;
enum_name_to_fqbin('ChanWidth') -> <<"sts.ChanWidth">>;
enum_name_to_fqbin('WmmAc') -> <<"sts.WmmAc">>;
enum_name_to_fqbin('BSEventType') -> <<"sts.BSEventType">>;
enum_name_to_fqbin('EventType') -> <<"sts.EventType">>;
enum_name_to_fqbin('DeviceType') -> <<"sts.DeviceType">>;
enum_name_to_fqbin('FrameType') -> <<"sts.FrameType">>;
enum_name_to_fqbin('DisconnectSrc') -> <<"sts.DisconnectSrc">>;
enum_name_to_fqbin('AssocType') -> <<"sts.AssocType">>;
enum_name_to_fqbin('DisconnectType') -> <<"sts.DisconnectType">>;
enum_name_to_fqbin('SecurityType') -> <<"sts.SecurityType">>;
enum_name_to_fqbin('ReportType') -> <<"sts.ReportType">>;
enum_name_to_fqbin('FsType') -> <<"sts.FsType">>;
enum_name_to_fqbin('CTReasonType') -> <<"sts.CTReasonType">>;
enum_name_to_fqbin('DiffType') -> <<"sts.DiffType">>;
enum_name_to_fqbin('StreamingVideoType') -> <<"sts.StreamingVideoType">>;
enum_name_to_fqbin('RssiPeer.RssiSource') -> <<"sts.RssiPeer.RssiSource">>;
enum_name_to_fqbin('StateUpDown') -> <<"sts.StateUpDown">>;
enum_name_to_fqbin('RtpFlowStats.RtpFlowDirection') -> <<"sts.RtpFlowStats.RtpFlowDirection">>;
enum_name_to_fqbin('RtpFlowStats.RtpFlowType') -> <<"sts.RtpFlowStats.RtpFlowType">>;
enum_name_to_fqbin('CallStop.CallStopReason') -> <<"sts.CallStop.CallStopReason">>;
enum_name_to_fqbin('CallReport.CallReportReason') -> <<"sts.CallReport.CallReportReason">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> sts.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "opensync_stats.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["opensync_stats.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["opensync_stats"].


get_msg_containment("opensync_stats") ->
    ['AvgType',
     'BSClient',
     'BSClient.BSBandReport',
     'BSClient.BSEvent',
     'BSReport',
     'CallReport',
     'CallStart',
     'CallStop',
     'Capacity',
     'Capacity.QueueSample',
     'Client',
     'Client.RxStats',
     'Client.RxStats.ChainRSSI',
     'Client.Stats',
     'Client.TidStats',
     'Client.TidStats.Sojourn',
     'Client.TxStats',
     'ClientReport',
     'DNSProbeMetric',
     'Device',
     'Device.CpuUtil',
     'Device.FsUtil',
     'Device.LoadAvg',
     'Device.MemUtil',
     'Device.PerProcessUtil',
     'Device.RadioTemp',
     'Device.Thermal',
     'Device.Thermal.RadioTxChainMask',
     'EventReport',
     'EventReport.ClientAssocEvent',
     'EventReport.ClientAuthEvent',
     'EventReport.ClientConnectEvent',
     'EventReport.ClientDisconnectEvent',
     'EventReport.ClientFailureEvent',
     'EventReport.ClientFirstDataEvent',
     'EventReport.ClientIdEvent',
     'EventReport.ClientIpEvent',
     'EventReport.ClientSession',
     'EventReport.ClientTimeoutEvent',
     'Neighbor',
     'Neighbor.NeighborBss',
     'NetworkProbe',
     'RADIUSMetrics',
     'Report',
     'RssiPeer',
     'RssiPeer.RssiSample',
     'RssiReport',
     'RtpFlowStats',
     'StreamingVideoDetectPattern',
     'StreamingVideoServerDetected',
     'StreamingVideoSessionStart',
     'StreamingVideoStop',
     'Survey',
     'Survey.SurveyAvg',
     'Survey.SurveySample',
     'VLANMetrics',
     'VideoVoiceReport'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("opensync_stats") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("opensync_stats") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("opensync_stats") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("opensync_stats") ->
    ['AssocType',
     'BSEventType',
     'CTReasonType',
     'CallReport.CallReportReason',
     'CallStop.CallStopReason',
     'ChanWidth',
     'DeviceType',
     'DiffType',
     'DisconnectSrc',
     'DisconnectType',
     'EventType',
     'FrameType',
     'FsType',
     'NeighborType',
     'RadioBandType',
     'ReportType',
     'RssiPeer.RssiSource',
     'RtpFlowStats.RtpFlowDirection',
     'RtpFlowStats.RtpFlowType',
     'SecurityType',
     'StateUpDown',
     'StreamingVideoType',
     'SurveyType',
     'WmmAc'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"sts.StreamingVideoStop">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Device.RadioTemp">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.CallStop">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.RssiPeer">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Neighbor">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.VLANMetrics">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.RtpFlowStats">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.RADIUSMetrics">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Neighbor.NeighborBss">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.DNSProbeMetric">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Client.TxStats">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Client.TidStats">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Client.Stats">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Client.RxStats">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.VideoVoiceReport">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.StreamingVideoSessionStart">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.StreamingVideoServerDetected">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.RssiReport">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Report">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport.ClientTimeoutEvent">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport.ClientIpEvent">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport.ClientIdEvent">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport.ClientFirstDataEvent">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport.ClientFailureEvent">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport.ClientDisconnectEvent">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport.ClientConnectEvent">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport.ClientAuthEvent">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport.ClientAssocEvent">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.ClientReport">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Client">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.CallStart">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.CallReport">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.BSReport">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.BSClient.BSEvent">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.BSClient.BSBandReport">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.BSClient">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Survey.SurveySample">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.RssiPeer.RssiSample">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.NetworkProbe">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Device">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Capacity.QueueSample">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.AvgType">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Survey.SurveyAvg">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Device.LoadAvg">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Survey">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Client.RxStats.ChainRSSI">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Capacity">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Device.Thermal.RadioTxChainMask">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Device.Thermal">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Device.PerProcessUtil">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Device.MemUtil">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Device.FsUtil">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Device.CpuUtil">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.StreamingVideoDetectPattern">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.EventReport.ClientSession">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(<<"sts.Client.TidStats.Sojourn">>) -> "opensync_stats";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"sts.WmmAc">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.DisconnectSrc">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.SurveyType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.StreamingVideoType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.SecurityType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.RtpFlowStats.RtpFlowType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.RssiPeer.RssiSource">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.ReportType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.RadioBandType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.NeighborType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.FsType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.FrameType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.EventType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.DisconnectType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.DiffType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.DeviceType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.CTReasonType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.BSEventType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.AssocType">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.ChanWidth">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.StateUpDown">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.RtpFlowStats.RtpFlowDirection">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.CallStop.CallStopReason">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(<<"sts.CallReport.CallReportReason">>) -> "opensync_stats";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.14.2".

gpb_version_as_list() ->
    [4,14,2].
