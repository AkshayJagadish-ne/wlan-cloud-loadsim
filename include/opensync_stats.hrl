%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.14.2

-ifndef(opensync_stats).
-define(opensync_stats, true).

-define(opensync_stats_gpb_version, "4.14.2").

-ifndef('AVGTYPE_PB_H').
-define('AVGTYPE_PB_H', true).
-record('AvgType',
        {avg                    :: non_neg_integer() | undefined, % = 1, required: 32 bits
         min                    :: non_neg_integer() | undefined, % = 2, optional: 32 bits
         max                    :: non_neg_integer() | undefined, % = 3, optional: 32 bits
         num                    :: non_neg_integer() | undefined % = 4, optional: 32 bits
        }).
-endif.

-ifndef('NEIGHBOR.NEIGHBORBSS_PB_H').
-define('NEIGHBOR.NEIGHBORBSS_PB_H', true).
-record('Neighbor.NeighborBss',
        {bssid                  :: iodata() | undefined, % = 1, (required)
         ssid                   :: iodata() | undefined, % = 2, (optional)
         rssi                   :: non_neg_integer() | undefined, % = 3, optional: 32 bits
         tsf                    :: non_neg_integer() | undefined, % = 4, optional: 64 bits
         chan_width             :: 'CHAN_WIDTH_UNKNOWN' | 'CHAN_WIDTH_20MHZ' | 'CHAN_WIDTH_40MHZ' | 'CHAN_WIDTH_40MHZ_ABOVE' | 'CHAN_WIDTH_40MHZ_BELOW' | 'CHAN_WIDTH_80MHZ' | 'CHAN_WIDTH_160MHZ' | 'CHAN_WIDTH_80_PLUS_80MHZ' | integer() | undefined, % = 5, optional: enum ChanWidth
         channel                :: non_neg_integer() | undefined, % = 6, required: 32 bits
         status                 :: 'ADDED' | 'REMOVED' | integer() | undefined % = 7, optional: enum DiffType
        }).
-endif.

-ifndef('NEIGHBOR_PB_H').
-define('NEIGHBOR_PB_H', true).
-record('Neighbor',
        {'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 1, required: enum RadioBandType
         scan_type              :: 'ONCHAN_SCAN' | 'OFFCHAN_SCAN' | 'FULL_SCAN' | integer() | undefined, % = 2, required: enum NeighborType
         timestamp_ms           :: non_neg_integer() | undefined, % = 3, optional: 64 bits
         bss_list = []          :: [opensync_stats:'Neighbor.NeighborBss'()] | undefined, % = 4, (repeated)
         report_type            :: 'RAW' | 'AVERAGE' | 'HISTOGRAM' | 'PERCENTILE' | 'DIFF' | integer() | undefined % = 5, optional: enum ReportType
        }).
-endif.

-ifndef('CLIENT.STATS_PB_H').
-define('CLIENT.STATS_PB_H', true).
-record('Client.Stats',
        {rx_bytes               :: non_neg_integer() | undefined, % = 1, optional: 64 bits
         tx_bytes               :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         rx_frames              :: non_neg_integer() | undefined, % = 3, optional: 64 bits
         tx_frames              :: non_neg_integer() | undefined, % = 4, optional: 64 bits
         rx_retries             :: non_neg_integer() | undefined, % = 5, optional: 64 bits
         tx_retries             :: non_neg_integer() | undefined, % = 6, optional: 64 bits
         rx_errors              :: non_neg_integer() | undefined, % = 7, optional: 64 bits
         tx_errors              :: non_neg_integer() | undefined, % = 8, optional: 64 bits
         rx_rate                :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 9, (optional)
         tx_rate                :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 10, (optional)
         rssi                   :: non_neg_integer() | undefined % = 11, optional: 32 bits
        }).
-endif.

-ifndef('CLIENT.RXSTATS_PB_H').
-define('CLIENT.RXSTATS_PB_H', true).
-record('Client.RxStats',
        {mcs                    :: non_neg_integer() | undefined, % = 1, required: 32 bits
         nss                    :: non_neg_integer() | undefined, % = 2, required: 32 bits
         bw                     :: non_neg_integer() | undefined, % = 3, required: 32 bits
         bytes                  :: non_neg_integer() | undefined, % = 4, optional: 64 bits
         msdus                  :: non_neg_integer() | undefined, % = 5, optional: 64 bits
         mpdus                  :: non_neg_integer() | undefined, % = 6, optional: 64 bits
         ppdus                  :: non_neg_integer() | undefined, % = 7, optional: 64 bits
         retries                :: non_neg_integer() | undefined, % = 8, optional: 64 bits
         errors                 :: non_neg_integer() | undefined, % = 9, optional: 64 bits
         rssi                   :: non_neg_integer() | undefined, % = 10, optional: 32 bits
         chain_rssi = []        :: [opensync_stats:'Client.RxStats.ChainRSSI'()] | undefined % = 11, (repeated)
        }).
-endif.

-ifndef('CLIENT.RXSTATS.CHAINRSSI_PB_H').
-define('CLIENT.RXSTATS.CHAINRSSI_PB_H', true).
-record('Client.RxStats.ChainRSSI',
        {chain                  :: non_neg_integer() | undefined, % = 1, required: 32 bits
         ht                     :: non_neg_integer() | undefined, % = 2, required: 32 bits
         rssi                   :: non_neg_integer() | undefined % = 3, optional: 32 bits
        }).
-endif.

-ifndef('CLIENT.TXSTATS_PB_H').
-define('CLIENT.TXSTATS_PB_H', true).
-record('Client.TxStats',
        {mcs                    :: non_neg_integer() | undefined, % = 1, required: 32 bits
         nss                    :: non_neg_integer() | undefined, % = 2, required: 32 bits
         bw                     :: non_neg_integer() | undefined, % = 3, required: 32 bits
         bytes                  :: non_neg_integer() | undefined, % = 4, optional: 64 bits
         msdus                  :: non_neg_integer() | undefined, % = 5, optional: 64 bits
         mpdus                  :: non_neg_integer() | undefined, % = 6, optional: 64 bits
         ppdus                  :: non_neg_integer() | undefined, % = 7, optional: 64 bits
         retries                :: non_neg_integer() | undefined, % = 8, optional: 64 bits
         errors                 :: non_neg_integer() | undefined % = 9, optional: 64 bits
        }).
-endif.

-ifndef('CLIENT.TIDSTATS_PB_H').
-define('CLIENT.TIDSTATS_PB_H', true).
-record('Client.TidStats',
        {sojourn = []           :: [opensync_stats:'Client.TidStats.Sojourn'()] | undefined, % = 4, (repeated)
         offset_ms              :: non_neg_integer() | undefined % = 5, optional: 32 bits
        }).
-endif.

-ifndef('CLIENT.TIDSTATS.SOJOURN_PB_H').
-define('CLIENT.TIDSTATS.SOJOURN_PB_H', true).
-record('Client.TidStats.Sojourn',
        {ac                     :: 'WMM_AC_VO' | 'WMM_AC_VI' | 'WMM_AC_BE' | 'WMM_AC_BK' | integer() | undefined, % = 1, required: enum WmmAc
         tid                    :: non_neg_integer() | undefined, % = 2, required: 32 bits
         ewma_time_ms           :: non_neg_integer() | undefined, % = 3, optional: 32 bits
         sum_time_ms            :: non_neg_integer() | undefined, % = 4, optional: 32 bits
         num_msdus              :: non_neg_integer() | undefined % = 5, optional: 32 bits
        }).
-endif.

-ifndef('CLIENT_PB_H').
-define('CLIENT_PB_H', true).
-record('Client',
        {mac_address            :: iodata() | undefined, % = 1, (required)
         ssid                   :: iodata() | undefined, % = 2, (optional)
         connected              :: boolean() | 0 | 1 | undefined, % = 3, (optional)
         connect_count          :: non_neg_integer() | undefined, % = 4, optional: 32 bits
         disconnect_count       :: non_neg_integer() | undefined, % = 5, optional: 32 bits
         connect_offset_ms      :: non_neg_integer() | undefined, % = 6, optional: 32 bits
         disconnect_offset_ms   :: non_neg_integer() | undefined, % = 7, optional: 32 bits
         duration_ms            :: non_neg_integer() | undefined, % = 8, optional: 32 bits
         stats                  :: opensync_stats:'Client.Stats'() | undefined, % = 9, (optional)
         rx_stats = []          :: [opensync_stats:'Client.RxStats'()] | undefined, % = 10, (repeated)
         tx_stats = []          :: [opensync_stats:'Client.TxStats'()] | undefined, % = 11, (repeated)
         tid_stats = []         :: [opensync_stats:'Client.TidStats'()] | undefined, % = 12, (repeated)
         uapsd                  :: non_neg_integer() | undefined % = 13, optional: 32 bits
        }).
-endif.

-ifndef('CLIENTREPORT_PB_H').
-define('CLIENTREPORT_PB_H', true).
-record('ClientReport',
        {'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 1, required: enum RadioBandType
         timestamp_ms           :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         client_list = []       :: [opensync_stats:'Client'()] | undefined, % = 3, (repeated)
         channel                :: non_neg_integer() | undefined % = 4, required: 32 bits
        }).
-endif.

-ifndef('SURVEY.SURVEYSAMPLE_PB_H').
-define('SURVEY.SURVEYSAMPLE_PB_H', true).
-record('Survey.SurveySample',
        {channel                :: non_neg_integer() | undefined, % = 1, required: 32 bits
         duration_ms            :: non_neg_integer() | undefined, % = 2, optional: 32 bits
         total_count            :: non_neg_integer() | undefined, % = 3, optional: 32 bits
         sample_count           :: non_neg_integer() | undefined, % = 4, optional: 32 bits
         busy                   :: non_neg_integer() | undefined, % = 5, optional: 32 bits
         busy_tx                :: non_neg_integer() | undefined, % = 6, optional: 32 bits
         busy_rx                :: non_neg_integer() | undefined, % = 7, optional: 32 bits
         busy_self              :: non_neg_integer() | undefined, % = 8, optional: 32 bits
         offset_ms              :: non_neg_integer() | undefined, % = 9, optional: 32 bits
         busy_ext               :: non_neg_integer() | undefined, % = 10, optional: 32 bits
         noise                  :: non_neg_integer() | undefined % = 11, optional: 32 bits
        }).
-endif.

-ifndef('SURVEY.SURVEYAVG_PB_H').
-define('SURVEY.SURVEYAVG_PB_H', true).
-record('Survey.SurveyAvg',
        {channel                :: non_neg_integer() | undefined, % = 1, required: 32 bits
         busy                   :: opensync_stats:'AvgType'() | undefined, % = 2, (optional)
         busy_tx                :: opensync_stats:'AvgType'() | undefined, % = 3, (optional)
         busy_rx                :: opensync_stats:'AvgType'() | undefined, % = 4, (optional)
         busy_self              :: opensync_stats:'AvgType'() | undefined, % = 5, (optional)
         busy_ext               :: opensync_stats:'AvgType'() | undefined, % = 6, (optional)
         noise                  :: opensync_stats:'AvgType'() | undefined % = 7, (optional)
        }).
-endif.

-ifndef('SURVEY_PB_H').
-define('SURVEY_PB_H', true).
-record('Survey',
        {'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 1, required: enum RadioBandType
         survey_type            :: 'ON_CHANNEL' | 'OFF_CHANNEL' | 'FULL' | integer() | undefined, % = 2, required: enum SurveyType
         timestamp_ms           :: non_neg_integer() | undefined, % = 3, optional: 64 bits
         survey_list = []       :: [opensync_stats:'Survey.SurveySample'()] | undefined, % = 4, (repeated)
         survey_avg = []        :: [opensync_stats:'Survey.SurveyAvg'()] | undefined, % = 5, (repeated)
         report_type            :: 'RAW' | 'AVERAGE' | 'HISTOGRAM' | 'PERCENTILE' | 'DIFF' | integer() | undefined % = 6, optional: enum ReportType
        }).
-endif.

-ifndef('CAPACITY.QUEUESAMPLE_PB_H').
-define('CAPACITY.QUEUESAMPLE_PB_H', true).
-record('Capacity.QueueSample',
        {busy_tx                :: non_neg_integer() | undefined, % = 1, optional: 32 bits
         bytes_tx               :: non_neg_integer() | undefined, % = 2, optional: 32 bits
         sample_count           :: non_neg_integer() | undefined, % = 3, optional: 32 bits
         'Vo_count'             :: non_neg_integer() | undefined, % = 4, optional: 32 bits
         'Vi_count'             :: non_neg_integer() | undefined, % = 5, optional: 32 bits
         'Be_count'             :: non_neg_integer() | undefined, % = 6, optional: 32 bits
         'Bk_count'             :: non_neg_integer() | undefined, % = 7, optional: 32 bits
         'Bcn_count'            :: non_neg_integer() | undefined, % = 8, optional: 32 bits
         'Cab_count'            :: non_neg_integer() | undefined, % = 9, optional: 32 bits
         offset_ms              :: non_neg_integer() | undefined % = 10, optional: 32 bits
        }).
-endif.

-ifndef('CAPACITY_PB_H').
-define('CAPACITY_PB_H', true).
-record('Capacity',
        {'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 1, required: enum RadioBandType
         timestamp_ms           :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         queue_list = []        :: [opensync_stats:'Capacity.QueueSample'()] | undefined % = 3, (repeated)
        }).
-endif.

-ifndef('DEVICE.LOADAVG_PB_H').
-define('DEVICE.LOADAVG_PB_H', true).
-record('Device.LoadAvg',
        {one                    :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 1, (optional)
         five                   :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 2, (optional)
         fifteen                :: float() | integer() | infinity | '-infinity' | nan | undefined % = 3, (optional)
        }).
-endif.

-ifndef('DEVICE.RADIOTEMP_PB_H').
-define('DEVICE.RADIOTEMP_PB_H', true).
-record('Device.RadioTemp',
        {'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 1, optional: enum RadioBandType
         value                  :: integer() | undefined % = 2, optional: 32 bits
        }).
-endif.

-ifndef('DEVICE.THERMAL_PB_H').
-define('DEVICE.THERMAL_PB_H', true).
-record('Device.Thermal',
        {txchainmask = []       :: [opensync_stats:'Device.Thermal.RadioTxChainMask'()] | undefined, % = 1, (repeated)
         fan_rpm                :: non_neg_integer() | undefined, % = 2, optional: 32 bits
         timestamp_ms           :: non_neg_integer() | undefined % = 3, optional: 64 bits
        }).
-endif.

-ifndef('DEVICE.THERMAL.RADIOTXCHAINMASK_PB_H').
-define('DEVICE.THERMAL.RADIOTXCHAINMASK_PB_H', true).
-record('Device.Thermal.RadioTxChainMask',
        {'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 1, optional: enum RadioBandType
         value                  :: non_neg_integer() | undefined % = 2, optional: 32 bits
        }).
-endif.

-ifndef('DEVICE.MEMUTIL_PB_H').
-define('DEVICE.MEMUTIL_PB_H', true).
-record('Device.MemUtil',
        {mem_total              :: non_neg_integer() | undefined, % = 1, required: 32 bits
         mem_used               :: non_neg_integer() | undefined, % = 2, required: 32 bits
         swap_total             :: non_neg_integer() | undefined, % = 3, optional: 32 bits
         swap_used              :: non_neg_integer() | undefined % = 4, optional: 32 bits
        }).
-endif.

-ifndef('DEVICE.FSUTIL_PB_H').
-define('DEVICE.FSUTIL_PB_H', true).
-record('Device.FsUtil',
        {fs_type                :: 'FS_TYPE_ROOTFS' | 'FS_TYPE_TMPFS' | integer() | undefined, % = 1, required: enum FsType
         fs_total               :: non_neg_integer() | undefined, % = 2, required: 32 bits
         fs_used                :: non_neg_integer() | undefined % = 3, required: 32 bits
        }).
-endif.

-ifndef('DEVICE.CPUUTIL_PB_H').
-define('DEVICE.CPUUTIL_PB_H', true).
-record('Device.CpuUtil',
        {cpu_util               :: non_neg_integer() | undefined % = 1, optional: 32 bits
        }).
-endif.

-ifndef('DEVICE.PERPROCESSUTIL_PB_H').
-define('DEVICE.PERPROCESSUTIL_PB_H', true).
-record('Device.PerProcessUtil',
        {pid                    :: non_neg_integer() | undefined, % = 1, required: 32 bits
         cmd                    :: iodata() | undefined, % = 2, (required)
         util                   :: non_neg_integer() | undefined % = 3, required: 32 bits
        }).
-endif.

-ifndef('DEVICE_PB_H').
-define('DEVICE_PB_H', true).
-record('Device',
        {load                   :: opensync_stats:'Device.LoadAvg'() | undefined, % = 1, (optional)
         radio_temp = []        :: [opensync_stats:'Device.RadioTemp'()] | undefined, % = 2, (repeated)
         timestamp_ms           :: non_neg_integer() | undefined, % = 3, optional: 64 bits
         uptime                 :: non_neg_integer() | undefined, % = 4, optional: 32 bits
         thermal_stats = []     :: [opensync_stats:'Device.Thermal'()] | undefined, % = 5, (repeated)
         mem_util               :: opensync_stats:'Device.MemUtil'() | undefined, % = 6, (optional)
         fs_util = []           :: [opensync_stats:'Device.FsUtil'()] | undefined, % = 7, (repeated)
         cpuUtil                :: opensync_stats:'Device.CpuUtil'() | undefined, % = 8, (optional)
         ps_cpu_util = []       :: [opensync_stats:'Device.PerProcessUtil'()] | undefined, % = 9, (repeated)
         ps_mem_util = []       :: [opensync_stats:'Device.PerProcessUtil'()] | undefined % = 10, (repeated)
        }).
-endif.

-ifndef('BSCLIENT.BSEVENT_PB_H').
-define('BSCLIENT.BSEVENT_PB_H', true).
-record('BSClient.BSEvent',
        {type                   :: 'PROBE' | 'CONNECT' | 'DISCONNECT' | 'BACKOFF' | 'ACTIVITY' | 'OVERRUN' | 'BAND_STEERING_ATTEMPT' | 'CLIENT_STEERING_ATTEMPT' | 'CLIENT_STEERING_STARTED' | 'CLIENT_STEERING_DISABLED' | 'CLIENT_STEERING_EXPIRED' | 'CLIENT_STEERING_FAILED' | 'AUTH_BLOCK' | 'CLIENT_KICKED' | 'CLIENT_BS_BTM' | 'CLIENT_STICKY_BTM' | 'CLIENT_BTM' | 'CLIENT_CAPABILITIES' | 'CLIENT_BS_BTM_RETRY' | 'CLIENT_STICKY_BTM_RETRY' | 'CLIENT_BTM_RETRY' | 'CLIENT_RRM_BCN_RPT' | 'CLIENT_BS_KICK' | 'CLIENT_STICKY_KICK' | 'CLIENT_SPECULATIVE_KICK' | 'CLIENT_DIRECTED_KICK' | 'CLIENT_GHOST_DEVICE_KICK' | integer() | undefined, % = 1, required: enum BSEventType
         offset_ms              :: non_neg_integer() | undefined, % = 2, required: 32 bits
         rssi                   :: non_neg_integer() | undefined, % = 3, optional: 32 bits
         probe_bcast            :: boolean() | 0 | 1 | undefined, % = 4, (optional)
         probe_blocked          :: boolean() | 0 | 1 | undefined, % = 5, (optional)
         disconnect_src         :: 'LOCAL' | 'REMOTE' | integer() | undefined, % = 6, optional: enum DisconnectSrc
         disconnect_type        :: 'DISASSOC' | 'DEAUTH' | integer() | undefined, % = 7, optional: enum DisconnectType
         disconnect_reason      :: non_neg_integer() | undefined, % = 8, optional: 32 bits
         backoff_enabled        :: boolean() | 0 | 1 | undefined, % = 9, (optional)
         active                 :: boolean() | 0 | 1 | undefined, % = 10, (optional)
         rejected               :: boolean() | 0 | 1 | undefined, % = 11, (optional)
         is_BTM_supported       :: boolean() | 0 | 1 | undefined, % = 12, (optional)
         is_RRM_supported       :: boolean() | 0 | 1 | undefined, % = 13, (optional)
         max_chwidth            :: non_neg_integer() | undefined, % = 14, optional: 32 bits
         max_streams            :: non_neg_integer() | undefined, % = 15, optional: 32 bits
         phy_mode               :: non_neg_integer() | undefined, % = 16, optional: 32 bits
         max_mcs                :: non_neg_integer() | undefined, % = 17, optional: 32 bits
         max_txpower            :: non_neg_integer() | undefined, % = 18, optional: 32 bits
         is_static_smps         :: boolean() | 0 | 1 | undefined, % = 19, (optional)
         is_mu_mimo_supported   :: boolean() | 0 | 1 | undefined, % = 20, (optional)
         band_cap_2G            :: boolean() | 0 | 1 | undefined, % = 21, (optional)
         band_cap_5G            :: boolean() | 0 | 1 | undefined, % = 22, (optional)
         rrm_caps_link_meas     :: boolean() | 0 | 1 | undefined, % = 23, (optional)
         rrm_caps_neigh_rpt     :: boolean() | 0 | 1 | undefined, % = 24, (optional)
         rrm_caps_bcn_rpt_passive :: boolean() | 0 | 1 | undefined, % = 25, (optional)
         rrm_caps_bcn_rpt_active :: boolean() | 0 | 1 | undefined, % = 26, (optional)
         rrm_caps_bcn_rpt_table :: boolean() | 0 | 1 | undefined, % = 27, (optional)
         rrm_caps_lci_meas      :: boolean() | 0 | 1 | undefined, % = 28, (optional)
         rrm_caps_ftm_range_rpt :: boolean() | 0 | 1 | undefined, % = 29, (optional)
         backoff_period         :: non_neg_integer() | undefined, % = 30, optional: 32 bits
         assoc_ies              :: iodata() | undefined % = 31, (optional)
        }).
-endif.

-ifndef('BSCLIENT.BSBANDREPORT_PB_H').
-define('BSCLIENT.BSBANDREPORT_PB_H', true).
-record('BSClient.BSBandReport',
        {'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 1, required: enum RadioBandType
         connected              :: boolean() | 0 | 1 | undefined, % = 2, (optional)
         rejects                :: non_neg_integer() | undefined, % = 3, optional: 32 bits
         connects               :: non_neg_integer() | undefined, % = 4, optional: 32 bits
         disconnects            :: non_neg_integer() | undefined, % = 5, optional: 32 bits
         activity_changes       :: non_neg_integer() | undefined, % = 6, optional: 32 bits
         steering_success_cnt   :: non_neg_integer() | undefined, % = 7, optional: 32 bits
         steering_fail_cnt      :: non_neg_integer() | undefined, % = 8, optional: 32 bits
         steering_kick_cnt      :: non_neg_integer() | undefined, % = 9, optional: 32 bits
         sticky_kick_cnt        :: non_neg_integer() | undefined, % = 10, optional: 32 bits
         probe_bcast_cnt        :: non_neg_integer() | undefined, % = 11, optional: 32 bits
         probe_bcast_blocked    :: non_neg_integer() | undefined, % = 12, optional: 32 bits
         probe_direct_cnt       :: non_neg_integer() | undefined, % = 13, optional: 32 bits
         probe_direct_blocked   :: non_neg_integer() | undefined, % = 14, optional: 32 bits
         event_list = []        :: [opensync_stats:'BSClient.BSEvent'()] | undefined, % = 15, (repeated)
         ifname                 :: iodata() | undefined % = 16, (optional)
        }).
-endif.

-ifndef('BSCLIENT_PB_H').
-define('BSCLIENT_PB_H', true).
-record('BSClient',
        {mac_address            :: iodata() | undefined, % = 1, (required)
         bs_band_report = []    :: [opensync_stats:'BSClient.BSBandReport'()] | undefined % = 2, (repeated)
        }).
-endif.

-ifndef('BSREPORT_PB_H').
-define('BSREPORT_PB_H', true).
-record('BSReport',
        {timestamp_ms           :: non_neg_integer() | undefined, % = 1, required: 64 bits
         clients = []           :: [opensync_stats:'BSClient'()] | undefined % = 2, (repeated)
        }).
-endif.

-ifndef('RSSIPEER.RSSISAMPLE_PB_H').
-define('RSSIPEER.RSSISAMPLE_PB_H', true).
-record('RssiPeer.RssiSample',
        {rssi                   :: non_neg_integer() | undefined, % = 1, required: 32 bits
         offset_ms              :: non_neg_integer() | undefined % = 2, optional: 32 bits
        }).
-endif.

-ifndef('RSSIPEER_PB_H').
-define('RSSIPEER_PB_H', true).
-record('RssiPeer',
        {mac_address            :: iodata() | undefined, % = 1, (required)
         rssi_source            :: 'CLIENT' | 'PROBE' | 'NEIGHBOR' | integer() | undefined, % = 2, optional: enum RssiPeer.RssiSource
         rssi_list = []         :: [opensync_stats:'RssiPeer.RssiSample'()] | undefined, % = 3, (repeated)
         rssi_avg               :: opensync_stats:'AvgType'() | undefined, % = 4, (optional)
         rx_ppdus               :: non_neg_integer() | undefined, % = 5, optional: 64 bits
         tx_ppdus               :: non_neg_integer() | undefined % = 6, optional: 64 bits
        }).
-endif.

-ifndef('RSSIREPORT_PB_H').
-define('RSSIREPORT_PB_H', true).
-record('RssiReport',
        {'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 1, required: enum RadioBandType
         report_type            :: 'RAW' | 'AVERAGE' | 'HISTOGRAM' | 'PERCENTILE' | 'DIFF' | integer() | undefined, % = 2, required: enum ReportType
         timestamp_ms           :: non_neg_integer() | undefined, % = 3, optional: 64 bits
         peer_list = []         :: [opensync_stats:'RssiPeer'()] | undefined % = 4, (repeated)
        }).
-endif.

-ifndef('DNSPROBEMETRIC_PB_H').
-define('DNSPROBEMETRIC_PB_H', true).
-record('DNSProbeMetric',
        {serverIP               :: iodata() | undefined, % = 1, (optional)
         state                  :: 'SUD_down' | 'SUD_up' | 'SUD_error' | integer() | undefined, % = 2, optional: enum StateUpDown
         latency                :: non_neg_integer() | undefined % = 3, optional: 32 bits
        }).
-endif.

-ifndef('VLANMETRICS_PB_H').
-define('VLANMETRICS_PB_H', true).
-record('VLANMetrics',
        {vlanIF                 :: iodata() | undefined, % = 1, (optional)
         dhcpState              :: 'SUD_down' | 'SUD_up' | 'SUD_error' | integer() | undefined, % = 2, optional: enum StateUpDown
         latency                :: non_neg_integer() | undefined % = 3, optional: 32 bits
        }).
-endif.

-ifndef('RADIUSMETRICS_PB_H').
-define('RADIUSMETRICS_PB_H', true).
-record('RADIUSMetrics',
        {serverIP               :: iodata() | undefined, % = 1, (optional)
         radiusState            :: 'SUD_down' | 'SUD_up' | 'SUD_error' | integer() | undefined, % = 2, optional: enum StateUpDown
         latency                :: non_neg_integer() | undefined % = 3, optional: 32 bits
        }).
-endif.

-ifndef('NETWORKPROBE_PB_H').
-define('NETWORKPROBE_PB_H', true).
-record('NetworkProbe',
        {dns_probe              :: opensync_stats:'DNSProbeMetric'() | undefined, % = 1, (optional)
         vlan_probe             :: opensync_stats:'VLANMetrics'() | undefined, % = 2, (optional)
         radius_probe = []      :: [opensync_stats:'RADIUSMetrics'()] | undefined, % = 3, (repeated)
         timestamp_ms           :: non_neg_integer() | undefined % = 4, optional: 64 bits
        }).
-endif.

-ifndef('RTPFLOWSTATS_PB_H').
-define('RTPFLOWSTATS_PB_H', true).
-record('RtpFlowStats',
        {direction              :: 'RTP_UPSTREAM' | 'RTP_DOWNSTREAM' | integer() | undefined, % = 1, optional: enum RtpFlowStats.RtpFlowDirection
         rtp_flow_type          :: 'RTP_VOICE' | 'RTP_VIDEO' | integer() | undefined, % = 2, optional: enum RtpFlowStats.RtpFlowType
         latency                :: non_neg_integer() | undefined, % = 3, optional: 32 bits
         jitter                 :: non_neg_integer() | undefined, % = 4, optional: 32 bits
         packet_loss_percent    :: non_neg_integer() | undefined, % = 5, optional: 32 bits
         packet_loss_consec     :: non_neg_integer() | undefined, % = 6, optional: 32 bits
         codec                  :: non_neg_integer() | undefined, % = 7, optional: 32 bits
         mosx_100               :: non_neg_integer() | undefined, % = 8, optional: 32 bits
         block_codecs           :: iodata() | undefined, % = 9, (optional)
         total_packets_sent     :: non_neg_integer() | undefined, % = 10, optional: 32 bits
         total_packets_lost     :: non_neg_integer() | undefined, % = 11, optional: 32 bits
         rtp_seq_first          :: non_neg_integer() | undefined, % = 12, optional: 32 bits
         rtp_seq_last           :: non_neg_integer() | undefined, % = 13, optional: 32 bits
         stats_idx              :: non_neg_integer() | undefined % = 14, optional: 32 bits
        }).
-endif.

-ifndef('CALLSTART_PB_H').
-define('CALLSTART_PB_H', true).
-record('CallStart',
        {session_id             :: non_neg_integer() | undefined, % = 1, optional: 64 bits
         wifi_session_id        :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         client_mac             :: iodata() | undefined, % = 3, (optional)
         codecs = []            :: [iodata()] | undefined, % = 4, (repeated)
         provider_domain        :: iodata() | undefined, % = 5, (optional)
         device_info            :: iodata() | undefined, % = 6, (optional)
         channel                :: non_neg_integer() | undefined, % = 7, optional: 32 bits
         'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined % = 8, required: enum RadioBandType
        }).
-endif.

-ifndef('CALLSTOP_PB_H').
-define('CALLSTOP_PB_H', true).
-record('CallStop',
        {session_id             :: non_neg_integer() | undefined, % = 1, optional: 64 bits
         wifi_session_id        :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         client_mac             :: iodata() | undefined, % = 3, (optional)
         reason                 :: 'BYE_OK' | 'CALL_DROPPED' | integer() | undefined, % = 4, optional: enum CallStop.CallStopReason
         call_duration          :: non_neg_integer() | undefined, % = 5, optional: 32 bits
         stats = []             :: [opensync_stats:'RtpFlowStats'()] | undefined, % = 6, (repeated)
         channel                :: non_neg_integer() | undefined, % = 7, optional: 32 bits
         'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 8, required: enum RadioBandType
         codecs = []            :: [iodata()] | undefined, % = 9, (repeated)
         provider_domain        :: iodata() | undefined % = 10, (optional)
        }).
-endif.

-ifndef('CALLREPORT_PB_H').
-define('CALLREPORT_PB_H', true).
-record('CallReport',
        {session_id             :: non_neg_integer() | undefined, % = 1, optional: 64 bits
         wifi_session_id        :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         client_mac             :: iodata() | undefined, % = 3, (optional)
         stats = []             :: [opensync_stats:'RtpFlowStats'()] | undefined, % = 4, (repeated)
         reason                 :: 'ROAMED_FROM' | 'ROAMED_TO' | 'GOT_PUBLISH' | integer() | undefined, % = 5, optional: enum CallReport.CallReportReason
         channel                :: non_neg_integer() | undefined, % = 6, optional: 32 bits
         'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 7, required: enum RadioBandType
         codecs = []            :: [iodata()] | undefined, % = 8, (repeated)
         provider_domain        :: iodata() | undefined % = 9, (optional)
        }).
-endif.

-ifndef('STREAMINGVIDEODETECTPATTERN_PB_H').
-define('STREAMINGVIDEODETECTPATTERN_PB_H', true).
-record('StreamingVideoDetectPattern',
        {dns_lookup_pattern     :: iodata() | undefined, % = 1, (optional)
         video_type             :: 'UNKNOWN' | 'NETFLIX' | 'YOUTUBE' | 'PLEX' | integer() | undefined % = 2, optional: enum StreamingVideoType
        }).
-endif.

-ifndef('STREAMINGVIDEOSESSIONSTART_PB_H').
-define('STREAMINGVIDEOSESSIONSTART_PB_H', true).
-record('StreamingVideoSessionStart',
        {video_session_id       :: non_neg_integer() | undefined, % = 1, optional: 64 bits
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         client_mac             :: iodata() | undefined, % = 3, (optional)
         server_ip              :: iodata() | undefined, % = 4, (optional)
         streaming_video_type   :: 'UNKNOWN' | 'NETFLIX' | 'YOUTUBE' | 'PLEX' | integer() | undefined % = 5, optional: enum StreamingVideoType
        }).
-endif.

-ifndef('STREAMINGVIDEOSERVERDETECTED_PB_H').
-define('STREAMINGVIDEOSERVERDETECTED_PB_H', true).
-record('StreamingVideoServerDetected',
        {video_session_id       :: non_neg_integer() | undefined, % = 1, optional: 64 bits
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         client_mac             :: iodata() | undefined, % = 3, (optional)
         server_ip              :: iodata() | undefined, % = 4, (optional)
         server_dns_name        :: iodata() | undefined, % = 5, (optional)
         streaming_video_type   :: 'UNKNOWN' | 'NETFLIX' | 'YOUTUBE' | 'PLEX' | integer() | undefined % = 6, optional: enum StreamingVideoType
        }).
-endif.

-ifndef('STREAMINGVIDEOSTOP_PB_H').
-define('STREAMINGVIDEOSTOP_PB_H', true).
-record('StreamingVideoStop',
        {video_session_id       :: non_neg_integer() | undefined, % = 1, optional: 64 bits
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         client_mac             :: iodata() | undefined, % = 3, (optional)
         server_ip              :: iodata() | undefined, % = 4, (optional)
         total_bytes            :: non_neg_integer() | undefined, % = 5, optional: 64 bits
         streaming_video_type   :: 'UNKNOWN' | 'NETFLIX' | 'YOUTUBE' | 'PLEX' | integer() | undefined, % = 6, optional: enum StreamingVideoType
         duration_sec           :: non_neg_integer() | undefined % = 7, optional: 32 bits
        }).
-endif.

-ifndef('VIDEOVOICEREPORT_PB_H').
-define('VIDEOVOICEREPORT_PB_H', true).
-record('VideoVoiceReport',
        {call_start             :: opensync_stats:'CallStart'() | undefined, % = 1, (optional)
         call_stop              :: opensync_stats:'CallStop'() | undefined, % = 2, (optional)
         call_report            :: opensync_stats:'CallReport'() | undefined, % = 3, (optional)
         stream_video_stop      :: opensync_stats:'StreamingVideoStop'() | undefined, % = 4, (optional)
         stream_video_server    :: opensync_stats:'StreamingVideoServerDetected'() | undefined, % = 5, (optional)
         stream_video_session_start :: opensync_stats:'StreamingVideoSessionStart'() | undefined, % = 6, (optional)
         timestamp_ms           :: non_neg_integer() | undefined % = 7, optional: 64 bits
        }).
-endif.

-ifndef('EVENTREPORT.CLIENTASSOCEVENT_PB_H').
-define('EVENTREPORT.CLIENTASSOCEVENT_PB_H', true).
-record('EventReport.ClientAssocEvent',
        {sta_mac                :: iodata() | undefined, % = 1, (optional)
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         ssid                   :: iodata() | undefined, % = 3, (optional)
         'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 4, optional: enum RadioBandType
         assoc_type             :: 'ASSOC' | 'REASSOC' | integer() | undefined, % = 5, optional: enum AssocType
         status                 :: non_neg_integer() | undefined, % = 6, optional: 32 bits
         rssi                   :: integer() | undefined, % = 7, optional: 32 bits
         internal_sc            :: non_neg_integer() | undefined, % = 8, optional: 32 bits
         using11k               :: boolean() | 0 | 1 | undefined, % = 9, (optional)
         using11r               :: boolean() | 0 | 1 | undefined, % = 10, (optional)
         using11v               :: boolean() | 0 | 1 | undefined % = 11, (optional)
        }).
-endif.

-ifndef('EVENTREPORT.CLIENTAUTHEVENT_PB_H').
-define('EVENTREPORT.CLIENTAUTHEVENT_PB_H', true).
-record('EventReport.ClientAuthEvent',
        {sta_mac                :: iodata() | undefined, % = 1, (optional)
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         ssid                   :: iodata() | undefined, % = 3, (optional)
         'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 4, optional: enum RadioBandType
         auth_status            :: non_neg_integer() | undefined % = 5, optional: 32 bits
        }).
-endif.

-ifndef('EVENTREPORT.CLIENTDISCONNECTEVENT_PB_H').
-define('EVENTREPORT.CLIENTDISCONNECTEVENT_PB_H', true).
-record('EventReport.ClientDisconnectEvent',
        {sta_mac                :: iodata() | undefined, % = 1, (optional)
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         reason                 :: non_neg_integer() | undefined, % = 3, optional: 32 bits
         dev_type               :: 'DEV_AP' | 'DEV_STA' | integer() | undefined, % = 4, optional: enum DeviceType
         fr_type                :: 'FT_DEAUTH' | 'FT_DISASSOC' | integer() | undefined, % = 5, optional: enum FrameType
         lsent_up_ts_in_us      :: non_neg_integer() | undefined, % = 6, optional: 64 bits
         lrcv_up_ts_in_us       :: non_neg_integer() | undefined, % = 7, optional: 64 bits
         internal_rc            :: non_neg_integer() | undefined, % = 8, optional: 32 bits
         rssi                   :: integer() | undefined, % = 9, optional: 32 bits
         ssid                   :: iodata() | undefined, % = 10, (optional)
         'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined % = 11, optional: enum RadioBandType
        }).
-endif.

-ifndef('EVENTREPORT.CLIENTCONNECTEVENT_PB_H').
-define('EVENTREPORT.CLIENTCONNECTEVENT_PB_H', true).
-record('EventReport.ClientConnectEvent',
        {sta_mac                :: iodata() | undefined, % = 1, (optional)
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         'band'                 :: 'BAND2G' | 'BAND5G' | 'BAND5GL' | 'BAND5GU' | integer() | undefined, % = 3, optional: enum RadioBandType
         assoc_type             :: 'ASSOC' | 'REASSOC' | integer() | undefined, % = 4, optional: enum AssocType
         ssid                   :: iodata() | undefined, % = 5, (optional)
         sec_type               :: 'SEC_OPEN' | 'SEC_RADIUS' | 'SEC_PSK' | integer() | undefined, % = 6, optional: enum SecurityType
         fbt_used               :: boolean() | 0 | 1 | undefined, % = 7, (optional)
         ip_addr                :: iodata() | undefined, % = 8, (optional)
         clt_id                 :: iodata() | undefined, % = 9, (optional)
         ev_time_bootup_in_us_auth :: integer() | undefined, % = 10, optional: 64 bits
         ev_time_bootup_in_us_assoc :: integer() | undefined, % = 11, optional: 64 bits
         ev_time_bootup_in_us_eapol :: integer() | undefined, % = 12, optional: 64 bits
         ev_time_bootup_in_us_port_enable :: integer() | undefined, % = 13, optional: 64 bits
         ev_time_bootup_in_us_first_rx :: integer() | undefined, % = 14, optional: 64 bits
         ev_time_bootup_in_us_first_tx :: integer() | undefined, % = 15, optional: 64 bits
         using11k               :: boolean() | 0 | 1 | undefined, % = 16, (optional)
         using11r               :: boolean() | 0 | 1 | undefined, % = 17, (optional)
         using11v               :: boolean() | 0 | 1 | undefined, % = 18, (optional)
         ev_time_bootup_in_us_ip :: integer() | undefined, % = 19, optional: 64 bits
         assoc_rssi             :: integer() | undefined % = 20, optional: 32 bits
        }).
-endif.

-ifndef('EVENTREPORT.CLIENTFAILUREEVENT_PB_H').
-define('EVENTREPORT.CLIENTFAILUREEVENT_PB_H', true).
-record('EventReport.ClientFailureEvent',
        {sta_mac                :: iodata() | undefined, % = 1, (optional)
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         ssid                   :: iodata() | undefined, % = 3, (optional)
         reason_code            :: integer() | undefined, % = 4, optional: 32 bits
         reason_str             :: iodata() | undefined % = 5, (optional)
        }).
-endif.

-ifndef('EVENTREPORT.CLIENTFIRSTDATAEVENT_PB_H').
-define('EVENTREPORT.CLIENTFIRSTDATAEVENT_PB_H', true).
-record('EventReport.ClientFirstDataEvent',
        {sta_mac                :: iodata() | undefined, % = 1, (optional)
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         fdata_tx_up_ts_in_us   :: non_neg_integer() | undefined, % = 3, optional: 64 bits
         fdata_rx_up_ts_in_us   :: non_neg_integer() | undefined % = 4, optional: 64 bits
        }).
-endif.

-ifndef('EVENTREPORT.CLIENTIDEVENT_PB_H').
-define('EVENTREPORT.CLIENTIDEVENT_PB_H', true).
-record('EventReport.ClientIdEvent',
        {clt_mac                :: iodata() | undefined, % = 1, (optional)
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         clt_id                 :: iodata() | undefined % = 3, (optional)
        }).
-endif.

-ifndef('EVENTREPORT.CLIENTIPEVENT_PB_H').
-define('EVENTREPORT.CLIENTIPEVENT_PB_H', true).
-record('EventReport.ClientIpEvent',
        {sta_mac                :: iodata() | undefined, % = 1, (optional)
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         ip_addr                :: iodata() | undefined % = 3, (optional)
        }).
-endif.

-ifndef('EVENTREPORT.CLIENTTIMEOUTEVENT_PB_H').
-define('EVENTREPORT.CLIENTTIMEOUTEVENT_PB_H', true).
-record('EventReport.ClientTimeoutEvent',
        {sta_mac                :: iodata() | undefined, % = 1, (optional)
         session_id             :: non_neg_integer() | undefined, % = 2, optional: 64 bits
         r_code                 :: 'CTR_IDLE_TOO_LONG' | 'CTR_PROBE_FAIL' | integer() | undefined, % = 3, optional: enum CTReasonType
         last_sent_up_ts_in_us  :: non_neg_integer() | undefined, % = 4, optional: 64 bits
         last_rcv_up_ts_in_us   :: non_neg_integer() | undefined % = 5, optional: 64 bits
        }).
-endif.

-ifndef('EVENTREPORT.CLIENTSESSION_PB_H').
-define('EVENTREPORT.CLIENTSESSION_PB_H', true).
-record('EventReport.ClientSession',
        {session_id             :: non_neg_integer() | undefined, % = 1, required: 64 bits
         client_assoc_event = [] :: [opensync_stats:'EventReport.ClientAssocEvent'()] | undefined, % = 2, (repeated)
         client_auth_event = [] :: [opensync_stats:'EventReport.ClientAuthEvent'()] | undefined, % = 3, (repeated)
         client_disconnect_event = [] :: [opensync_stats:'EventReport.ClientDisconnectEvent'()] | undefined, % = 4, (repeated)
         client_failure_event = [] :: [opensync_stats:'EventReport.ClientFailureEvent'()] | undefined, % = 5, (repeated)
         client_first_data_event = [] :: [opensync_stats:'EventReport.ClientFirstDataEvent'()] | undefined, % = 6, (repeated)
         client_id_event = []   :: [opensync_stats:'EventReport.ClientIdEvent'()] | undefined, % = 7, (repeated)
         client_ip_event = []   :: [opensync_stats:'EventReport.ClientIpEvent'()] | undefined, % = 8, (repeated)
         client_timeout_event = [] :: [opensync_stats:'EventReport.ClientTimeoutEvent'()] | undefined, % = 9, (repeated)
         client_connect_event = [] :: [opensync_stats:'EventReport.ClientConnectEvent'()] | undefined % = 10, (repeated)
        }).
-endif.

-ifndef('EVENTREPORT_PB_H').
-define('EVENTREPORT_PB_H', true).
-record('EventReport',
        {client_session = []    :: [opensync_stats:'EventReport.ClientSession'()] | undefined % = 1, (repeated)
        }).
-endif.

-ifndef('REPORT_PB_H').
-define('REPORT_PB_H', true).
-record('Report',
        {nodeID                 :: iodata() | undefined, % = 1, (required)
         survey = []            :: [opensync_stats:'Survey'()] | undefined, % = 2, (repeated)
         capacity = []          :: [opensync_stats:'Capacity'()] | undefined, % = 3, (repeated)
         neighbors = []         :: [opensync_stats:'Neighbor'()] | undefined, % = 4, (repeated)
         clients = []           :: [opensync_stats:'ClientReport'()] | undefined, % = 5, (repeated)
         device = []            :: [opensync_stats:'Device'()] | undefined, % = 6, (repeated)
         bs_report = []         :: [opensync_stats:'BSReport'()] | undefined, % = 7, (repeated)
         rssi_report = []       :: [opensync_stats:'RssiReport'()] | undefined, % = 8, (repeated)
         video_voice_report = [] :: [opensync_stats:'VideoVoiceReport'()] | undefined, % = 9, (repeated)
         network_probe = []     :: [opensync_stats:'NetworkProbe'()] | undefined, % = 101, (repeated)
         event_report = []      :: [opensync_stats:'EventReport'()] | undefined % = 102, (repeated)
        }).
-endif.

-endif.
